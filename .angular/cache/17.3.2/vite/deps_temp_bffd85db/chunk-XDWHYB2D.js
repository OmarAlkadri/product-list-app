import {
  DataManager,
  DataUtil,
  JsonAdaptor,
  ListBase,
  Predicate,
  Query,
  Sortable,
  cssClass,
  moveTo
} from "./chunk-QLLWR5IS.js";
import {
  Input,
  Popup,
  TextBox,
  Tooltip,
  calculatePosition,
  createSpinner,
  fit,
  getScrollableParent,
  getZindexPartial,
  hideSpinner,
  isCollide,
  showSpinner
} from "./chunk-QOA7QARA.js";
import {
  Button,
  createCheckBox,
  rippleMouseHandler
} from "./chunk-X5JTX76H.js";
import {
  Animation,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component,
  Draggable,
  Droppable,
  Event,
  EventHandler,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  animationMode,
  append,
  attributes,
  classList,
  closest,
  compile,
  createElement,
  debounce,
  detach,
  extend,
  formatUnit,
  getComponent,
  getElement,
  getInstance,
  getRandomId,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isBlazor,
  isNullOrUndefined,
  isRippleEnabled,
  isUndefined,
  isVisible,
  matches,
  merge,
  prepend,
  remove,
  removeClass,
  rippleEffect,
  select,
  selectAll,
  setStyleAttribute,
  setValue
} from "./chunk-Z7QDVKRA.js";

// node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js
var queryString = "";
var prevString = "";
var tempQueryString = "";
var matches2 = [];
var activeClass = "e-active";
var prevElementId = "";
function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId, queryStringUpdated, currentValue, isVirtual, refresh) {
  if (!queryStringUpdated || queryString === "") {
    if (tempQueryString != "") {
      queryString = tempQueryString + String.fromCharCode(keyCode);
      tempQueryString = "";
    } else {
      queryString += String.fromCharCode(keyCode);
    }
  } else if (queryString == prevString) {
    tempQueryString = String.fromCharCode(keyCode);
  }
  if (isVirtual) {
    setTimeout(function() {
      tempQueryString = "";
    }, 700);
    setTimeout(function() {
      queryString = "";
    }, 3e3);
  } else {
    setTimeout(function() {
      queryString = "";
    }, 1e3);
  }
  var index;
  queryString = ignoreCase ? queryString.toLowerCase() : queryString;
  if (prevElementId === elementId && prevString === queryString && !refresh) {
    for (var i = 0; i < matches2.length; i++) {
      if (matches2[i].classList.contains(activeClass)) {
        index = i;
        break;
      }
      if (currentValue && matches2[i].textContent.toLowerCase() === currentValue.toLowerCase()) {
        index = i;
        break;
      }
    }
    index = index + 1;
    if (isVirtual) {
      return matches2[index] && matches2.length - 1 != index ? matches2[index] : matches2[matches2.length];
    }
    return matches2[index] ? matches2[index] : matches2[0];
  } else {
    var listItems = items;
    var strLength = queryString.length;
    var text = void 0;
    var item = void 0;
    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
    var i = selectedIndex;
    matches2 = [];
    do {
      if (i === listItems.length) {
        i = -1;
      }
      if (i === -1) {
        index = 0;
      } else {
        index = i;
      }
      item = listItems[index];
      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
      if (text.substr(0, strLength) === queryString) {
        matches2.push(listItems[index]);
      }
      i++;
    } while (i !== selectedIndex);
    prevString = queryString;
    prevElementId = elementId;
    if (isVirtual) {
      var indexUpdated = false;
      for (var i_1 = 0; i_1 < matches2.length; i_1++) {
        if (currentValue && matches2[i_1].textContent.toLowerCase() === currentValue.toLowerCase()) {
          index = i_1;
          indexUpdated = true;
          break;
        }
      }
      if (currentValue && indexUpdated) {
        index = index + 1;
      }
      return matches2[index] ? matches2[index] : matches2[0];
    }
    return matches2[0];
  }
}
function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {
  var listItems = items;
  ignoreCase = ignoreCase !== void 0 && ignoreCase !== null ? ignoreCase : true;
  var itemData = { item: null, index: null };
  if (inputVal && inputVal.length) {
    var strLength = inputVal.length;
    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;
    queryStr = escapeCharRegExp(queryStr);
    var _loop_1 = function(i2, itemsData2) {
      var item = itemsData2[i2];
      var text = void 0;
      var filterValue;
      if (items && dataSource) {
        var checkField_1 = item;
        var fieldValue_1 = fields.text.split(".");
        dataSource.filter(function(data) {
          Array.prototype.slice.call(fieldValue_1).forEach(function(value) {
            if (type === "object" && (!data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1) && checkField_1.getAttribute("data-value") === data[fields.value].toString() || type === "string" && checkField_1.textContent.toString().indexOf(data) !== -1) {
              filterValue = type === "object" ? data[value] : data;
            }
          });
        });
      }
      text = dataSource && filterValue ? (ignoreCase ? filterValue.toString().toLocaleLowerCase() : filterValue).replace(/^\s+|\s+$/g, "") : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
      if (searchType === "Equal" && text === queryStr || searchType === "StartsWith" && text.substr(0, strLength) === queryStr || searchType === "EndsWith" && text.substr(text.length - queryStr.length) === queryStr || searchType === "Contains" && new RegExp(queryStr, "g").test(text)) {
        itemData.item = item;
        itemData.index = i2;
        return { value: { item, index: i2 } };
      }
    };
    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
      var state_1 = _loop_1(i, itemsData);
      if (typeof state_1 === "object")
        return state_1.value;
    }
    return itemData;
  }
  return itemData;
}
function escapeCharRegExp(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function resetIncrementalSearchValues(elementId) {
  if (prevElementId === elementId) {
    prevElementId = "";
    prevString = "";
    queryString = "";
    matches2 = [];
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js
function highlightSearch(element, query, ignoreCase, type) {
  if (query === "") {
    return;
  } else {
    var ignoreRegex = ignoreCase ? "gim" : "gm";
    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    var replaceQuery = type === "StartsWith" ? "^(" + query + ")" : type === "EndsWith" ? "(" + query + ")$" : "(" + query + ")";
    findTextNode(element, new RegExp(replaceQuery, ignoreRegex));
  }
}
function findTextNode(element, pattern) {
  for (var index = 0; element.childNodes && index < element.childNodes.length; index++) {
    if (element.childNodes[index].nodeType === 3 && element.childNodes[index].textContent.trim() !== "") {
      var value = element.childNodes[index].nodeValue.trim().replace(pattern, '<span class="e-highlight">$1</span>');
      element.childNodes[index].nodeValue = "";
      element.innerHTML = element.innerHTML.trim() + value;
      break;
    } else {
      findTextNode(element.childNodes[index], pattern);
    }
  }
}
function revertHighlightSearch(content) {
  var contentElement = content.querySelectorAll(".e-highlight");
  for (var i = contentElement.length - 1; i >= 0; i--) {
    var parent_1 = contentElement[i].parentNode;
    var text = document.createTextNode(contentElement[i].textContent);
    parent_1.replaceChild(text, contentElement[i]);
  }
}

// node_modules/@syncfusion/ej2-dropdowns/src/common/virtual-scroll.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : new P(function(resolve2) {
        resolve2(result.value);
      }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var VirtualScroll = (
  /** @class */
  function() {
    function VirtualScroll2(parent) {
      var _this = this;
      this.sentinelInfo = {
        "up": {
          check: function(rect, info) {
            var top = rect.top - _this.containerElementRect.top;
            info.entered = top >= 0;
            return top + _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 >= 0;
          },
          axis: "Y"
        },
        "down": {
          check: function(rect, info) {
            var cHeight = _this.parent.popupContentElement.clientHeight;
            var top = rect.bottom;
            info.entered = rect.bottom <= _this.containerElementRect.bottom;
            return top - _this.parent.listItemHeight * _this.parent.virtualItemCount / 2 <= _this.parent.listItemHeight * _this.parent.virtualItemCount / 2;
          },
          axis: "Y"
        }
      };
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    VirtualScroll2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("observe", this.observe, this);
      this.parent.on("setGeneratedData", this.setGeneratedData, this);
      this.parent.on("dataProcessAsync", this.dataProcessAsync, this);
      this.parent.on("setCurrentViewDataAsync", this.setCurrentViewDataAsync, this);
      this.parent.on("bindScrollEvent", this.bindScrollEvent, this);
    };
    VirtualScroll2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("observe", this.observe);
      this.parent.off("setGeneratedData", this.setGeneratedData);
      this.parent.off("dataProcessAsync", this.dataProcessAsync);
      this.parent.off("setCurrentViewDataAsync", this.setCurrentViewDataAsync);
      this.parent.off("bindScrollEvent", this.bindScrollEvent);
    };
    VirtualScroll2.prototype.bindScrollEvent = function(component) {
      var _this = this;
      this.component = component.component;
      this.observe(function(scrollArgs) {
        return _this.scrollListener(scrollArgs);
      });
    };
    VirtualScroll2.prototype.observe = function(callback) {
      this.containerElementRect = this.parent.popupContentElement.getBoundingClientRect();
      EventHandler.add(this.parent.popupContentElement, "wheel mousedown", this.popupScrollHandler, this);
      this.touchModule = new Touch(this.parent.popupContentElement, {
        scroll: this.popupScrollHandler.bind(this)
      });
      EventHandler.add(this.parent.popupContentElement, "scroll", this.virtualScrollHandler(callback), this);
    };
    VirtualScroll2.prototype.getModuleName = function() {
      return "VirtualScroll";
    };
    VirtualScroll2.prototype.popupScrollHandler = function(e) {
      this.parent.isMouseScrollAction = true;
      this.parent.isPreventScrollAction = false;
    };
    VirtualScroll2.prototype.getPageQuery = function(query, virtualStartIndex, virtualEndIndex) {
      if (virtualEndIndex !== 0 && !this.parent.allowFiltering && this.component !== "autocomplete") {
        query = query.skip(virtualStartIndex);
      }
      return query;
    };
    VirtualScroll2.prototype.setGeneratedData = function(qStartIndex, recentlyGeneratedData) {
      var loopIteration = 0;
      var endIndex = this.parent.listData.length + this.parent.virtualItemStartIndex;
      for (var i = this.parent.virtualItemStartIndex; i < endIndex; i++) {
        var alreadyAddedData = this.parent.generatedDataObject[i];
        if (!alreadyAddedData) {
          if (recentlyGeneratedData !== null && this.parent.listData.slice(loopIteration, loopIteration + 1).length > 0) {
            var slicedData = this.parent.listData.slice(loopIteration, loopIteration + 1);
            if (slicedData.length > 0) {
              this.parent.generatedDataObject[i] = slicedData;
            }
          }
        }
        loopIteration++;
      }
    };
    VirtualScroll2.prototype.generateAndExecuteQueryAsync = function(query, virtualItemStartIndex, virtualItemEndIndex, isQueryGenerated) {
      if (virtualItemStartIndex === void 0) {
        virtualItemStartIndex = 0;
      }
      if (virtualItemEndIndex === void 0) {
        virtualItemEndIndex = 0;
      }
      if (isQueryGenerated === void 0) {
        isQueryGenerated = false;
      }
      var dataSource = this.parent.dataSource;
      if (!isQueryGenerated) {
        if (!isNullOrUndefined(this.parent.query)) {
          var newQuery = this.removeSkipAndTakeEvents(this.parent.query.clone());
          query = this.getPageQuery(newQuery, virtualItemStartIndex, virtualItemEndIndex);
        } else {
          query = this.getPageQuery(query, virtualItemStartIndex, virtualItemEndIndex);
        }
      }
      var tempCustomFilter = this.parent.isCustomFilter;
      if (this.component === "combobox") {
        var totalData = 0;
        if (this.parent.dataSource instanceof DataManager) {
          totalData = this.parent.dataSource.dataSource.json.length;
        } else if (this.parent.dataSource && this.parent.dataSource.length > 0) {
          totalData = this.parent.dataSource.length;
        }
        if (totalData > 0) {
          this.parent.isCustomFilter = totalData == this.parent.totalItemCount && this.parent.queryString != this.parent.typedString ? true : this.parent.isCustomFilter;
        }
      }
      this.parent.resetList(dataSource, this.parent.fields, query);
      this.parent.isCustomFilter = tempCustomFilter;
    };
    VirtualScroll2.prototype.removeSkipAndTakeEvents = function(query) {
      query.queries = query.queries.filter(function(event2) {
        return event2.fn !== "onSkip" && event2.fn !== "onTake";
      });
      return query;
    };
    VirtualScroll2.prototype.setCurrentViewDataAsync = function() {
      var currentData = [];
      for (var i = this.parent.viewPortInfo.startIndex; i < this.parent.viewPortInfo.endIndex; i++) {
        var alreadyAddedData = this.parent.generatedDataObject[i];
        if (alreadyAddedData) {
          currentData.push(alreadyAddedData[0]);
        }
      }
      this.parent.renderItems(currentData, this.parent.fields);
      var virtualTrackElement = this.parent.list.getElementsByClassName("e-virtual-ddl")[0];
      if (virtualTrackElement) {
        virtualTrackElement.style = this.parent.GetVirtualTrackHeight();
      }
      this.parent.UpdateSkeleton();
      this.parent.liCollections = this.parent.list.querySelectorAll(".e-list-item");
      var virtualContentElement = this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0];
      if (virtualContentElement) {
        virtualContentElement.style = this.parent.getTransformValues();
      }
      if (this.parent.fields.groupBy) {
        this.parent.scrollStop();
      }
    };
    VirtualScroll2.prototype.generateQueryAndSetQueryIndexAsync = function(query, isPopupOpen) {
      var isStartIndexInitialised = false;
      var queryStartIndex = 0;
      var queryEndIndex = 0;
      var sortedDataStartIndex = 0;
      var vEndIndex = this.parent && this.parent.viewPortInfo.endIndex !== 0 ? this.parent.viewPortInfo.endIndex : sortedDataStartIndex + this.parent.getItems().length;
      if (!isPopupOpen && vEndIndex !== 0) {
        for (var i = this.parent.viewPortInfo.startIndex; i <= vEndIndex; i++) {
          if (!(i in this.parent.generatedDataObject)) {
            if (!isStartIndexInitialised) {
              isStartIndexInitialised = true;
              queryStartIndex = queryEndIndex = i;
            } else {
              queryEndIndex = i === vEndIndex ? i : i + 1;
            }
          }
        }
      }
      if (isStartIndexInitialised && !(this.parent.totalItemCount == queryStartIndex && this.parent.totalItemCount == queryEndIndex)) {
        this.parent.virtualItemStartIndex = queryStartIndex;
        this.parent.virtualItemEndIndex = queryEndIndex;
        this.generateAndExecuteQueryAsync(query, queryStartIndex, queryEndIndex);
      }
      this.setCurrentViewDataAsync();
    };
    VirtualScroll2.prototype.dataProcessAsync = function(isOpenPopup) {
      this.parent.selectedValueInfo = null;
      this.parent.virtualItemStartIndex = this.parent.viewPortInfo.startIndex;
      this.parent.virtualItemEndIndex = this.parent.viewPortInfo.endIndex;
      this.generateQueryAndSetQueryIndexAsync(new Query(), isOpenPopup);
    };
    VirtualScroll2.prototype.virtualScrollRefreshAsync = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.parent.isCustomFilter = !(this.parent.isTyped || this.component === "combobox" && this.parent.allowFiltering && this.parent.queryString != this.parent.typedString || !isNullOrUndefined(this.parent.filterInput) && !isNullOrUndefined(this.parent.filterInput.value) && this.parent.filterInput.value !== "" && this.component !== "combobox") && !(this.component === "autocomplete" && this.parent.value != null) || this.parent.isCustomFilter;
              if (this.parent.allowFiltering || this.component === "autocomplete") {
                if (!isNullOrUndefined(this.parent.typedString) && !(this.component === "combobox" && !isNullOrUndefined(this.parent.typedString) && this.parent.allowFiltering)) {
                  if (this.parent.viewPortInfo.endIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.endIndex = this.parent.dataCount;
                  }
                  if (this.parent.viewPortInfo.startIndex >= this.parent.dataCount) {
                    this.parent.viewPortInfo.startIndex = this.parent.dataCount - this.parent.itemCount;
                  }
                } else {
                  this.parent.getSkeletonCount(true);
                  if (this.component === "combobox") {
                    this.parent.skeletonCount = this.parent.totalItemCount != 0 && this.parent.totalItemCount < this.parent.itemCount * 2 ? 0 : this.parent.skeletonCount;
                  }
                }
              }
              return [4, this.dataProcessAsync()];
            case 1:
              _a.sent();
              if (this.parent.keyboardEvent != null) {
                this.parent.handleVirtualKeyboardActions(this.parent.keyboardEvent, this.parent.pageCount);
              }
              this.parent.isCustomFilter = false;
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    VirtualScroll2.prototype.scrollListener = function(scrollArgs) {
      var _this = this;
      if (!this.parent.isPreventScrollAction) {
        var info = scrollArgs.sentinel;
        var pStartIndex = this.parent.previousStartIndex;
        this.parent.viewPortInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset, false);
        this.parent.isUpwardScrolling = false;
        if (this.parent.previousStartIndex !== pStartIndex && !this.parent.isKeyBoardAction) {
          this.parent.isScrollActionTriggered = false;
          this.parent.currentPageNumber = this.parent.viewPortInfo.currentPageNumber;
          this.parent.virtualListInfo = __assign({}, this.parent.viewPortInfo);
          this.parent.isPreventKeyAction = true;
          this.parent.isVirtualScrolling = true;
          setTimeout(function() {
            _this.parent.pageCount = _this.parent.getPageCount();
            _this.virtualScrollRefreshAsync().then(function() {
              if (_this.parent.popupObj) {
                _this.parent.list = _this.parent.popupObj.element.querySelector(".e-content") || select(".e-content");
                _this.parent.updateSelectionList();
                _this.parent.liCollections = _this.parent.getItems();
              }
              _this.parent.isKeyBoardAction = false;
              _this.parent.isVirtualScrolling = false;
              _this.parent.isPreventKeyAction = false;
            });
          }, 5);
        } else if (this.parent.isScrollActionTriggered) {
          this.parent.isPreventKeyAction = false;
          this.parent.isScrollActionTriggered = false;
          var virtualListCount = this.parent.list.querySelectorAll(".e-virtual-list").length;
          var listElement = this.parent.list.querySelector(".e-list-item");
          var translateY = scrollArgs.offset.top - listElement.offsetHeight * virtualListCount;
          this.parent.list.getElementsByClassName("e-virtual-ddl-content")[0].style.transform = "translate(0px," + translateY + "px)";
        }
        this.parent.previousInfo = this.parent.viewPortInfo;
      }
    };
    VirtualScroll2.prototype.getPageCount = function(popupElement, returnExactCount) {
      if (returnExactCount === void 0) {
        returnExactCount = false;
      }
      var list = popupElement && popupElement.querySelector(".e-content");
      if (list) {
        var liHeight = list.classList.contains("e-nodata") ? null : getComputedStyle(list.querySelectorAll(".e-list-item")[0], null).getPropertyValue("height");
        var pageCount = list.getBoundingClientRect().height / parseInt(liHeight, 10);
        return returnExactCount ? pageCount : Math.round(pageCount);
      }
      return 0;
    };
    ;
    VirtualScroll2.prototype.getRowHeight = function() {
      return isNullOrUndefined(this.parent.liCollections) || this.parent.liCollections.length == 0 ? 0 : Math.ceil(this.parent.liCollections[0].getBoundingClientRect().height);
    };
    VirtualScroll2.prototype.getInfoFromView = function(direction, info, e, isscrollAction) {
      var infoType = {
        direction,
        sentinelInfo: info,
        offsets: e,
        startIndex: this.parent.previousStartIndex,
        endIndex: this.parent.previousEndIndex
      };
      var vHeight = this.parent.popupContentElement.getBoundingClientRect().height;
      var rowHeight = this.parent.listItemHeight;
      var exactTopIndex = e.top / rowHeight;
      var infoViewIndices = vHeight / rowHeight;
      var exactEndIndex = exactTopIndex + infoViewIndices;
      var pageSizeBy4 = this.parent.virtualItemCount / 4;
      var totalItemCount = this.parent.totalItemCount;
      if (infoType.direction === "down") {
        var sIndex = Math.round(exactEndIndex) - Math.round(pageSizeBy4);
        if (isNullOrUndefined(infoType.startIndex) || exactEndIndex > infoType.startIndex + Math.round(this.parent.virtualItemCount / 2 + pageSizeBy4) && infoType.endIndex !== totalItemCount) {
          infoType.startIndex = sIndex >= 0 ? Math.round(sIndex) : 0;
          infoType.startIndex = infoType.startIndex > exactTopIndex ? Math.floor(exactTopIndex) : infoType.startIndex;
          var eIndex = infoType.startIndex + this.parent.virtualItemCount;
          infoType.startIndex = eIndex < exactEndIndex ? Math.ceil(exactEndIndex) - this.parent.virtualItemCount : infoType.startIndex;
          infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;
          infoType.startIndex = eIndex >= totalItemCount ? infoType.endIndex - this.parent.virtualItemCount > 0 ? infoType.endIndex - this.parent.virtualItemCount : 0 : infoType.startIndex;
          infoType.currentPageNumber = Math.ceil(infoType.endIndex / this.parent.virtualItemCount);
        }
      } else if (infoType.direction === "up") {
        if (infoType.startIndex && infoType.endIndex) {
          var loadAtIndex = Math.round((infoType.startIndex * rowHeight + pageSizeBy4 * rowHeight) / rowHeight);
          if (exactTopIndex < loadAtIndex) {
            var idxAddedToExactTop = pageSizeBy4 > infoViewIndices ? pageSizeBy4 : infoViewIndices + infoViewIndices / 4;
            var eIndex = Math.round(exactTopIndex + idxAddedToExactTop);
            infoType.endIndex = eIndex < totalItemCount ? eIndex : totalItemCount;
            var sIndex = infoType.endIndex - this.parent.virtualItemCount;
            infoType.startIndex = sIndex > 0 ? sIndex : 0;
            infoType.endIndex = sIndex < 0 ? this.parent.virtualItemCount : infoType.endIndex;
            infoType.currentPageNumber = Math.ceil(infoType.startIndex / this.parent.virtualItemCount);
          }
        }
      }
      if (!isscrollAction) {
        this.parent.previousStartIndex = infoType.startIndex;
        this.parent.startIndex = infoType.startIndex;
        this.parent.previousEndIndex = infoType.endIndex;
      } else {
        this.parent.scrollPreStartIndex = infoType.startIndex;
      }
      return infoType;
    };
    VirtualScroll2.prototype.virtualScrollHandler = function(callback) {
      var _this = this;
      var delay = Browser.info.name === "chrome" ? 200 : 100;
      var prevTop = 0;
      var debounced100 = debounce(callback, delay);
      var debounced50 = debounce(callback, 50);
      return function(e) {
        var top = e.target.scrollTop;
        var left = e.target.scrollLeft;
        var direction = prevTop < top && !_this.parent.isUpwardScrolling ? "down" : "up";
        prevTop = top;
        var current = _this.sentinelInfo[direction];
        var pstartIndex = _this.parent.scrollPreStartIndex;
        var scrollOffsetargs = {
          top,
          left
        };
        if (_this.parent.list.querySelectorAll(".e-virtual-list").length > 0) {
          var infoview = _this.getInfoFromView(direction, current, scrollOffsetargs, true);
          if (_this.parent.scrollPreStartIndex != pstartIndex && !_this.parent.isPreventScrollAction) {
            _this.parent.isScrollActionTriggered = true;
            var virtualPoup = _this.parent.list.querySelector(".e-virtual-ddl-content");
            virtualPoup.style.transform = "translate(0px," + top + "px)";
          }
        }
        var debounceFunction = debounced100;
        if (current.axis === "X") {
          debounceFunction = debounced50;
        }
        debounceFunction({
          direction,
          sentinel: current,
          offset: { top, left },
          focusElement: document.activeElement
        });
      };
    };
    VirtualScroll2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return VirtualScroll2;
  }()
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
      Property()
    ], FieldSettings3.prototype, "text", void 0);
    __decorate([
      Property()
    ], FieldSettings3.prototype, "value", void 0);
    __decorate([
      Property()
    ], FieldSettings3.prototype, "iconCss", void 0);
    __decorate([
      Property()
    ], FieldSettings3.prototype, "groupBy", void 0);
    __decorate([
      Property()
    ], FieldSettings3.prototype, "htmlAttributes", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var dropDownBaseClasses = {
  root: "e-dropdownbase",
  rtl: "e-rtl",
  content: "e-content",
  selected: "e-active",
  hover: "e-hover",
  noData: "e-nodata",
  fixedHead: "e-fixed-head",
  focus: "e-item-focus",
  li: "e-list-item",
  group: "e-list-group-item",
  disabled: "e-disabled",
  grouping: "e-dd-group"
};
var ITEMTEMPLATE_PROPERTY = "ItemTemplate";
var DISPLAYTEMPLATE_PROPERTY = "DisplayTemplate";
var SPINNERTEMPLATE_PROPERTY = "SpinnerTemplate";
var VALUETEMPLATE_PROPERTY = "ValueTemplate";
var GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var FOOTERTEMPLATE_PROPERTY = "FooterTemplate";
var NORECORDSTEMPLATE_PROPERTY = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE_PROPERTY = "ActionFailureTemplate";
var HIDE_GROUPLIST = "e-hide-group-header";
var DropDownBase = (
  /** @class */
  function(_super) {
    __extends(DropDownBase2, _super);
    function DropDownBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.preventChange = false;
      _this.isAngular = false;
      _this.isPreventChange = false;
      _this.isDynamicDataChange = false;
      _this.addedNewItem = false;
      _this.isAddNewItemTemplate = false;
      _this.isRequesting = false;
      _this.isVirtualizationEnabled = false;
      _this.isAllowFiltering = false;
      _this.virtualizedItemsCount = 0;
      _this.totalItemCount = 0;
      _this.dataCount = 0;
      _this.isRemoteDataUpdated = false;
      _this.isIncrementalRequest = false;
      _this.itemCount = 10;
      return _this;
    }
    DropDownBase2.prototype.getPropObject = function(prop, newProp, oldProp) {
      var newProperty = new Object();
      var oldProperty = new Object();
      var propName = function(prop2) {
        return prop2;
      };
      newProperty[propName(prop)] = newProp[propName(prop)];
      oldProperty[propName(prop)] = oldProp[propName(prop)];
      var data = new Object();
      data.newProperty = newProperty;
      data.oldProperty = oldProperty;
      return data;
    };
    DropDownBase2.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
      var value = null;
      if (!isNullOrUndefined(this.listData)) {
        if (ignoreCase) {
          value = this.checkValueCase(text, true, ignoreAccent);
        } else {
          value = this.checkValueCase(text, false, ignoreAccent);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
      var _this = this;
      var value = null;
      if (isTextByValue) {
        value = text;
      }
      var dataSource = this.listData;
      var fields = this.fields;
      var type = this.typeOfData(dataSource).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
          var item = dataSource_1[_i];
          if (!isNullOrUndefined(item)) {
            if (ignoreAccent) {
              value = this.checkingAccent(String(item), text, ignoreCase);
            } else {
              if (ignoreCase) {
                if (this.checkIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase);
                }
              } else {
                if (this.checkNonIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                }
              }
            }
          }
        }
      } else {
        if (ignoreCase) {
          dataSource.filter(function(item2) {
            var itemValue = getValue(fields.value, item2);
            if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields.text, item2).toString(), text)) {
              value = getValue(fields.value, item2);
            }
          });
        } else {
          if (isTextByValue) {
            var compareValue_1 = null;
            compareValue_1 = value;
            dataSource.filter(function(item2) {
              var itemValue = getValue(fields.value, item2);
              if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue_1.toString()) {
                value = getValue(fields.text, item2);
              }
            });
          } else {
            dataSource.filter(function(item2) {
              if (_this.checkNonIgnoreCase(getValue(fields.text, item2), text)) {
                value = getValue(fields.value, item2);
              }
            });
          }
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkingAccent = function(item, text, ignoreCase) {
      var dataItem = DataUtil.ignoreDiacritics(String(item));
      var textItem = DataUtil.ignoreDiacritics(text.toString());
      var value = null;
      if (ignoreCase) {
        if (this.checkIgnoreCase(dataItem, textItem)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      } else {
        if (this.checkNonIgnoreCase(String(item), text)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkIgnoreCase = function(item, text) {
      return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
    };
    DropDownBase2.prototype.checkNonIgnoreCase = function(item, text) {
      return String(item) === text.toString() ? true : false;
    };
    DropDownBase2.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
      var value = null;
      var dataSource = this.listData;
      var type = this.typeOfData(dataSource).typeof;
      if (isTextByValue) {
        value = dataItem.toString();
      } else {
        if (ignoreCase) {
          value = type === "string" ? String(dataItem) : this.getFormattedValue(String(dataItem));
        } else {
          value = type === "string" ? typedText : this.getFormattedValue(typedText);
        }
      }
      return value;
    };
    DropDownBase2.prototype.templateCompiler = function(baseTemplate) {
      var checkTemplate = false;
      if (typeof baseTemplate !== "function" && baseTemplate) {
        try {
          checkTemplate = selectAll(baseTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownBase2.prototype.l10nUpdate = function(actionFailure) {
      var ele = this.getModuleName() === "listbox" ? this.ulElement : this.list;
      if (this.noRecordsTemplate !== "No records found" || this.actionFailureTemplate !== "Request failed") {
        var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
        var compiledString = void 0;
        var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        ele.innerHTML = "";
        var tempaltecheck = this.templateCompiler(template);
        if (typeof template !== "function" && tempaltecheck) {
          compiledString = compile(select(template, document).innerHTML.trim());
        } else {
          compiledString = compile(template);
        }
        var templateName = actionFailure ? "actionFailureTemplate" : "noRecordsTemplate";
        var noDataElement = void 0;
        if (this.isReact && typeof template === "function") {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null);
        } else {
          noDataElement = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);
        }
        if (noDataElement && noDataElement.length > 0) {
          for (var i = 0; i < noDataElement.length; i++) {
            if (this.getModuleName() === "listbox" && templateName === "noRecordsTemplate") {
              if (noDataElement[i].nodeName === "#text") {
                var liElem = this.createElement("li");
                liElem.textContent = noDataElement[i].textContent;
                liElem.classList.add("e-list-nrt");
                liElem.setAttribute("role", "option");
                ele.appendChild(liElem);
              } else {
                noDataElement[i].classList.add("e-list-nr-template");
                ele.appendChild(noDataElement[i]);
              }
            } else {
              if (noDataElement[i] instanceof HTMLElement || noDataElement[i] instanceof Text) {
                ele.appendChild(noDataElement[i]);
              }
            }
          }
        }
        this.renderReactTemplates();
      } else {
        var l10nLocale = { noRecordsTemplate: "No records found", actionFailureTemplate: "Request failed" };
        var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);
        if (componentLocale.getConstant("actionFailureTemplate") !== "" || componentLocale.getConstant("noRecordsTemplate") !== "") {
          this.l10n = componentLocale;
        } else {
          this.l10n = new L10n(this.getModuleName() === "listbox" ? "listbox" : this.getModuleName() === "mention" ? "mention" : "dropdowns", l10nLocale, this.locale);
        }
        var content = actionFailure ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
        if (this.getModuleName() === "listbox") {
          var liElem = this.createElement("li");
          liElem.textContent = content;
          ele.appendChild(liElem);
          liElem.classList.add("e-list-nrt");
          liElem.setAttribute("role", "option");
        } else {
          if (!isNullOrUndefined(ele)) {
            ele.innerHTML = content;
          }
        }
      }
    };
    DropDownBase2.prototype.getLocaleName = function() {
      return "drop-down-base";
    };
    DropDownBase2.prototype.getTextByValue = function(value) {
      var text = this.checkValueCase(value, false, false, true);
      return text;
    };
    DropDownBase2.prototype.getFormattedValue = function(value) {
      if (this.listData && this.listData.length) {
        var item = void 0;
        if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {
          item = this.typeOfData(this.properties.value);
        } else {
          item = this.typeOfData(this.listData);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "number" || item.typeof === "number") {
          return parseFloat(value);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "boolean" || item.typeof === "boolean") {
          return value === "true" || "" + value === "true";
        }
      }
      return value;
    };
    DropDownBase2.prototype.setEnableRtl = function() {
      if (!isNullOrUndefined(this.enableRtlElements)) {
        if (this.list) {
          this.enableRtlElements.push(this.list);
        }
        if (this.enableRtl) {
          addClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        } else {
          removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        }
      }
    };
    DropDownBase2.prototype.initialize = function(e) {
      this.bindEvent = true;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;
      if (this.element.tagName === "UL") {
        var jsonElement = ListBase.createJsonFromElement(this.element);
        this.setProperties({ fields: { text: "text", value: "text" } }, true);
        this.resetList(jsonElement, this.fields);
      } else if (this.element.tagName === "SELECT") {
        var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;
        if (!dataSource) {
          this.renderItemsBySelect();
        } else if (this.isDynamicDataChange) {
          this.setListData(this.dataSource, this.fields, this.query);
        }
      } else {
        this.setListData(this.dataSource, this.fields, this.query, e);
      }
    };
    DropDownBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownBase2.prototype.updateDataAttribute = function(value) {
      var invalidAttr = ["class", "style", "id", "type", "aria-expanded", "aria-autocomplete", "aria-readonly"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === "dropdownlist" && this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownBase2.prototype.renderItemsBySelect = function() {
      var element = this.element;
      var fields = { value: "value", text: "text" };
      var jsonElement = [];
      var group = element.querySelectorAll("select>optgroup");
      var option = element.querySelectorAll("select>option");
      this.getJSONfromOption(jsonElement, option, fields);
      if (group.length) {
        for (var i = 0; i < group.length; i++) {
          var item = group[i];
          var optionGroup = {};
          optionGroup[fields.text] = item.label;
          optionGroup.isHeader = true;
          var child = item.querySelectorAll("option");
          jsonElement.push(optionGroup);
          this.getJSONfromOption(jsonElement, child, fields);
        }
        element.querySelectorAll("select>option");
      }
      this.updateFields(fields.text, fields.value, this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss);
      this.resetList(jsonElement, fields);
    };
    DropDownBase2.prototype.updateFields = function(text, value, groupBy, htmlAttributes, iconCss) {
      var field = {
        "fields": {
          text,
          value,
          groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,
          htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,
          iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss
        }
      };
      this.setProperties(field, true);
    };
    DropDownBase2.prototype.getJSONfromOption = function(items, options, fields) {
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        var json = {};
        json[fields.text] = option.innerText;
        json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ? option.getAttribute(fields.value) : option.innerText;
        items.push(json);
      }
    };
    DropDownBase2.prototype.preRender = function() {
      this.scrollTimer = -1;
      this.enableRtlElements = [];
      this.isRequested = false;
      this.isDataFetched = false;
      this.itemTemplateId = "" + this.element.id + ITEMTEMPLATE_PROPERTY;
      this.displayTemplateId = "" + this.element.id + DISPLAYTEMPLATE_PROPERTY;
      this.spinnerTemplateId = "" + this.element.id + SPINNERTEMPLATE_PROPERTY;
      this.valueTemplateId = "" + this.element.id + VALUETEMPLATE_PROPERTY;
      this.groupTemplateId = "" + this.element.id + GROUPTEMPLATE_PROPERTY;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE_PROPERTY;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE_PROPERTY;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE_PROPERTY;
    };
    DropDownBase2.prototype.setListData = function(dataSource, fields, query, event2) {
      var _this = this;
      fields = fields ? fields : this.fields;
      var ulElement;
      this.isActive = true;
      var eventArgs = { cancel: false, data: dataSource, query };
      this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;
      if (!this.isRequesting) {
        this.trigger("actionBegin", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            _this.isRequesting = true;
            _this.showSpinner();
            if (dataSource instanceof DataManager && !_this.virtualGroupDataSource) {
              _this.isRequested = true;
              if (_this.isDataFetched) {
                _this.emptyDataRequest(fields);
                return;
              }
              eventArgs2.data.executeQuery(_this.getQuery(eventArgs2.query)).then(function(e) {
                _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
                _this.trigger("actionComplete", e, function(e2) {
                  if (!_this.virtualGroupDataSource && _this.isVirtualizationEnabled) {
                    _this.isRemoteDataUpdated = true;
                    if (_this.getModuleName() === "combobox" && !_this.initialRemoteRender && _this.isAllowFiltering && _this.isVirtualizationEnabled && e2.result) {
                      e2.result = e2.result.result;
                    }
                    if (e2.result.length > 0) {
                      var dataSource_2 = e2.result;
                      if (_this.isVirtualizationEnabled && _this.fields.groupBy) {
                        var data2 = new DataManager(dataSource_2).executeLocal(new Query().group(_this.fields.groupBy));
                        _this.virtualGroupDataSource = data2.records;
                      } else {
                        _this.virtualGroupDataSource = dataSource_2;
                        _this.hideSpinner();
                        _this.isRequested = false;
                        _this.isRequesting = false;
                        _this.setListData(dataSource_2, fields, query, event2);
                        return;
                      }
                    }
                    _this.hideSpinner();
                    _this.isRequested = false;
                    _this.isRequesting = false;
                    _this.updatePopupState();
                    return;
                  }
                  if (!e2.cancel) {
                    _this.isRequesting = false;
                    var listItems2 = e2.result;
                    if (_this.isIncrementalRequest) {
                      ulElement = _this.renderItems(listItems2, fields);
                      return;
                    }
                    if (listItems2.length === 0) {
                      _this.isDataFetched = true;
                    }
                    _this.dataCount = e2.count;
                    _this.totalItemCount = e2.count;
                    ulElement = _this.renderItems(listItems2, fields);
                    _this.onActionComplete(ulElement, listItems2, e2);
                    if (_this.groupTemplate) {
                      _this.renderGroupTemplate(ulElement);
                    }
                    _this.isRequested = false;
                    _this.bindChildItems(listItems2, ulElement, fields, e2);
                  }
                });
              }).catch(function(e) {
                _this.isRequested = false;
                _this.isRequesting = false;
                _this.onActionFailure(e);
                _this.hideSpinner();
              });
            } else {
              _this.isRequesting = false;
              var listItems = void 0;
              if (_this.isVirtualizationEnabled && !_this.virtualGroupDataSource && _this.fields.groupBy) {
                var data = new DataManager(_this.dataSource).executeLocal(new Query().group(_this.fields.groupBy));
                _this.virtualGroupDataSource = data.records;
              }
              var dataManager = _this.isVirtualizationEnabled && _this.virtualGroupDataSource ? new DataManager(_this.virtualGroupDataSource) : new DataManager(eventArgs2.data);
              listItems = _this.getQuery(eventArgs2.query).executeLocal(dataManager);
              if (_this.isVirtualizationEnabled && _this.getModuleName() === "autocomplete" && (listItems.count != 0 && listItems.count < _this.itemCount * 2)) {
                var newQuery = _this.getQuery(eventArgs2.query);
                if (newQuery) {
                  for (var queryElements = 0; queryElements < newQuery.queries.length; queryElements++) {
                    if (newQuery.queries[queryElements].fn === "onTake") {
                      newQuery.queries[queryElements].e.nos = listItems.count;
                      listItems = newQuery.executeLocal(dataManager);
                      break;
                    }
                  }
                }
              }
              _this.dataCount = listItems.count;
              _this.totalItemCount = listItems.count;
              listItems = _this.isVirtualizationEnabled ? listItems.result : listItems;
              var localDataArgs = { cancel: false, result: listItems };
              _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
              _this.trigger("actionComplete", localDataArgs, function(localDataArgs2) {
                if (_this.isIncrementalRequest) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  return;
                }
                if (!localDataArgs2.cancel) {
                  ulElement = _this.renderItems(localDataArgs2.result, fields);
                  _this.onActionComplete(ulElement, localDataArgs2.result, event2);
                  if (_this.groupTemplate) {
                    _this.renderGroupTemplate(ulElement);
                  }
                  _this.bindChildItems(localDataArgs2.result, ulElement, fields);
                  setTimeout(function() {
                    if (_this.getModuleName() === "multiselect" && _this.itemTemplate != null && (ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || _this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0))) {
                      _this.updateDataList();
                    }
                  });
                }
              });
            }
          }
        });
      }
    };
    DropDownBase2.prototype.updatePopupState = function() {
    };
    DropDownBase2.prototype.updateRemoteData = function() {
      this.setListData(this.dataSource, this.fields, this.query);
    };
    DropDownBase2.prototype.bindChildItems = function(listItems, ulElement, fields, e) {
      var _this = this;
      if (listItems.length >= 100 && this.getModuleName() === "autocomplete") {
        setTimeout(function() {
          var childNode = _this.remainingItems(_this.sortedData, fields);
          append(childNode, ulElement);
          _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
          _this.updateListValues();
          _this.raiseDataBound(listItems, e);
        }, 0);
      } else {
        this.raiseDataBound(listItems, e);
      }
    };
    DropDownBase2.prototype.updateListValues = function() {
    };
    DropDownBase2.prototype.findListElement = function(list, findNode, attribute, value) {
      var liElement = null;
      if (list) {
        var listArr = [].slice.call(list.querySelectorAll(findNode));
        for (var index = 0; index < listArr.length; index++) {
          if (listArr[index].getAttribute(attribute) === value + "") {
            liElement = listArr[index];
            break;
          }
        }
      }
      return liElement;
    };
    DropDownBase2.prototype.raiseDataBound = function(listItems, e) {
      this.hideSpinner();
      var dataBoundEventArgs = {
        items: listItems,
        e
      };
      this.trigger("dataBound", dataBoundEventArgs);
    };
    DropDownBase2.prototype.remainingItems = function(dataSource, fields) {
      var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));
      if (this.itemTemplate) {
        var listElements = this.templateListItem(spliceData, fields);
        return [].slice.call(listElements.childNodes);
      }
      var type = this.typeOfData(spliceData).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);
      }
      return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);
    };
    DropDownBase2.prototype.emptyDataRequest = function(fields) {
      var listItems = [];
      this.onActionComplete(this.renderItems(listItems, fields), listItems);
      this.isRequested = false;
      this.hideSpinner();
    };
    DropDownBase2.prototype.showSpinner = function() {
    };
    DropDownBase2.prototype.hideSpinner = function() {
    };
    DropDownBase2.prototype.onActionFailure = function(e) {
      this.liCollections = [];
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      if (!isNullOrUndefined(this.list)) {
        addClass([this.list], dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.onActionComplete = function(ulElement, list, e) {
      this.listData = list;
      if (this.isVirtualizationEnabled) {
        this.notify("setGeneratedData", {
          module: "VirtualScroll"
        });
      }
      if (this.getModuleName() !== "listbox") {
        ulElement.setAttribute("tabindex", "0");
      }
      if (this.isReact) {
        this.clearTemplate(["itemTemplate", "groupTemplate", "actionFailureTemplate", "noRecordsTemplate"]);
      }
      if (!this.isVirtualizationEnabled) {
        this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
      }
      if (this.getModuleName() === "multiselect" && this.properties.allowCustomValue && this.fields.groupBy) {
        for (var i = 0; i < ulElement.childElementCount; i++) {
          if (ulElement.children[i].classList.contains("e-list-group-item")) {
            if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML == "") {
              addClass([ulElement.children[i]], HIDE_GROUPLIST);
            }
          }
        }
      }
      if (!isNullOrUndefined(this.list)) {
        if (!this.isVirtualizationEnabled) {
          this.list.innerHTML = "";
          this.list.appendChild(ulElement);
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.postRender(this.list, list, this.bindEvent);
        }
      }
    };
    DropDownBase2.prototype.postRender = function(listElement, list, bindEvent) {
      var focusItem = listElement.querySelector("." + dropDownBaseClasses.li);
      var selectedItem = listElement.querySelector("." + dropDownBaseClasses.selected);
      if (focusItem && !selectedItem) {
        focusItem.classList.add(dropDownBaseClasses.focus);
      }
      if (list.length <= 0) {
        this.l10nUpdate();
        addClass([listElement], dropDownBaseClasses.noData);
      } else {
        listElement.classList.remove(dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.getQuery = function(query) {
      return query ? query : this.query ? this.query : new Query();
    };
    DropDownBase2.prototype.updateVirtualizationProperties = function(itemCount, filtering) {
      this.isVirtualizationEnabled = true;
      this.virtualizedItemsCount = itemCount;
      this.isAllowFiltering = filtering;
    };
    DropDownBase2.prototype.renderGroupTemplate = function(listEle) {
      if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector("." + dropDownBaseClasses.group)) {
        var dataSource = this.dataSource;
        var option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };
        var headerItems = listEle.querySelectorAll("." + dropDownBaseClasses.group);
        var groupcheck = this.templateCompiler(this.groupTemplate);
        if (typeof this.groupTemplate !== "function" && groupcheck) {
          var groupValue = select(this.groupTemplate, document).innerHTML.trim();
          var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        } else {
          var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownBase2.prototype.createListItems = function(dataSource, fields) {
      if (dataSource) {
        if (fields.groupBy || this.element.querySelector("optgroup")) {
          if (fields.groupBy) {
            if (this.sortOrder !== "None") {
              dataSource = this.getSortedDataSource(dataSource);
            }
            dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
          }
          addClass([this.list], dropDownBaseClasses.grouping);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }
        var options = this.listOption(dataSource, fields);
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        this.sortedData = dataSource;
        return ListBase.createList(this.createElement, this.getModuleName() === "autocomplete" ? spliceData : dataSource, options, true, this);
      }
      return null;
    };
    DropDownBase2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;
      var options = fields.text !== null || fields.value !== null ? {
        fields: fieldValues,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      return extend({}, options, fields, true);
    };
    DropDownBase2.prototype.setFloatingHeader = function(e) {
      if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
        if (isNullOrUndefined(this.fixedHeaderElement)) {
          this.fixedHeaderElement = this.createElement("div", { className: dropDownBaseClasses.fixedHead });
          if (!isNullOrUndefined(this.list) && !this.list.querySelector("li").classList.contains(dropDownBaseClasses.group)) {
            this.fixedHeaderElement.style.display = "none";
          }
          if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {
            prepend([this.fixedHeaderElement], this.list);
          }
          this.setFixedHeader();
        }
        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === "0") {
          this.setFixedHeader();
        }
        this.scrollStop(e);
      }
    };
    DropDownBase2.prototype.scrollStop = function(e, isDownkey) {
      var target = !isNullOrUndefined(e) ? e.target : this.list;
      var liHeight = parseInt(getComputedStyle(this.getValidLi(), null).getPropertyValue("height"), 10);
      var topIndex = Math.round(target.scrollTop / liHeight);
      var liCollections = this.list.querySelectorAll("li:not(.e-hide-listitem)");
      var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
      var count = 0;
      var isCount = false;
      for (var i = topIndex; i > -1; i--) {
        var index = this.isVirtualizationEnabled ? i + virtualListCount : i;
        if (this.isVirtualizationEnabled) {
          var groupListLength = this.list.querySelectorAll(".e-list-group-item").length;
          var loadedGroupList = 0;
          if (isCount) {
            count++;
          }
          if (this.updateGroupHeader(index, liCollections, target)) {
            loadedGroupList++;
            if (count >= this.getPageCount()) {
              break;
            }
            if (groupListLength <= loadedGroupList) {
              break;
            }
          }
          if (isDownkey) {
            if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.selected) && this.getModuleName() !== "autocomplete" || !isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.focus) && this.getModuleName() === "autocomplete") {
              count++;
              isCount = true;
            }
          }
        } else {
          if (this.updateGroupHeader(index, liCollections, target)) {
            break;
          }
        }
      }
    };
    DropDownBase2.prototype.getPageCount = function(returnExactCount) {
      var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
      var pageCount = Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
      return returnExactCount ? pageCount : Math.round(pageCount);
    };
    DropDownBase2.prototype.updateGroupHeader = function(index, liCollections, target) {
      if (!isNullOrUndefined(liCollections[index]) && liCollections[index].classList.contains(dropDownBaseClasses.group)) {
        this.updateGroupFixedHeader(liCollections[index], target);
        return true;
      } else {
        this.fixedHeaderElement.style.display = "none";
        this.fixedHeaderElement.style.top = "none";
        return false;
      }
    };
    DropDownBase2.prototype.updateGroupFixedHeader = function(element, target) {
      this.fixedHeaderElement.innerHTML = element.innerHTML;
      this.fixedHeaderElement.style.position = "fixed";
      this.fixedHeaderElement.style.top = this.list.parentElement.offsetTop + this.list.offsetTop + "px";
      this.fixedHeaderElement.style.display = "block";
    };
    DropDownBase2.prototype.getValidLi = function() {
      return this.liCollections[0];
    };
    DropDownBase2.prototype.renderItems = function(listData, fields) {
      var ulElement;
      if (this.itemTemplate && listData) {
        var dataSource = listData;
        if (dataSource && fields.groupBy) {
          if (this.sortOrder !== "None") {
            dataSource = this.getSortedDataSource(dataSource);
          }
          dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }
        this.sortedData = dataSource;
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        ulElement = this.templateListItem(this.getModuleName() === "autocomplete" ? spliceData : dataSource, fields);
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && this.getModuleName() === "autocomplete") {
            virtualUlElement.replaceChild(ulElement, oldUlElement);
            this.updateListElements(listData);
          } else if (!virtualUlElement) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      } else {
        ulElement = this.createListItems(listData, fields);
        if (this.isIncrementalRequest) {
          this.incrementalLiCollections = ulElement.querySelectorAll("." + dropDownBaseClasses.li);
          this.incrementalUlElement = ulElement;
          this.incrementalListData = listData;
          return ulElement;
        }
        if (this.isVirtualizationEnabled) {
          var oldUlElement = this.list.querySelector(".e-list-parent");
          var virtualUlElement = this.list.querySelector(".e-virtual-ddl-content");
          if (listData.length >= this.virtualizedItemsCount && oldUlElement && virtualUlElement || oldUlElement && virtualUlElement && this.isAllowFiltering || oldUlElement && virtualUlElement && this.getModuleName() === "autocomplete") {
            virtualUlElement.replaceChild(ulElement, oldUlElement);
            this.updateListElements(listData);
          } else if (!virtualUlElement) {
            this.list.innerHTML = "";
            this.createVirtualContent();
            this.list.querySelector(".e-virtual-ddl-content").appendChild(ulElement);
            this.updateListElements(listData);
          }
        }
      }
      return ulElement;
    };
    DropDownBase2.prototype.createVirtualContent = function() {
      if (!this.list.querySelector(".e-virtual-ddl-content")) {
        this.list.appendChild(this.createElement("div", {
          className: "e-virtual-ddl-content"
        }));
      }
    };
    DropDownBase2.prototype.updateListElements = function(listData) {
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
      this.listData = listData;
      this.postRender(this.list, listData, this.bindEvent);
    };
    DropDownBase2.prototype.templateListItem = function(dataSource, fields) {
      var option = this.listOption(dataSource, fields);
      option.templateID = this.itemTemplateId;
      option.isStringTemplate = this.isStringTemplate;
      var itemcheck = this.templateCompiler(this.itemTemplate);
      if (typeof this.itemTemplate !== "function" && itemcheck) {
        var itemValue = select(this.itemTemplate, document).innerHTML.trim();
        return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);
      } else {
        return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);
      }
    };
    DropDownBase2.prototype.typeOfData = function(items) {
      var item = { typeof: null, item: null };
      for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {
        if (!isNullOrUndefined(items[i])) {
          var listDataType = typeof items[i] === "string" || typeof items[i] === "number" || typeof items[i] === "boolean";
          var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : "value", items[i]));
          if (!isNullData) {
            return item = { typeof: typeof items[i], item: items[i] };
          }
        }
      }
      return item;
    };
    DropDownBase2.prototype.setFixedHeader = function() {
      if (!isNullOrUndefined(this.list)) {
        this.list.parentElement.style.display = "block";
      }
      var borderWidth = 0;
      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-width"), 10);
        if (isNaN(borderWidth)) {
          var borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-top-width"), 10);
          var borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-bottom-width"), 10);
          var borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-left-width"), 10);
          var borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-right-width"), 10);
          borderWidth = borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth;
        }
      }
      if (!isNullOrUndefined(this.liCollections)) {
        var liWidth = this.getValidLi().offsetWidth - borderWidth;
        this.fixedHeaderElement.style.width = liWidth.toString() + "px";
      }
      setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });
      var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group + ":not(.e-hide-listitem)");
      this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
    };
    DropDownBase2.prototype.getSortedDataSource = function(dataSource) {
      if (dataSource && this.sortOrder !== "None") {
        var textField = this.fields.text ? this.fields.text : "text";
        if (this.typeOfData(dataSource).typeof === "string" || this.typeOfData(dataSource).typeof === "number" || this.typeOfData(dataSource).typeof === "boolean") {
          textField = "";
        }
        dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
      }
      return dataSource;
    };
    DropDownBase2.prototype.getIndexByValue = function(value) {
      var index;
      var listItems = this.getItems();
      for (var i = 0; i < listItems.length; i++) {
        if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
          index = i;
          break;
        }
      }
      return index;
    };
    DropDownBase2.prototype.getIndexByValueFilter = function(value) {
      var index;
      var listItems = this.renderItems(this.selectData, this.fields);
      if (listItems && listItems.children) {
        for (var i = 0; i < listItems.children.length; i++) {
          if (!isNullOrUndefined(value) && listItems.children[i].getAttribute("data-value") === value.toString()) {
            index = i;
            break;
          }
        }
      }
      return index;
    };
    DropDownBase2.prototype.dispatchEvent = function(element, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      if (element) {
        element.dispatchEvent(evt);
      }
    };
    DropDownBase2.prototype.setFields = function() {
      if (this.fields.value && !this.fields.text) {
        this.updateFields(this.fields.value, this.fields.value);
      } else if (!this.fields.value && this.fields.text) {
        this.updateFields(this.fields.text, this.fields.text);
      } else if (!this.fields.value && !this.fields.text) {
        this.updateFields("text", "text");
      }
    };
    DropDownBase2.prototype.resetList = function(dataSource, fields, query, e) {
      if (this.list) {
        if (this.element.tagName === "SELECT" && this.element.options.length > 0 || this.element.tagName === "UL" && this.element.childNodes.length > 0) {
          var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);
          if (!data && this.selectData && this.selectData.length > 0) {
            dataSource = this.selectData;
          }
        }
        dataSource = this.getModuleName() === "combobox" && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;
        this.addedNewItem = false;
        this.setListData(dataSource, fields, query, e);
      }
    };
    DropDownBase2.prototype.updateSelectElementData = function(isFiltering) {
      if ((isFiltering || this.isVirtualizationEnabled) && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {
        this.selectData = this.listData;
      }
    };
    DropDownBase2.prototype.updateSelection = function() {
    };
    DropDownBase2.prototype.renderList = function() {
      this.render();
    };
    DropDownBase2.prototype.updateDataSource = function(props) {
      this.resetList(this.dataSource);
      this.totalItemCount = this.dataSource instanceof DataManager ? this.dataSource.dataSource.json.length : 0;
    };
    DropDownBase2.prototype.setUpdateInitial = function(props, newProp) {
      this.isDataFetched = false;
      var updateData = {};
      for (var j = 0; props.length > j; j++) {
        if (newProp[props[j]] && props[j] === "fields") {
          this.setFields();
          updateData[props[j]] = newProp[props[j]];
        } else if (newProp[props[j]]) {
          updateData[props[j]] = newProp[props[j]];
        }
      }
      if (Object.keys(updateData).length > 0) {
        if (Object.keys(updateData).indexOf("dataSource") === -1) {
          updateData.dataSource = this.dataSource;
        }
        this.updateDataSource(updateData);
      }
    };
    DropDownBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "dropdownbase") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      this.setUpdateInitial(["sortOrder", "itemTemplate"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "sortOrder":
          case "dataSource":
          case "itemTemplate":
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "groupTemplate":
            this.renderGroupTemplate(this.list);
            if (this.ulElement && this.fixedHeaderElement) {
              var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
              this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
            }
            break;
          case "locale":
            if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {
              this.l10nUpdate();
            }
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            this.setZIndex();
            break;
        }
      }
    };
    DropDownBase2.prototype.render = function(e, isEmptyData) {
      if (this.getModuleName() === "listbox") {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content, attrs: { "tabindex": "0" } });
      } else {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content });
      }
      this.list.classList.add(dropDownBaseClasses.root);
      this.setFields();
      var rippleModel = { duration: 300, selector: "." + dropDownBaseClasses.li };
      this.rippleFun = rippleEffect(this.list, rippleModel);
      var group = this.element.querySelector("select>optgroup");
      if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (this.getModuleName() === "dropdownbase") {
        if (this.element.getAttribute("tabindex")) {
          this.list.setAttribute("tabindex", this.element.getAttribute("tabindex"));
        }
        removeClass([this.element], dropDownBaseClasses.root);
        this.element.style.display = "none";
        var wrapperElement = this.createElement("div");
        this.element.parentElement.insertBefore(wrapperElement, this.element);
        wrapperElement.appendChild(this.element);
        wrapperElement.appendChild(this.list);
      }
      this.setEnableRtl();
      if (!isEmptyData) {
        this.initialize(e);
      }
    };
    DropDownBase2.prototype.removeScrollEvent = function() {
      if (this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
    };
    DropDownBase2.prototype.getModuleName = function() {
      return "dropdownbase";
    };
    DropDownBase2.prototype.getItems = function() {
      return this.ulElement.querySelectorAll("." + dropDownBaseClasses.li);
    };
    DropDownBase2.prototype.addItem = function(items, itemIndex) {
      if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== "listbox") {
        this.renderList();
      }
      if (this.sortOrder !== "None" && isNullOrUndefined(itemIndex)) {
        var newList = [].slice.call(this.listData);
        newList.push(items);
        newList = this.getSortedDataSource(newList);
        if (this.fields.groupBy) {
          newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);
          itemIndex = newList.indexOf(items);
        } else {
          itemIndex = newList.indexOf(items);
        }
      }
      var itemsCount = this.getItems().length;
      var selectedItemValue = this.list.querySelector("." + dropDownBaseClasses.selected);
      items = items instanceof Array ? items : [items];
      var index;
      index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
      var fields = this.fields;
      if (items && fields.groupBy) {
        items = ListBase.groupDataSource(items, fields.properties);
      }
      var liCollections = [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var isHeader = item.isHeader;
        var li = this.createElement("li", { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: "option-add-" + i });
        var itemText = item instanceof Object ? getValue(fields.text, item) : item;
        if (isHeader) {
          li.innerText = itemText;
        }
        if (this.itemTemplate && !isHeader) {
          var itemCheck = this.templateCompiler(this.itemTemplate);
          var compiledString = typeof this.itemTemplate !== "function" && itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate);
          var addItemTemplate = compiledString(item, this, "itemTemplate", this.itemTemplateId, this.isStringTemplate, null, li);
          if (addItemTemplate) {
            append(addItemTemplate, li);
          }
        } else if (!isHeader) {
          li.appendChild(document.createTextNode(itemText));
        }
        li.setAttribute("data-value", item instanceof Object ? getValue(fields.value, item) : item);
        li.setAttribute("role", "option");
        this.notify("addItem", { module: "CheckBoxSelection", item: li });
        liCollections.push(li);
        this.listData.push(item);
        if (this.sortOrder === "None" && isNullOrUndefined(itemIndex) && index === 0) {
          index = null;
        }
        this.updateActionCompleteData(li, item, index);
        this.trigger("beforeItemRender", { element: li, item });
      }
      if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector("ul"))) {
        if (!isNullOrUndefined(this.list)) {
          this.list.innerHTML = "";
          this.list.classList.remove(dropDownBaseClasses.noData);
          this.isAddNewItemTemplate = true;
          if (!isNullOrUndefined(this.ulElement)) {
            this.list.appendChild(this.ulElement);
          }
        }
        this.liCollections = liCollections;
        if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {
          append(liCollections, this.ulElement);
        }
        this.updateAddItemList(this.list, itemsCount);
      } else {
        if (this.getModuleName() === "listbox" && itemsCount === 0) {
          this.ulElement.innerHTML = "";
        }
        var attr = [];
        for (var i = 0; i < items.length; i++) {
          var listGroupItem = this.ulElement.querySelectorAll(".e-list-group-item");
          for (var j = 0; j < listGroupItem.length; j++) {
            attr[j] = listGroupItem[j].innerText;
          }
          if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {
            for (var j = 0; j < listGroupItem.length; j++) {
              if (attr[j] === liCollections[i].innerText) {
                if (this.sortOrder === "None") {
                  this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);
                } else {
                  this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);
                }
                i = i + 1;
                break;
              }
            }
          } else {
            if (this.liCollections[index]) {
              this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
            } else {
              this.ulElement.appendChild(liCollections[i]);
            }
          }
          var tempLi = [].slice.call(this.liCollections);
          tempLi.splice(index, 0, liCollections[i]);
          this.liCollections = tempLi;
          index += 1;
          if (this.getModuleName() === "multiselect") {
            this.updateDataList();
          }
        }
      }
      if (this.getModuleName() === "listbox" && this.isReact) {
        this.renderReactTemplates();
      }
      if (selectedItemValue || itemIndex === 0) {
        this.updateSelection();
      }
      this.addedNewItem = true;
    };
    DropDownBase2.prototype.validationAttribute = function(target, hidden) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      hidden.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (!target.getAttribute(attributes2[i])) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        hidden.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    DropDownBase2.prototype.setZIndex = function() {
    };
    DropDownBase2.prototype.updateActionCompleteData = function(li, item, index) {
    };
    DropDownBase2.prototype.updateAddItemList = function(list, itemCount) {
    };
    DropDownBase2.prototype.updateDataList = function() {
    };
    DropDownBase2.prototype.getDataByValue = function(value) {
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isNullOrUndefined(item) && item === value) {
              return item;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
              return item;
            }
          }
        }
      }
      return null;
    };
    DropDownBase2.prototype.destroy = function() {
      if (document.body.contains(this.list)) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        if (!isNullOrUndefined(this.rippleFun)) {
          this.rippleFun();
        }
        detach(this.list);
      }
      this.liCollections = null;
      this.ulElement = null;
      this.list = null;
      this.enableRtlElements = null;
      this.rippleFun = null;
      _super.prototype.destroy.call(this);
    };
    __decorate([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], DropDownBase2.prototype, "fields", void 0);
    __decorate([
      Property(null)
    ], DropDownBase2.prototype, "itemTemplate", void 0);
    __decorate([
      Property(null)
    ], DropDownBase2.prototype, "groupTemplate", void 0);
    __decorate([
      Property("No records found")
    ], DropDownBase2.prototype, "noRecordsTemplate", void 0);
    __decorate([
      Property("Request failed")
    ], DropDownBase2.prototype, "actionFailureTemplate", void 0);
    __decorate([
      Property("None")
    ], DropDownBase2.prototype, "sortOrder", void 0);
    __decorate([
      Property([])
    ], DropDownBase2.prototype, "dataSource", void 0);
    __decorate([
      Property(null)
    ], DropDownBase2.prototype, "query", void 0);
    __decorate([
      Property("StartsWith")
    ], DropDownBase2.prototype, "filterType", void 0);
    __decorate([
      Property(true)
    ], DropDownBase2.prototype, "ignoreCase", void 0);
    __decorate([
      Property(1e3)
    ], DropDownBase2.prototype, "zIndex", void 0);
    __decorate([
      Property(false)
    ], DropDownBase2.prototype, "ignoreAccent", void 0);
    __decorate([
      Property()
    ], DropDownBase2.prototype, "locale", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "actionBegin", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "actionComplete", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "actionFailure", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "select", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "dataBound", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "created", void 0);
    __decorate([
      Event()
    ], DropDownBase2.prototype, "destroyed", void 0);
    DropDownBase2 = __decorate([
      NotifyPropertyChanges
    ], DropDownBase2);
    return DropDownBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-notifications/src/toast/toast.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT = "e-toast";
var CONTAINER = "e-toast-container";
var TITLE = "e-toast-title";
var WIDTHFULL = "e-toast-full-width";
var CONTENT = "e-toast-content";
var MESSAGE = "e-toast-message";
var ICON = "e-toast-icon";
var PROGRESS = "e-toast-progress";
var ACTIOBUTTONS = "e-toast-actions";
var CLOSEBTN = "e-toast-close-icon";
var RTL = "e-rtl";
var TOAST_BLAZOR_HIDDEN = "e-blazor-toast-hidden";
var ToastPosition = (
  /** @class */
  function(_super) {
    __extends2(ToastPosition2, _super);
    function ToastPosition2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([
      Property("Left")
    ], ToastPosition2.prototype, "X", void 0);
    __decorate2([
      Property("Top")
    ], ToastPosition2.prototype, "Y", void 0);
    return ToastPosition2;
  }(ChildProperty)
);
var ButtonModelProps = (
  /** @class */
  function(_super) {
    __extends2(ButtonModelProps2, _super);
    function ButtonModelProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([
      Property(null)
    ], ButtonModelProps2.prototype, "model", void 0);
    __decorate2([
      Property(null)
    ], ButtonModelProps2.prototype, "click", void 0);
    return ButtonModelProps2;
  }(ChildProperty)
);
var ToastAnimations = (
  /** @class */
  function(_super) {
    __extends2(ToastAnimations2, _super);
    function ToastAnimations2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([
      Property("FadeIn")
    ], ToastAnimations2.prototype, "effect", void 0);
    __decorate2([
      Property(600)
    ], ToastAnimations2.prototype, "duration", void 0);
    __decorate2([
      Property("ease")
    ], ToastAnimations2.prototype, "easing", void 0);
    return ToastAnimations2;
  }(ChildProperty)
);
var ToastAnimationSettings = (
  /** @class */
  function(_super) {
    __extends2(ToastAnimationSettings2, _super);
    function ToastAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([
      Complex({ effect: "FadeIn", duration: 600, easing: "ease" }, ToastAnimations)
    ], ToastAnimationSettings2.prototype, "show", void 0);
    __decorate2([
      Complex({ effect: "FadeOut", duration: 600, easing: "ease" }, ToastAnimations)
    ], ToastAnimationSettings2.prototype, "hide", void 0);
    return ToastAnimationSettings2;
  }(ChildProperty)
);
var Toast = (
  /** @class */
  function(_super) {
    __extends2(Toast2, _super);
    function Toast2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.toastCollection = [];
      _this.needsID = true;
      return _this;
    }
    Toast2.prototype.getModuleName = function() {
      return "toast";
    };
    Toast2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toast2.prototype.destroy = function() {
      this.hide("All");
      this.element.classList.remove(CONTAINER);
      setStyleAttribute(this.element, { "position": "", "z-index": "" });
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (!this.isBlazorServer()) {
        _super.prototype.destroy.call(this);
      }
    };
    Toast2.prototype.preRender = function() {
      this.isDevice = Browser.isDevice;
      if (this.width === "300px") {
        this.width = this.isDevice && screen.width < 768 ? "100%" : "300px";
      }
      if (isNullOrUndefined(this.target)) {
        this.target = document.body;
      }
      if (this.enableRtl && !this.isBlazorServer()) {
        this.element.classList.add(RTL);
      }
    };
    Toast2.prototype.render = function() {
      this.progressObj = [];
      this.intervalId = [];
      this.contentTemplate = null;
      this.toastTemplate = null;
      this.renderComplete();
      this.initRenderClass = this.element.className;
    };
    Toast2.prototype.show = function(toastObj) {
      var collectionObj;
      if (!isNullOrUndefined(toastObj)) {
        this.templateChanges(toastObj);
        collectionObj = JSON.parse(JSON.stringify(toastObj));
        extend(this, this, toastObj);
      }
      if (isNullOrUndefined(this.toastContainer)) {
        this.toastContainer = this.getContainer();
        var target = typeof this.target === "string" ? document.querySelector(this.target) : typeof this.target === "object" ? this.target : document.body;
        if (isNullOrUndefined(target)) {
          return;
        }
        if (target.tagName === "BODY") {
          this.toastContainer.style.position = "fixed";
        } else {
          this.toastContainer.style.position = "absolute";
          target.style.position = "relative";
        }
        this.setPositioning(this.position);
        target.appendChild(this.toastContainer);
      }
      if (this.isBlazorServer() && this.element.classList.contains("e-control")) {
        this.isToastModel(toastObj);
        return;
      }
      this.toastEle = this.createElement("div", { className: ROOT, id: getUniqueID("toast") });
      this.setWidthHeight();
      this.setCSSClass(this.cssClass);
      isNullOrUndefined(this.template) || this.template === "" ? this.personalizeToast() : this.templateRendering();
      this.setProgress();
      this.setCloseButton();
      this.setAria();
      this.appendToTarget(toastObj);
      if (this.isDevice && screen.width < 768) {
        new Touch(this.toastEle, { swipe: this.swipeHandler.bind(this) });
      }
      if (!isNullOrUndefined(collectionObj)) {
        extend(collectionObj, { element: [this.toastEle] }, true);
        this.toastCollection.push(collectionObj);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toast2.prototype.showToast = function(id, toastObj) {
      this.toastEle = this.element.querySelector("#" + id);
      this.show(toastObj);
    };
    Toast2.prototype.isToastModel = function(toastObj) {
      this.toastContainer = this.element;
      this.setPositioning(this.position);
      var proxy = this;
      if (!isNullOrUndefined(proxy.element.lastElementChild)) {
        this.setProgress();
      }
      this.setAria();
      this.appendToTarget(toastObj);
    };
    Toast2.prototype.swipeHandler = function(e) {
      var toastEle = closest(e.originalEvent.target, "." + ROOT + ":not(." + CONTAINER + ")");
      var hideAnimation = this.animation.hide.effect;
      if (!isNullOrUndefined(toastEle)) {
        if (e.swipeDirection === "Right") {
          this.animation.hide.effect = "SlideRightOut";
          this.hideToast("swipe", toastEle);
        } else if (e.swipeDirection === "Left") {
          this.animation.hide.effect = "SlideLeftOut";
          this.hideToast("swipe", toastEle);
        }
        this.animation.hide.effect = hideAnimation;
      }
    };
    Toast2.prototype.templateChanges = function(toastObj) {
      if (!isUndefined(toastObj.content) && !isNullOrUndefined(this.contentTemplate) && this.content !== toastObj.content) {
        this.clearContentTemplate();
      }
      if (!isUndefined(toastObj.template) && !isNullOrUndefined(this.toastTemplate) && this.template !== toastObj.template) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.setCSSClass = function(cssClass2) {
      if (cssClass2) {
        var split = cssClass2.indexOf(",") !== -1 ? "," : " ";
        classList(this.toastEle, cssClass2.split(split), []);
        if (this.toastContainer) {
          classList(this.toastContainer, cssClass2.split(split), []);
        }
      }
    };
    Toast2.prototype.setWidthHeight = function() {
      if (this.width === "300px") {
        this.toastEle.style.width = formatUnit(this.width);
      } else if (this.width === "100%") {
        this.toastContainer.classList.add(WIDTHFULL);
      } else {
        this.toastEle.style.width = formatUnit(this.width);
        this.toastContainer.classList.remove(WIDTHFULL);
      }
      this.toastEle.style.height = formatUnit(this.height);
    };
    Toast2.prototype.templateRendering = function() {
      this.fetchEle(this.toastEle, this.template, "template");
    };
    Toast2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var item = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(item, item, beforeEvent);
        this.trigger("beforeSanitizeHtml", item);
        if (item.cancel && !isNullOrUndefined(item.helper)) {
          value = item.helper(value);
        } else if (!item.cancel) {
          value = SanitizeHtmlHelper.serializeValue(item, value);
        }
      }
      return value;
    };
    Toast2.prototype.hide = function(element) {
      this.hideToast("", element);
    };
    Toast2.prototype.hideToast = function(interactionType, element) {
      if (isNullOrUndefined(this.toastContainer) || this.toastContainer.childElementCount === 0) {
        return;
      }
      if (typeof element === "string" && element === "All") {
        for (var i = 0; i < this.toastContainer.childElementCount; i++) {
          this.destroyToast(this.toastContainer.children[i], interactionType);
        }
        return;
      }
      if (isNullOrUndefined(element)) {
        element = this.newestOnTop ? this.toastContainer.lastElementChild : this.toastContainer.firstElementChild;
      }
      this.destroyToast(element, interactionType);
    };
    Toast2.prototype.fetchEle = function(ele, value, prob) {
      value = typeof value === "string" ? this.sanitizeHelper(value) : value;
      var templateFn;
      var tempVar;
      var tmpArray;
      var templateProps;
      if (ele.classList.contains(TITLE)) {
        templateProps = this.element.id + "title";
      } else if (ele.classList.contains(CONTENT)) {
        templateProps = this.element.id + "content";
      } else {
        templateProps = this.element.id + "template";
      }
      prob === "content" ? tempVar = this.contentTemplate : tempVar = this.toastTemplate;
      if (!isNullOrUndefined(tempVar)) {
        ele.appendChild(tempVar.cloneNode(true));
        return ele;
      }
      try {
        if (typeof value !== "function" && document.querySelectorAll(value).length > 0) {
          var elem = null;
          if (prob !== "title") {
            elem = document.querySelector(value);
            ele.appendChild(elem);
            elem.style.display = "";
          }
          var clo = isNullOrUndefined(elem) ? tempVar : elem.cloneNode(true);
          prob === "content" ? this.contentTemplate = clo : this.toastTemplate = clo;
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        templateFn = typeof value == "object" ? compile(value) : compile(initializeCSPTemplate(function() {
          return value;
        }));
        var templateValue = value;
      }
      if (!isNullOrUndefined(templateFn)) {
        if (!this.isBlazorServer()) {
          tmpArray = templateFn({}, this, prob, null, true);
        } else {
          var isString = true;
          tmpArray = templateFn({}, this, prob, templateProps, isString);
        }
      }
      if (!isNullOrUndefined(tmpArray) && tmpArray.length > 0 && !(isNullOrUndefined(tmpArray[0].tagName) && tmpArray.length === 1)) {
        [].slice.call(tmpArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (typeof value !== "function" && ele.childElementCount === 0) {
        ele.innerHTML = value;
      }
      return ele;
    };
    Toast2.prototype.clearProgress = function(intervalId) {
      if (!isNullOrUndefined(this.intervalId[intervalId])) {
        clearInterval(this.intervalId[intervalId]);
        delete this.intervalId[intervalId];
      }
      if (!isNullOrUndefined(this.progressObj[intervalId])) {
        clearInterval(this.progressObj[intervalId].intervalId);
        delete this.progressObj[intervalId];
      }
    };
    Toast2.prototype.removeToastContainer = function(isClosed) {
      if (isClosed && this.toastContainer.classList.contains("e-toast-util")) {
        detach(this.toastContainer);
      }
    };
    Toast2.prototype.clearContainerPos = function(isClosed) {
      var _this = this;
      if (this.isBlazorServer()) {
        this.toastContainer = null;
        return;
      }
      if (this.customPosition) {
        setStyleAttribute(this.toastContainer, { "left": "", "top": "" });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
        this.customPosition = false;
      } else {
        [
          ROOT + "-top-left",
          ROOT + "-top-right",
          ROOT + "-bottom-left",
          ROOT + "-bottom-right",
          ROOT + "-bottom-center",
          ROOT + "-top-center",
          ROOT + "-full-width"
        ].forEach(function(pos) {
          if (!isNullOrUndefined(_this.toastContainer) && _this.toastContainer.classList.contains(pos)) {
            _this.toastContainer.classList.remove(pos);
          }
        });
        this.removeToastContainer(isClosed);
        this.toastContainer = null;
      }
      if (!isNullOrUndefined(this.contentTemplate)) {
        this.clearContentTemplate();
      }
      if (!isNullOrUndefined(this.toastTemplate)) {
        this.clearToastTemplate();
      }
    };
    Toast2.prototype.clearContentTemplate = function() {
      this.contentTemplate.style.display = "none";
      document.body.appendChild(this.contentTemplate);
      this.contentTemplate = null;
    };
    Toast2.prototype.clearToastTemplate = function() {
      this.toastTemplate.style.display = "none";
      document.body.appendChild(this.toastTemplate);
      this.toastTemplate = null;
    };
    Toast2.prototype.isBlazorServer = function() {
      return isBlazor() && this.isServerRendered;
    };
    Toast2.prototype.destroyToast = function(toastEle, interactionType) {
      var _this = this;
      var toastObj;
      for (var i = 0; i < this.toastCollection.length; i++) {
        if (this.toastCollection[i].element[0] === toastEle) {
          toastObj = this.toastCollection[i];
          this.toastCollection.splice(i, 1);
        }
      }
      var toastBeforeClose = {
        options: this,
        cancel: false,
        type: interactionType,
        element: toastEle,
        toastContainer: this.toastContainer
      };
      var hideAnimate = this.animation.hide;
      var animate = {
        duration: hideAnimate.duration,
        name: hideAnimate.effect === "None" && animationMode === "Enable" ? "FadeOut" : hideAnimate.effect,
        timingFunction: hideAnimate.easing
      };
      var intervalId = parseInt(toastEle.id.split("toast_")[1], 10);
      var toastClose = this.isBlazorServer() ? {
        options: toastObj,
        toastContainer: this.toastContainer
      } : {
        options: toastObj,
        toastContainer: this.toastContainer,
        toastObj: this
      };
      this.trigger("beforeClose", toastBeforeClose, function(toastBeforeCloseArgs) {
        if (!toastBeforeCloseArgs.cancel) {
          if (!isNullOrUndefined(_this.progressObj[intervalId]) && !isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
            _this.progressObj[intervalId].progressEle.style.width = "0%";
          }
          animate.end = function() {
            _this.clearProgress(intervalId);
            if (!_this.isBlazorServer() || isNullOrUndefined(toastObj)) {
              detach(toastEle);
            }
            _this.trigger("close", toastClose);
            if (_this.toastContainer.childElementCount === 0) {
              _this.clearContainerPos(true);
            }
            hideAnimate = null;
            animate = null;
          };
          new Animation(animate).animate(toastEle);
        }
      });
    };
    Toast2.prototype.personalizeToast = function() {
      this.setIcon();
      this.setTitle();
      this.setContent();
      this.actionButtons();
    };
    Toast2.prototype.setAria = function() {
      attributes(this.toastEle, { "role": "alert" });
    };
    Toast2.prototype.setPositioning = function(pos) {
      if (this.isBlazorServer()) {
        return;
      }
      if (!isNaN(parseFloat(pos.X)) || !isNaN(parseFloat(pos.Y))) {
        this.customPosition = true;
        setStyleAttribute(this.toastContainer, { "left": formatUnit(pos.X), "top": formatUnit(pos.Y) });
      } else {
        this.toastContainer.classList.add(ROOT + "-" + pos.Y.toString().toLowerCase() + "-" + pos.X.toString().toLowerCase());
      }
    };
    Toast2.prototype.setCloseButton = function() {
      if (!this.showCloseButton) {
        return;
      }
      var localeText = { close: "Close" };
      this.l10n = new L10n("toast", localeText, this.locale);
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      var closeBtn = this.createElement("div", { className: CLOSEBTN + " e-icons ", attrs: { tabindex: "0", "aria-label": closeIconTitle, "role": "button" } });
      this.toastEle.classList.add("e-toast-header-close-icon");
      this.toastEle.appendChild(closeBtn);
    };
    Toast2.prototype.setProgress = function() {
      if (this.timeOut > 0) {
        var id = parseInt(this.toastEle.id.split("toast_")[1], 10);
        this.intervalId[id] = window.setTimeout(this.destroyToast.bind(this, this.toastEle), this.timeOut);
        this.progressObj[id] = {
          hideEta: null,
          intervalId: null,
          maxHideTime: null,
          element: null,
          timeOutId: null,
          progressEle: null
        };
        this.progressObj[id].maxHideTime = parseFloat(this.timeOut + "");
        this.progressObj[id].hideEta = (/* @__PURE__ */ new Date()).getTime() + this.progressObj[id].maxHideTime;
        this.progressObj[id].element = this.toastEle;
        if (this.extendedTimeout > 0) {
          EventHandler.add(this.toastEle, "mouseover", this.toastHoverAction.bind(this, id));
          EventHandler.add(this.toastEle, "mouseleave", this.delayedToastProgress.bind(this, id));
          this.progressObj[id].timeOutId = this.intervalId[id];
        }
        if (this.showProgressBar) {
          this.progressBarEle = this.createElement("div", { className: PROGRESS });
          this.toastEle.insertBefore(this.progressBarEle, this.toastEle.children[0]);
          this.progressObj[id].intervalId = setInterval(this.updateProgressBar.bind(this, this.progressObj[id]), 10);
          this.progressObj[id].progressEle = this.progressBarEle;
        }
      }
    };
    Toast2.prototype.toastHoverAction = function(id) {
      clearTimeout(this.progressObj[id].timeOutId);
      clearInterval(this.progressObj[id].intervalId);
      this.progressObj[id].hideEta = 0;
      var toastEle = this.progressObj[id].element;
      if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
        this.progressObj[id].progressEle.style.width = "0%";
      }
    };
    Toast2.prototype.delayedToastProgress = function(id) {
      var progress = this.progressObj[id];
      var toastEle = progress.element;
      progress.timeOutId = window.setTimeout(this.destroyToast.bind(this, toastEle), this.extendedTimeout);
      progress.maxHideTime = parseFloat(this.extendedTimeout + "");
      progress.hideEta = (/* @__PURE__ */ new Date()).getTime() + progress.maxHideTime;
      if (!isNullOrUndefined(toastEle.querySelector("." + PROGRESS))) {
        progress.intervalId = setInterval(this.updateProgressBar.bind(this, progress), 10);
      }
    };
    Toast2.prototype.updateProgressBar = function(progressObj) {
      var percentage = (progressObj.hideEta - (/* @__PURE__ */ new Date()).getTime()) / progressObj.maxHideTime * 100;
      percentage = this.progressDirection === "Ltr" ? 100 - percentage : percentage;
      progressObj.progressEle.style.width = percentage + "%";
    };
    Toast2.prototype.setIcon = function() {
      if (isNullOrUndefined(this.icon) || this.icon.length === 0) {
        return;
      }
      var iconEle = this.createElement("div", { className: ICON + " e-icons " + this.icon });
      this.toastEle.classList.add("e-toast-header-icon");
      this.toastEle.appendChild(iconEle);
    };
    Toast2.prototype.setTitle = function() {
      if (isNullOrUndefined(this.title)) {
        return;
      }
      var titleEle = this.createElement("div", { className: TITLE });
      titleEle = this.fetchEle(titleEle, this.title, "title");
      var msgContainer = this.createElement("div", { className: MESSAGE });
      msgContainer.appendChild(titleEle);
      this.toastEle.appendChild(msgContainer);
    };
    Toast2.prototype.setContent = function() {
      var contentEle = this.createElement("div", { className: CONTENT });
      var ele = this.element;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s/g, "") !== "";
        if ((ele.children.length > 0 || isContent) && !(ele.firstElementChild && ele.firstElementChild.classList.contains(ROOT))) {
          this.innerEle = document.createDocumentFragment();
          var tempEle_1 = this.createElement("div");
          while (ele.childNodes.length !== 0) {
            this.innerEle.appendChild(this.element.childNodes[0]);
          }
          contentEle.appendChild(this.innerEle);
          [].slice.call(contentEle.children).forEach(function(ele2) {
            tempEle_1.appendChild(ele2.cloneNode(true));
          });
          this.content = tempEle_1;
          this.appendMessageContainer(contentEle);
        }
      } else {
        if (typeof this.content === "object" && !isNullOrUndefined(this.content.tagName)) {
          contentEle.appendChild(this.content);
          this.content = this.content.cloneNode(true);
          this.appendMessageContainer(contentEle);
        } else {
          contentEle = this.fetchEle(contentEle, this.content, "content");
          this.appendMessageContainer(contentEle);
        }
      }
    };
    Toast2.prototype.appendMessageContainer = function(element) {
      if (this.toastEle.querySelectorAll("." + MESSAGE).length > 0) {
        this.toastEle.querySelector("." + MESSAGE).appendChild(element);
      } else {
        var msgContainer = this.createElement("div", { className: MESSAGE });
        msgContainer.appendChild(element);
        this.toastEle.appendChild(msgContainer);
      }
    };
    Toast2.prototype.actionButtons = function() {
      var _this = this;
      var actionBtnContainer = this.createElement("div", { className: ACTIOBUTTONS });
      [].slice.call(this.buttons).forEach(function(actionBtn) {
        if (isNullOrUndefined(actionBtn.model)) {
          return;
        }
        var btnDom = _this.createElement("button");
        btnDom.setAttribute("type", "button");
        if (isNullOrUndefined(actionBtn.model.cssClass) || actionBtn.model.cssClass.length === 0) {
          actionBtn.model.cssClass = "e-primary " + _this.cssClass;
        }
        btnDom.classList.add("e-small");
        new Button(actionBtn.model, btnDom);
        if (!isNullOrUndefined(actionBtn.click) && typeof actionBtn.click === "function") {
          EventHandler.add(btnDom, "click", actionBtn.click);
        }
        actionBtnContainer.appendChild(btnDom);
      });
      if (actionBtnContainer.childElementCount > 0) {
        this.appendMessageContainer(actionBtnContainer);
      }
    };
    Toast2.prototype.appendToTarget = function(toastObj) {
      var _this = this;
      var toastBeforeOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle,
        cancel: false
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle,
        cancel: false
      };
      this.trigger("beforeOpen", toastBeforeOpen, function(toastBeforeOpenArgs) {
        if (!toastBeforeOpenArgs.cancel) {
          if (!_this.isBlazorServer()) {
            _this.toastEle.style.display = "none";
          }
          if (_this.newestOnTop && _this.toastContainer.childElementCount !== 0) {
            _this.toastContainer.insertBefore(_this.toastEle, _this.toastContainer.children[0]);
          } else if (!_this.isBlazorServer()) {
            _this.toastContainer.appendChild(_this.toastEle);
          }
          removeClass([_this.toastEle], TOAST_BLAZOR_HIDDEN);
          EventHandler.add(_this.toastEle, "click", _this.clickHandler, _this);
          EventHandler.add(_this.toastEle, "keydown", _this.keyDownHandler, _this);
          _this.toastContainer.style.zIndex = getZindexPartial(_this.toastContainer) + "";
          _this.displayToast(_this.toastEle, toastObj);
        } else if (_this.isBlazorServer()) {
          var intervalId = parseInt(_this.toastEle.id.split("toast_")[1], 10);
          _this.clearProgress(intervalId);
          detach(_this.toastEle);
          if (_this.toastContainer.childElementCount === 0) {
            _this.clearContainerPos();
          }
        }
      });
    };
    Toast2.prototype.clickHandler = function(e) {
      var _this = this;
      if (!this.isBlazorServer()) {
        e.stopPropagation();
      }
      var target = e.target;
      var toastEle = closest(target, "." + ROOT);
      var clickArgs = this.isBlazorServer() ? {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e
      } : {
        element: toastEle,
        cancel: false,
        clickToClose: false,
        originalEvent: e,
        toastObj: this
      };
      var isCloseIcon = target.classList.contains(CLOSEBTN);
      this.trigger("click", clickArgs, function(toastClickArgs) {
        if (isCloseIcon && !toastClickArgs.cancel || toastClickArgs.clickToClose) {
          _this.destroyToast(toastEle, "click");
        }
      });
    };
    Toast2.prototype.keyDownHandler = function(e) {
      if (e.target.classList.contains(CLOSEBTN) && (e.keyCode === 13 || e.keyCode === 32)) {
        var target = e.target;
        var toastEle = closest(target, "." + ROOT);
        this.destroyToast(toastEle, "key");
      }
    };
    Toast2.prototype.displayToast = function(toastEle, toastObj) {
      var _this = this;
      var showAnimate = this.animation.show;
      var animate = {
        duration: showAnimate.duration,
        name: showAnimate.effect === "None" && animationMode === "Enable" ? "FadeIn" : showAnimate.effect,
        timingFunction: showAnimate.easing
      };
      var toastOpen = this.isBlazorServer() ? {
        options: toastObj,
        element: this.toastEle
      } : {
        options: toastObj,
        toastObj: this,
        element: this.toastEle
      };
      animate.begin = function() {
        toastEle.style.display = "";
      };
      animate.end = function() {
        _this.trigger("open", toastOpen);
      };
      new Animation(animate).animate(toastEle);
    };
    Toast2.prototype.getContainer = function() {
      this.element.classList.add(CONTAINER);
      return this.element;
    };
    Toast2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var container = this.element;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            newProp.enableRtl ? container.classList.add(RTL) : container.classList.remove(RTL);
            break;
        }
      }
    };
    __decorate2([
      Property("300px")
    ], Toast2.prototype, "width", void 0);
    __decorate2([
      Property("auto")
    ], Toast2.prototype, "height", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "title", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "content", void 0);
    __decorate2([
      Property(true)
    ], Toast2.prototype, "enableHtmlSanitizer", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "icon", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "cssClass", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "template", void 0);
    __decorate2([
      Property(true)
    ], Toast2.prototype, "newestOnTop", void 0);
    __decorate2([
      Property(false)
    ], Toast2.prototype, "showCloseButton", void 0);
    __decorate2([
      Property(false)
    ], Toast2.prototype, "showProgressBar", void 0);
    __decorate2([
      Property(5e3)
    ], Toast2.prototype, "timeOut", void 0);
    __decorate2([
      Property("Rtl")
    ], Toast2.prototype, "progressDirection", void 0);
    __decorate2([
      Property(1e3)
    ], Toast2.prototype, "extendedTimeout", void 0);
    __decorate2([
      Complex({}, ToastAnimationSettings)
    ], Toast2.prototype, "animation", void 0);
    __decorate2([
      Complex({}, ToastPosition)
    ], Toast2.prototype, "position", void 0);
    __decorate2([
      Collection([{}], ButtonModelProps)
    ], Toast2.prototype, "buttons", void 0);
    __decorate2([
      Property(null)
    ], Toast2.prototype, "target", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "created", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "beforeSanitizeHtml", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "destroyed", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "open", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "beforeOpen", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "beforeClose", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "close", void 0);
    __decorate2([
      Event()
    ], Toast2.prototype, "click", void 0);
    Toast2 = __decorate2([
      NotifyPropertyChanges
    ], Toast2);
    return Toast2;
  }(Component)
);
var ToastUtility;
(function(ToastUtility2) {
  function show(content, type, timeOut) {
    var toastContainerElement;
    if (document.querySelector("." + CONTAINER)) {
      toastContainerElement = document.querySelector("." + CONTAINER);
    } else {
      toastContainerElement = createElement("div", { "className": ROOT + " " + CONTAINER + " e-toast-util" });
      document.body.appendChild(toastContainerElement);
    }
    var untilToastsModel;
    if (typeof content === "string") {
      var cssClass2 = void 0;
      var icon = void 0;
      if (!isNullOrUndefined(type)) {
        switch (type) {
          case "Warning":
            cssClass2 = "e-toast-warning";
            icon = "e-toast-warning-icon";
            break;
          case "Success":
            cssClass2 = "e-toast-success";
            icon = "e-toast-success-icon";
            break;
          case "Error":
            cssClass2 = "e-toast-danger";
            icon = "e-toast-error-icon";
            break;
          case "Information":
            cssClass2 = "e-toast-info";
            icon = "e-toast-info-icon";
            break;
        }
      } else {
        cssClass2 = "";
        icon = "";
      }
      untilToastsModel = {
        content,
        cssClass: cssClass2,
        icon,
        timeOut: !isNullOrUndefined(timeOut) ? timeOut : 5e3
      };
    } else {
      untilToastsModel = content;
    }
    var toastObj = new Toast(untilToastsModel);
    toastObj.appendTo(toastContainerElement);
    toastObj.show();
    return toastObj;
  }
  ToastUtility2.show = show;
})(ToastUtility || (ToastUtility = {}));

// node_modules/@syncfusion/ej2-notifications/src/message/message.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Severity;
(function(Severity2) {
  Severity2["Normal"] = "Normal";
  Severity2["Success"] = "Success";
  Severity2["Info"] = "Info";
  Severity2["Warning"] = "Warning";
  Severity2["Error"] = "Error";
})(Severity || (Severity = {}));
var Variant;
(function(Variant2) {
  Variant2["Text"] = "Text";
  Variant2["Outlined"] = "Outlined";
  Variant2["Filled"] = "Filled";
})(Variant || (Variant = {}));
var MSG_ICON = "e-msg-icon";
var MSG_CLOSE_ICON = "e-msg-close-icon";
var MSG_CONTENT = "e-msg-content";
var MSG_CONTENT_CENTER = "e-content-center";
var RTL2 = "e-rtl";
var SUCCESS = "e-success";
var WARNING = "e-warning";
var INFO = "e-info";
var ERROR = "e-error";
var OUTLINED = "e-outlined";
var FILLED = "e-filled";
var HIDE = "e-hidden";
var Message = (
  /** @class */
  function(_super) {
    __extends3(Message2, _super);
    function Message2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.initialRender = true;
      return _this;
    }
    Message2.prototype.getModuleName = function() {
      return "message";
    };
    Message2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Message2.prototype.preRender = function() {
      var localeText = { close: "Close" };
      this.l10n = new L10n("message", localeText, this.locale);
    };
    Message2.prototype.render = function() {
      this.innerContent = this.element.innerHTML;
      this.element.innerHTML = "";
      this.msgElement = this.createElement("div", { className: "e-msg-content-wrap" });
      this.initialize();
      this.wireEvents();
      this.renderComplete();
      this.renderReactTemplates();
      this.initialRender = false;
    };
    Message2.prototype.initialize = function() {
      this.element.setAttribute("role", "alert");
      this.setCssClass();
      this.setIcon();
      this.setContent();
      this.setCloseIcon();
      this.setSeverity();
      this.setVariant();
      this.setVisible();
      if (this.enableRtl) {
        this.element.classList.add(RTL2);
      }
    };
    Message2.prototype.setIcon = function() {
      if (this.showIcon) {
        this.iconElement = this.createElement("span", { className: MSG_ICON });
        if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
          this.msgElement.appendChild(this.iconElement);
        } else {
          this.element.appendChild(this.iconElement);
        }
      }
    };
    Message2.prototype.setCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", { attrs: { type: "button", class: MSG_CLOSE_ICON } });
        this.element.appendChild(this.closeIcon);
        this.setTitle();
      }
    };
    Message2.prototype.setTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Message2.prototype.setContent = function() {
      this.txtElement = this.createElement("div", { className: MSG_CONTENT });
      if (this.element.classList.contains(MSG_CONTENT_CENTER)) {
        this.msgElement.appendChild(this.txtElement);
        this.element.appendChild(this.msgElement);
      } else {
        this.element.appendChild(this.txtElement);
      }
      this.setTemplate();
    };
    Message2.prototype.setTemplate = function() {
      var templateFn;
      if (isNullOrUndefined(this.content) || this.content === "") {
        this.txtElement.innerHTML = this.innerContent;
      } else if (!isNullOrUndefined(this.content) && this.content !== "") {
        if (typeof this.content === "string" || typeof this.content !== "string") {
          if (this.isVue || typeof this.content !== "string") {
            templateFn = compile(this.content);
            if (!isNullOrUndefined(templateFn)) {
              var tempArr = templateFn({}, this, "content", this.element.id + "content", true);
              if (tempArr) {
                tempArr = Array.prototype.slice.call(tempArr);
                append(tempArr, this.txtElement);
                this.renderReactTemplates();
              }
            }
          } else {
            this.txtElement.innerHTML = this.content;
          }
        }
      }
    };
    Message2.prototype.setSeverity = function() {
      var classList2 = [SUCCESS, WARNING, INFO, ERROR];
      removeClass([this.element], classList2);
      if (this.severity === "Success") {
        addClass([this.element], SUCCESS);
      } else if (this.severity === "Warning") {
        addClass([this.element], WARNING);
      } else if (this.severity === "Error") {
        addClass([this.element], ERROR);
      } else if (this.severity === "Info") {
        addClass([this.element], INFO);
      }
    };
    Message2.prototype.setVariant = function() {
      var classList2 = [FILLED, OUTLINED];
      removeClass([this.element], classList2);
      if (this.variant === "Outlined") {
        addClass([this.element], OUTLINED);
      } else if (this.variant === "Filled") {
        addClass([this.element], FILLED);
      }
    };
    Message2.prototype.setCssClass = function(oldCssClass) {
      if (oldCssClass) {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Message2.prototype.setVisible = function() {
      if (!this.visible) {
        addClass([this.element], HIDE);
        if (!this.initialRender) {
          this.trigger("closed", { event, isInteracted: false, element: this.element });
        }
      } else {
        removeClass([this.element], HIDE);
      }
    };
    Message2.prototype.clickHandler = function(event2) {
      this.closeMessage(event2);
    };
    Message2.prototype.keyboardHandler = function(event2) {
      if (event2.keyCode === 32 || event2.keyCode === 13) {
        this.closeMessage(event2);
      }
    };
    Message2.prototype.closeMessage = function(event2) {
      addClass([this.element], HIDE);
      this.setProperties({ visible: false }, true);
      var eventArgs = { event: event2, isInteracted: true, element: this.element };
      this.trigger("closed", eventArgs);
    };
    Message2.prototype.wireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.clickHandler, this);
        EventHandler.add(this.closeIcon, "keydown", this.keyboardHandler, this);
      }
    };
    Message2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.clickHandler);
        EventHandler.remove(this.closeIcon, "keydown", this.keyboardHandler);
      }
    };
    Message2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.setCssClass(oldProp.cssClass);
            break;
          case "content":
            this.txtElement.innerHTML = "";
            this.setTemplate();
            break;
          case "enableRtl":
            if (!this.enableRtl) {
              this.element.classList.remove(RTL2);
            } else {
              this.element.classList.add(RTL2);
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.setTitle();
            }
            break;
          case "showIcon":
            if (!this.showIcon && this.element.getElementsByClassName(MSG_ICON).length > 0) {
              detach(this.iconElement);
            }
            if (this.showIcon) {
              this.iconElement = this.createElement("span", { className: MSG_ICON });
              this.element.insertBefore(this.iconElement, this.txtElement);
            }
            break;
          case "showCloseIcon":
            if (!this.showCloseIcon && !isNullOrUndefined(this.closeIcon)) {
              this.unWireEvents();
              detach(this.closeIcon);
            } else {
              this.setCloseIcon();
              this.wireEvents();
            }
            break;
          case "severity":
            this.setSeverity();
            break;
          case "variant":
            this.setVariant();
            break;
          case "visible":
            this.setVisible();
            break;
        }
      }
    };
    Message2.prototype.destroy = function() {
      var cssClass2 = isNullOrUndefined(this.cssClass) ? [""] : this.cssClass.split(" ");
      var className = [SUCCESS, WARNING, INFO, ERROR, RTL2, HIDE, OUTLINED, FILLED];
      var classList2 = cssClass2.length === 1 && cssClass2[0] === "" ? className : className.concat(cssClass2);
      removeClass([this.element], classList2);
      this.element.removeAttribute("role");
      this.unWireEvents();
      if (!isNullOrUndefined(this.iconElement)) {
        detach(this.iconElement);
      }
      detach(this.txtElement);
      if (!isNullOrUndefined(this.closeIcon)) {
        detach(this.closeIcon);
      }
      _super.prototype.destroy.call(this);
    };
    __decorate3([
      Property(null)
    ], Message2.prototype, "content", void 0);
    __decorate3([
      Property("")
    ], Message2.prototype, "cssClass", void 0);
    __decorate3([
      Property(true)
    ], Message2.prototype, "showIcon", void 0);
    __decorate3([
      Property(false)
    ], Message2.prototype, "showCloseIcon", void 0);
    __decorate3([
      Property("Normal")
    ], Message2.prototype, "severity", void 0);
    __decorate3([
      Property("Text")
    ], Message2.prototype, "variant", void 0);
    __decorate3([
      Property(true)
    ], Message2.prototype, "visible", void 0);
    __decorate3([
      Event()
    ], Message2.prototype, "created", void 0);
    __decorate3([
      Event()
    ], Message2.prototype, "destroyed", void 0);
    __decorate3([
      Event()
    ], Message2.prototype, "closed", void 0);
    Message2 = __decorate3([
      NotifyPropertyChanges
    ], Message2);
    return Message2;
  }(Component)
);

// node_modules/@syncfusion/ej2-notifications/src/skeleton/skeleton.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var cssClassName = {
  TEXTSHAPE: "e-skeleton-text",
  CIRCLESHAPE: "e-skeleton-circle",
  SQUARESHAPE: "e-skeleton-square",
  RECTANGLESHAPE: "e-skeleton-rectangle",
  WAVEEFFECT: "e-shimmer-wave",
  PULSEEFFECT: "e-shimmer-pulse",
  FADEEFFECT: "e-shimmer-fade",
  VISIBLENONE: "e-visible-none"
};
var SkeletonType;
(function(SkeletonType2) {
  SkeletonType2["Text"] = "Text";
  SkeletonType2["Circle"] = "Circle";
  SkeletonType2["Square"] = "Square";
  SkeletonType2["Rectangle"] = "Rectangle";
})(SkeletonType || (SkeletonType = {}));
var ShimmerEffect;
(function(ShimmerEffect2) {
  ShimmerEffect2["Wave"] = "Wave";
  ShimmerEffect2["Fade"] = "Fade";
  ShimmerEffect2["Pulse"] = "Pulse";
  ShimmerEffect2["None"] = "None";
})(ShimmerEffect || (ShimmerEffect = {}));
var Skeleton = (
  /** @class */
  function(_super) {
    __extends4(Skeleton2, _super);
    function Skeleton2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Skeleton2.prototype.getModuleName = function() {
      return "skeleton";
    };
    Skeleton2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Skeleton2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.updateCssClass();
      attributes(this.element, { role: "alert", "aria-busy": "true", "aria-live": "polite", "aria-label": this.label });
    };
    Skeleton2.prototype.render = function() {
      this.initialize();
    };
    Skeleton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
          case "height":
            this.updateDimension();
            break;
          case "shape":
            this.updateShape();
            break;
          case "shimmerEffect":
            this.updateEffect();
            break;
          case "visible":
            this.updateVisibility();
            break;
          case "label":
            this.element.setAttribute("aria-label", this.label);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            this.updateCssClass();
            break;
        }
      }
    };
    Skeleton2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      var attrs = ["role", "aria-live", "aria-busy", "aria-label"];
      var cssClass2 = [];
      if (this.cssClass) {
        cssClass2 = cssClass2.concat(this.cssClass.split(" "));
      }
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[parseInt(i.toString(), 10)]);
      }
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-skeleton-[^\s]+)/g));
      cssClass2 = cssClass2.concat(this.element.classList.value.match(/(e-shimmer-[^\s]+)/g));
      removeClass([this.element], cssClass2);
    };
    Skeleton2.prototype.initialize = function() {
      this.updateShape();
      this.updateEffect();
      this.updateVisibility();
    };
    Skeleton2.prototype.updateShape = function() {
      var shapeCss = cssClassName[this.shape.toUpperCase() + "SHAPE"];
      var removeCss = this.element.classList.value.match(/(e-skeleton-[^\s]+)/g);
      this.updateDimension();
      if (removeCss) {
        removeClass([this.element], removeCss);
      }
      addClass([this.element], [shapeCss]);
    };
    Skeleton2.prototype.updateDimension = function() {
      var width = !this.width && ["Text", "Rectangle"].indexOf(this.shape) > -1 ? "100%" : formatUnit(this.width);
      var height = ["Circle", "Square"].indexOf(this.shape) > -1 ? width : formatUnit(this.height);
      this.element.style.width = width;
      this.element.style.height = height;
    };
    Skeleton2.prototype.updateEffect = function() {
      var removeCss = this.element.classList.value.match(/(e-shimmer-[^\s]+)/g);
      if (removeCss) {
        removeClass([this.element], removeCss);
      }
      addClass([this.element], [cssClassName[this.shimmerEffect.toUpperCase() + "EFFECT"]]);
    };
    Skeleton2.prototype.updateVisibility = function() {
      this.element.classList[this.visible ? "remove" : "add"](cssClassName.VISIBLENONE);
    };
    Skeleton2.prototype.updateCssClass = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    __decorate4([
      Property("")
    ], Skeleton2.prototype, "width", void 0);
    __decorate4([
      Property("")
    ], Skeleton2.prototype, "height", void 0);
    __decorate4([
      Property(true)
    ], Skeleton2.prototype, "visible", void 0);
    __decorate4([
      Property("Text")
    ], Skeleton2.prototype, "shape", void 0);
    __decorate4([
      Property("Wave")
    ], Skeleton2.prototype, "shimmerEffect", void 0);
    __decorate4([
      Property("Loading...")
    ], Skeleton2.prototype, "label", void 0);
    __decorate4([
      Property("")
    ], Skeleton2.prototype, "cssClass", void 0);
    Skeleton2 = __decorate4([
      NotifyPropertyChanges
    ], Skeleton2);
    return Skeleton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var dropDownListClasses = {
  root: "e-dropdownlist",
  hover: dropDownBaseClasses.hover,
  selected: dropDownBaseClasses.selected,
  rtl: dropDownBaseClasses.rtl,
  li: dropDownBaseClasses.li,
  disable: dropDownBaseClasses.disabled,
  base: dropDownBaseClasses.root,
  focus: dropDownBaseClasses.focus,
  content: dropDownBaseClasses.content,
  input: "e-input-group",
  inputFocus: "e-input-focus",
  icon: "e-input-group-icon e-ddl-icon",
  iconAnimation: "e-icon-anim",
  value: "e-input-value",
  device: "e-ddl-device",
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  mobileFilter: "e-ddl-device-filter",
  footer: "e-ddl-footer",
  header: "e-ddl-header",
  clearIcon: "e-clear-icon",
  clearIconHide: "e-clear-icon-hide",
  popupFullScreen: "e-popup-full-page",
  disableIcon: "e-ddl-disable-icon",
  hiddenElement: "e-ddl-hidden",
  virtualList: "e-list-item e-virtual-list"
};
var inputObject = {
  container: null,
  buttons: []
};
var DropDownList = (
  /** @class */
  function(_super) {
    __extends5(DropDownList2, _super);
    function DropDownList2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.skeletonCount = 32;
      _this.isListSearched = false;
      _this.preventChange = false;
      _this.isAngular = false;
      _this.virtualListHeight = 0;
      _this.isVirtualScrolling = false;
      _this.isPreventScrollAction = false;
      _this.scrollPreStartIndex = 0;
      _this.isScrollActionTriggered = false;
      _this.previousStartIndex = 0;
      _this.isMouseScrollAction = false;
      _this.isKeyBoardAction = false;
      _this.isUpwardScrolling = false;
      _this.startIndex = 0;
      _this.currentPageNumber = 0;
      _this.pageCount = 0;
      _this.isPreventKeyAction = false;
      _this.generatedDataObject = {};
      _this.incrementalQueryString = "";
      _this.incrementalEndIndex = 0;
      _this.incrementalStartIndex = 0;
      _this.incrementalPreQueryString = "";
      _this.isTouched = false;
      _this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.selectedValueInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      _this.IsScrollerAtEnd = function() {
        return this.list && this.list.scrollTop + this.list.clientHeight >= this.list.scrollHeight;
      };
      return _this;
    }
    DropDownList2.prototype.preRender = function() {
      this.valueTempElement = null;
      this.element.style.opacity = "0";
      this.initializeData();
      _super.prototype.preRender.call(this);
      this.activeIndex = this.index;
      this.queryString = "";
    };
    DropDownList2.prototype.initializeData = function() {
      this.isPopupOpen = false;
      this.isDocumentClick = false;
      this.isInteracted = false;
      this.isFilterFocus = false;
      this.beforePopupOpen = false;
      this.initial = true;
      this.initialRemoteRender = false;
      this.isNotSearchList = false;
      this.isTyped = false;
      this.isSelected = false;
      this.preventFocus = false;
      this.preventAutoFill = false;
      this.isValidKey = false;
      this.typedString = "";
      this.isEscapeKey = false;
      this.isPreventBlur = false;
      this.isTabKey = false;
      this.actionCompleteData = { isUpdated: false };
      this.actionData = { isUpdated: false };
      this.prevSelectPoints = {};
      this.isSelectCustom = false;
      this.isDropDownClick = false;
      this.preventAltUp = false;
      this.isCustomFilter = false;
      this.isSecondClick = false;
      this.previousValue = null;
      this.keyConfigure = {
        tab: "tab",
        enter: "13",
        escape: "27",
        end: "35",
        home: "36",
        down: "40",
        up: "38",
        pageUp: "33",
        pageDown: "34",
        open: "alt+40",
        close: "shift+tab",
        hide: "alt+38",
        space: "32"
      };
      this.viewPortInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: this.itemCount
      };
    };
    DropDownList2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    DropDownList2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({ args: [this], member: "VirtualScroll" });
      }
      return modules;
    };
    DropDownList2.prototype.renderList = function(e, isEmptyData) {
      _super.prototype.render.call(this, e, isEmptyData);
      if (!(this.dataSource instanceof DataManager)) {
        this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      this.unWireListEvents();
      this.wireListEvents();
    };
    DropDownList2.prototype.floatLabelChange = function() {
      if (this.getModuleName() === "dropdownlist" && this.floatLabelType === "Auto") {
        var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
        if (this.inputElement.value !== "" || this.isInteracted) {
          classList(floatElement, ["e-label-top"], ["e-label-bottom"]);
        } else {
          classList(floatElement, ["e-label-bottom"], ["e-label-top"]);
        }
      }
    };
    DropDownList2.prototype.resetHandler = function(e) {
      e.preventDefault();
      this.clearAll(e);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.virtualListInfo = null;
        this.previousStartIndex = 0;
        this.previousEndIndex = 0;
      }
    };
    DropDownList2.prototype.resetFocusElement = function() {
      this.removeHover();
      this.removeSelection();
      this.removeFocus();
      this.list.scrollTop = 0;
      if (this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.ulElement)) {
        var li = this.ulElement.querySelector("." + dropDownListClasses.li);
        if (this.enableVirtualization) {
          li = this.liCollections[this.skeletonCount];
        }
        if (li) {
          li.classList.add(dropDownListClasses.focus);
        }
      }
    };
    DropDownList2.prototype.clearAll = function(e, properties) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
        this.isActive = true;
        this.resetSelection(properties);
      }
      var dataItem = this.getItemData();
      if (this.previousValue === dataItem.value) {
        return;
      }
      this.onChangeEvent(e);
      this.checkAndResetCache();
      if (this.enableVirtualization) {
        this.updateInitialData();
      }
    };
    DropDownList2.prototype.resetSelection = function(properties) {
      if (this.list) {
        if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
          this.selectedLI = null;
          this.actionCompleteData.isUpdated = false;
          this.actionCompleteData.ulElement = null;
          this.actionCompleteData.list = null;
          this.resetList(properties.dataSource);
        } else {
          if (this.allowFiltering && this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) && this.actionCompleteData.list.length > 0) {
            this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
          }
          this.resetFocusElement();
        }
      }
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.inputElement)) {
        this.inputElement.value = "";
      }
      this.value = null;
      this.itemData = null;
      this.text = null;
      this.index = null;
      this.activeIndex = null;
      this.item = null;
      this.queryString = "";
      if (this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
        this.valueTempElement = null;
      }
      this.setSelection(null, null);
      this.isSelectCustom = false;
      this.updateIconState();
      this.cloneElements();
    };
    DropDownList2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
            if (updatedClassValue !== "") {
              addClass([this.inputWrapper.container], updatedClassValue.split(" "));
            }
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.enabled = false;
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.readonly = true;
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.container.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "aria-label") {
            if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
              this.inputElement.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            } else if (this.getModuleName() === "dropdownlist") {
              this.inputWrapper.container.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            }
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "role",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
              defaultAttr.push("tabindex");
            }
            if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf("data") === 0) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputElement);
              } else {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
      if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
        this.inputWrapper.container.removeAttribute("tabindex");
      }
    };
    DropDownList2.prototype.getAriaAttributes = function() {
      return {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false",
        "aria-live": "polite",
        "aria-labelledby": this.hiddenElement.id
      };
    };
    DropDownList2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    DropDownList2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "false");
        this.targetElement().setAttribute("tabindex", this.tabIndex);
      } else {
        this.hidePopup();
        addClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "true");
        this.targetElement().tabIndex = -1;
      }
    };
    DropDownList2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    DropDownList2.prototype.getLocaleName = function() {
      return "drop-down-list";
    };
    DropDownList2.prototype.preventTabIndex = function(element) {
      if (this.getModuleName() === "dropdownlist") {
        element.tabIndex = -1;
      }
    };
    DropDownList2.prototype.targetElement = function() {
      return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;
    };
    DropDownList2.prototype.getNgDirective = function() {
      return "EJS-DROPDOWNLIST";
    };
    DropDownList2.prototype.getElementByText = function(text) {
      return this.getElementByValue(this.getValueByText(text));
    };
    DropDownList2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    DropDownList2.prototype.initValue = function() {
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.itemCount;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initialRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    DropDownList2.prototype.updateValues = function() {
      this.selectedValueInfo = this.viewPortInfo;
      if (!isNullOrUndefined(this.value)) {
        this.setSelection(this.getElementByValue(this.value), null);
      } else if (this.text && isNullOrUndefined(this.value)) {
        var element = this.getElementByText(this.text);
        if (isNullOrUndefined(element)) {
          this.setProperties({ text: null });
          return;
        } else {
          this.setSelection(element, null);
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DropDownList2.prototype.onBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      var target = e.relatedTarget;
      var currentTarget = e.target;
      var isPreventBlur = this.isPreventBlur;
      this.isPreventBlur = false;
      if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {
        if (this.getModuleName() === "dropdownlist" && this.allowFiltering && this.isPopupOpen) {
          this.filterInput.focus();
        } else {
          this.targetElement().focus();
        }
        return;
      }
      if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
        if (!this.beforePopupOpen) {
          this.isDocumentClick = false;
        }
        return;
      }
      if (this.getModuleName() === "dropdownlist" && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === "dropdownlist" && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== "dropdownlist" && !this.inputWrapper.container.contains(target) || this.isTabKey) {
        this.isDocumentClick = this.isPopupOpen ? true : false;
        this.focusOutAction(e);
        this.isTabKey = false;
      }
      if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
        this.isActive = false;
        this.beforePopupOpen = false;
      }
    };
    DropDownList2.prototype.focusOutAction = function(e) {
      this.isInteracted = false;
      this.focusOut(e);
      this.onFocusOut(e);
    };
    DropDownList2.prototype.onFocusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isSelected) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      this.floatLabelChange();
      this.dispatchEvent(this.hiddenElement, "change");
      if (this.getModuleName() === "dropdownlist" && this.element.tagName !== "INPUT") {
        this.dispatchEvent(this.inputElement, "blur");
      }
      if (this.inputWrapper.clearButton) {
        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
      }
      this.trigger("blur");
    };
    DropDownList2.prototype.onFocus = function(e) {
      if (!this.isInteracted) {
        this.isInteracted = true;
        var args = { isInteracted: e ? true : false, event: e };
        this.trigger("focus", args);
      }
      this.updateIconState();
    };
    DropDownList2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute("value");
        this.text = val;
      }
    };
    DropDownList2.prototype.wireEvent = function() {
      EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      this.bindCommonEvent();
    };
    DropDownList2.prototype.bindCommonEvent = function() {
      EventHandler.add(this.targetElement(), "blur", this.onBlurHandler, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.mobileKeyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      }
      this.bindClearEvent();
    };
    DropDownList2.prototype.windowResize = function() {
      if (this.isPopupOpen) {
        this.popupObj.refreshPosition(this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DropDownList2.prototype.unBindCommonEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {
        EventHandler.remove(this.targetElement(), "blur", this.onBlurHandler);
      }
      var formElement = this.inputElement && closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      if (!Browser.isDevice) {
        this.keyboardModule.destroy();
      }
      if (this.showClearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
      }
    };
    DropDownList2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    DropDownList2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(this.list, "click", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    DropDownList2.prototype.onSearch = function(e) {
      if (e.charCode !== 32 && e.charCode !== 13) {
        if (this.list === void 0) {
          this.renderList();
        }
        this.searchKeyEvent = e;
        this.onServerIncrementalSearch(e);
      }
    };
    DropDownList2.prototype.onServerIncrementalSearch = function(e) {
      if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector("li")) && this.enabled && !this.readonly) {
        this.incrementalSearch(e);
      }
    };
    DropDownList2.prototype.onMouseClick = function(e) {
      var target = e.target;
      this.keyboardEvent = null;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li)) {
        return;
      }
      this.setSelection(li, e);
      if (Browser.isDevice && this.isFilterLayout()) {
        history.back();
      } else {
        var delay = 100;
        this.closePopup(delay, e);
      }
    };
    DropDownList2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    DropDownList2.prototype.setHover = function(li) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    DropDownList2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    DropDownList2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    DropDownList2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    DropDownList2.prototype.updateIncrementalInfo = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.isIncrementalRequest = true;
      this.resetList(this.dataSource, this.fields, this.query);
      this.isIncrementalRequest = false;
    };
    DropDownList2.prototype.updateIncrementalView = function(startIndex, endIndex) {
      this.viewPortInfo.startIndex = startIndex;
      this.viewPortInfo.endIndex = endIndex;
      this.updateVirtualItemIndex();
      this.resetList(this.dataSource, this.fields, this.query);
      this.UpdateSkeleton();
      this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      this.ulElement = this.list.querySelector("ul");
    };
    DropDownList2.prototype.updateIncrementalItemIndex = function(startIndex, endIndex) {
      this.incrementalStartIndex = startIndex;
      this.incrementalEndIndex = endIndex;
    };
    DropDownList2.prototype.incrementalSearch = function(e) {
      if (this.liCollections.length > 0) {
        if (this.enableVirtualization) {
          var updatingincrementalindex = false;
          var queryStringUpdated = false;
          var activeElement = this.ulElement.getElementsByClassName("e-active")[0];
          var currentValue = activeElement ? activeElement.textContent : null;
          if (this.incrementalQueryString == "") {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else if (String.fromCharCode(e.charCode).toLocaleLowerCase() == this.incrementalPreQueryString.toLocaleLowerCase()) {
            queryStringUpdated = true;
          } else {
            this.incrementalQueryString = String.fromCharCode(e.charCode);
          }
          if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex == 0) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (this.incrementalEndIndex == 0) {
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
            } else {
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          var li = incrementalSearch(e.charCode, this.incrementalLiCollections, this.activeIndex, true, this.element.id, queryStringUpdated, currentValue, true);
          while (isNullOrUndefined(li) && this.incrementalEndIndex < this.totalItemCount) {
            this.updateIncrementalItemIndex(this.incrementalEndIndex, this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
            if (!isNullOrUndefined(li)) {
              break;
            }
            if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
              this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
              break;
            }
          }
          if (isNullOrUndefined(li) && this.incrementalEndIndex >= this.totalItemCount) {
            this.updateIncrementalItemIndex(0, 100 > this.totalItemCount ? this.totalItemCount : 100);
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            li = incrementalSearch(e.charCode, this.incrementalLiCollections, 0, true, this.element.id, queryStringUpdated, currentValue, true, true);
          }
          var index = li && this.getIndexByValue(li.getAttribute("data-value"));
          if (!index) {
            for (var i = 0; i < this.incrementalLiCollections.length; i++) {
              if (!isNullOrUndefined(li) && !isNullOrUndefined(li.getAttribute("data-value")) && this.incrementalLiCollections[i].getAttribute("data-value") === li.getAttribute("data-value").toString()) {
                index = i;
                index = this.incrementalStartIndex + index;
                break;
              }
            }
          } else {
            index = index - this.skeletonCount;
          }
          if (index) {
            if (!(this.viewPortInfo.startIndex >= index) || !(index >= this.viewPortInfo.endIndex)) {
              var startIndex = index - (this.itemCount / 2 - 2) > 0 ? index - (this.itemCount / 2 - 2) : 0;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
          }
          if (!isNullOrUndefined(li)) {
            var index_1 = this.getIndexByValue(li.getAttribute("data-value")) - this.skeletonCount;
            if (index_1 > this.itemCount / 2) {
              var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
            li = this.getElementByValue(li.getAttribute("data-value"));
            this.setSelection(li, e);
            this.setScrollPosition();
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            if (this.enableVirtualization && !this.fields.groupBy) {
              var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
              this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
            }
            this.incrementalPreQueryString = this.incrementalQueryString;
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
        } else {
          var li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);
          if (!isNullOrUndefined(li)) {
            this.setSelection(li, e);
            this.setScrollPosition();
          }
        }
      }
    };
    DropDownList2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        this.spinnerElement.innerHTML = "";
        this.spinnerElement = null;
      }
    };
    DropDownList2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    DropDownList2.prototype.keyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.keyboardEvent = e;
      if (this.isPreventKeyAction && this.enableVirtualization) {
        e.preventDefault();
      }
      var preventAction = e.action === "pageUp" || e.action === "pageDown";
      var preventHomeEnd = this.getModuleName() !== "dropdownlist" && (e.action === "home" || e.action === "end");
      this.isEscapeKey = e.action === "escape";
      this.isTabKey = !this.isPopupOpen && e.action === "tab";
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        var isTabAction = e.action === "tab" || e.action === "close";
        if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== "escape") {
          this.searchKeyEvent = e;
          this.renderList(e);
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (isTabAction && this.getModuleName() !== "autocomplete" && this.isPopupOpen || e.action === "escape") {
          e.preventDefault();
        }
        this.isSelected = e.action === "escape" ? false : this.isSelected;
        this.isTyped = isNavigation || e.action === "escape" ? false : this.isTyped;
        switch (e.action) {
          case "down":
          case "up":
            this.updateUpDownAction(e);
            break;
          case "pageUp":
            this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
            e.preventDefault();
            break;
          case "pageDown":
            this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
            e.preventDefault();
            break;
          case "home":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "end":
            this.isMouseScrollAction = true;
            this.updateHomeEndAction(e);
            break;
          case "space":
            if (this.getModuleName() === "dropdownlist") {
              if (!this.beforePopupOpen) {
                this.showPopup();
                e.preventDefault();
              }
            }
            break;
          case "open":
            this.showPopup(e);
            break;
          case "hide":
            this.preventAltUp = this.isPopupOpen;
            this.hidePopup(e);
            this.focusDropDown(e);
            break;
          case "enter":
            this.selectCurrentItem(e);
            break;
          case "tab":
            this.selectCurrentValueOnTab(e);
            break;
          case "escape":
          case "close":
            if (this.isPopupOpen) {
              this.hidePopup(e);
              this.focusDropDown(e);
            }
            break;
        }
      }
    };
    DropDownList2.prototype.updateUpDownAction = function(e, isVirtualKeyAction) {
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value_1 = this.getItemData().value;
        if (isNullOrUndefined(value_1)) {
          value_1 = "null";
        }
        var filterIndex = this.getIndexByValue(value_1);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      var focusEle = this.list.querySelector("." + dropDownListClasses.focus);
      if (this.isSelectFocusItem(focusEle) && !isVirtualKeyAction) {
        this.setSelection(focusEle, e);
        if (this.enableVirtualization && !this.fields.groupBy && this.getModuleName() !== "combobox") {
          var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
          this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * this.selectedLI.offsetHeight;
        }
      } else if (!isNullOrUndefined(this.liCollections)) {
        var virtualIndex = this.activeIndex;
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        index = isVirtualKeyAction ? virtualIndex : index;
        var startIndex = 0;
        if (this.getModuleName() === "autocomplete") {
          startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
          index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        }
        var nextItem = void 0;
        if (this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && this.isPopupOpen) {
          if (!this.enableVirtualization) {
            nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
          } else {
            if (!isVirtualKeyAction) {
              nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[this.skeletonCount] : this.liCollections[index];
              nextItem = !isNullOrUndefined(nextItem) && !nextItem.classList.contains("e-virtual-list") ? nextItem : null;
            } else {
              if (this.getModuleName() === "autocomplete") {
                var value = this.getFormattedValue(this.selectedLI.getAttribute("data-value"));
                nextItem = this.getElementByValue(value);
              } else {
                nextItem = this.getElementByValue(this.getItemData().value);
              }
            }
          }
        }
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        } else if (this.enableVirtualization && !this.isPopupOpen && this.getModuleName() !== "autocomplete" && (this.viewPortInfo.endIndex !== this.totalItemCount && e.action === "down" || this.viewPortInfo.startIndex !== 0 && e.action === "up")) {
          if (e.action === "down") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex + this.itemCount < this.totalItemCount - this.itemCount ? this.viewPortInfo.startIndex + this.itemCount : this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value_2 = this.liCollections[0].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[0].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value_2);
            if (selectedData) {
              this.itemData = selectedData;
            }
          } else if (e.action === "up") {
            this.viewPortInfo.startIndex = this.viewPortInfo.startIndex - this.itemCount > 0 ? this.viewPortInfo.startIndex - this.itemCount : 0;
            this.viewPortInfo.endIndex = this.viewPortInfo.startIndex + this.itemCount;
            this.updateVirtualItemIndex();
            this.isCustomFilter = this.getModuleName() === "combobox" ? true : this.isCustomFilter;
            this.resetList(this.dataSource, this.fields, this.query);
            this.isCustomFilter = this.getModuleName() === "combobox" ? false : this.isCustomFilter;
            var value_3 = this.liCollections[this.liCollections.length - 1].getAttribute("data-value") !== "null" ? this.getFormattedValue(this.liCollections[this.liCollections.length - 1].getAttribute("data-value")) : null;
            var selectedData = this.getDataByValue(value_3);
            if (selectedData) {
              this.itemData = selectedData;
            }
          }
          this.UpdateSkeleton();
          this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
          this.ulElement = this.list.querySelector("ul");
          this.handleVirtualKeyboardActions(e, this.pageCount);
        }
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var value_4 = this.getItemData().value;
        var filterIndex = this.getIndexByValueFilter(value_4);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        }
      }
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
      e.preventDefault();
    };
    DropDownList2.prototype.updateVirtualItemIndex = function() {
      this.virtualItemStartIndex = this.viewPortInfo.startIndex;
      this.virtualItemEndIndex = this.viewPortInfo.endIndex;
      this.virtualListInfo = this.viewPortInfo;
    };
    DropDownList2.prototype.updateHomeEndAction = function(e, isVirtualKeyAction) {
      if (this.getModuleName() === "dropdownlist") {
        var findLi = 0;
        if (e.action === "home") {
          findLi = 0;
          if (this.enableVirtualization && this.isPopupOpen) {
            findLi = this.skeletonCount;
          } else if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.startIndex !== 0) {
            this.viewPortInfo.startIndex = 0;
            this.viewPortInfo.endIndex = this.itemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
        } else {
          if (this.enableVirtualization && !this.isPopupOpen && this.viewPortInfo.endIndex !== this.totalItemCount) {
            this.viewPortInfo.startIndex = this.totalItemCount - this.itemCount;
            this.viewPortInfo.endIndex = this.totalItemCount;
            this.updateVirtualItemIndex();
            this.resetList(this.dataSource, this.fields, this.query);
          }
          findLi = this.getItems().length - 1;
        }
        e.preventDefault();
        if (this.activeIndex === findLi) {
          if (isVirtualKeyAction) {
            this.setSelection(this.liCollections[findLi], e);
          }
          return;
        }
        this.setSelection(this.liCollections[findLi], e);
      }
    };
    DropDownList2.prototype.selectCurrentValueOnTab = function(e) {
      if (this.getModuleName() === "autocomplete") {
        this.selectCurrentItem(e);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          this.focusDropDown(e);
        }
      }
    };
    DropDownList2.prototype.mobileKeyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isEditTextBox() && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        if (this.list === void 0 && !this.isRequested) {
          this.searchKeyEvent = e;
          this.renderList();
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (e.action === "enter") {
          this.selectCurrentItem(e);
        }
      }
    };
    DropDownList2.prototype.handleVirtualKeyboardActions = function(e, pageCount) {
      switch (e.action) {
        case "down":
        case "up":
          if (this.itemData != null || this.getModuleName() === "autocomplete") {
            this.updateUpDownAction(e, true);
          }
          break;
        case "pageUp":
          var count = pageCount * 2 - 4;
          this.activeIndex = Math.round(count);
          this.pageUpSelection(this.activeIndex - this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "pageDown":
          this.activeIndex = 1;
          this.pageDownSelection(this.activeIndex + this.getPageCount(), e, true);
          e.preventDefault();
          break;
        case "home":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
        case "end":
          this.isMouseScrollAction = true;
          this.updateHomeEndAction(e, true);
          break;
      }
      this.keyboardEvent = null;
    };
    DropDownList2.prototype.selectCurrentItem = function(e) {
      if (this.isPopupOpen) {
        var li = this.list.querySelector("." + dropDownListClasses.focus);
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
        this.hidePopup(e);
        this.focusDropDown(e);
      } else {
        this.showPopup();
      }
    };
    DropDownList2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    DropDownList2.prototype.pageUpSelection = function(steps, event2, isVirtualKeyAction) {
      var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
      if (this.enableVirtualization && this.activeIndex == null || isVirtualKeyAction) {
        previousItem = steps >= 0 ? this.liCollections[steps + this.skeletonCount + 1] : this.liCollections[0];
      }
      if (!isNullOrUndefined(previousItem) && previousItem.classList.contains("e-virtual-list")) {
        previousItem = this.liCollections[this.skeletonCount];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
    };
    DropDownList2.prototype.PageUpDownSelection = function(previousItem, event2) {
      if (this.enableVirtualization) {
        if (!isNullOrUndefined(previousItem) && (this.getModuleName() !== "autocomplete" && !previousItem.classList.contains("e-active") || this.getModuleName() === "autocomplete" && !previousItem.classList.contains("e-item-focus"))) {
          this.setSelection(previousItem, event2);
        }
      } else {
        this.setSelection(previousItem, event2);
      }
    };
    DropDownList2.prototype.pageDownSelection = function(steps, event2, isVirtualKeyAction) {
      var list = this.getItems();
      var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
      if (this.enableVirtualization && this.activeIndex == null || isVirtualKeyAction) {
        previousItem = steps <= list.length ? this.liCollections[steps + this.skeletonCount - 1] : this.liCollections[list.length - 1];
      }
      this.PageUpDownSelection(previousItem, event2);
      if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
        } else if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
          attributes(this.filterInput, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
        }
      }
    };
    DropDownList2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick);
        EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch);
        EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn);
        EventHandler.remove(window, "resize", this.windowResize);
      }
      this.unBindCommonEvent();
    };
    DropDownList2.prototype.unWireListEvents = function() {
      if (this.list) {
        EventHandler.remove(this.list, "click", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    DropDownList2.prototype.checkSelector = function(id) {
      return '[id="' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, "\\$1") + '"]';
    };
    DropDownList2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {
        if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
          this.isDocumentClick = true;
          var isActive = this.isRequested;
          if (this.getModuleName() === "combobox" && this.isTyped) {
            this.isInteracted = false;
          }
          this.hidePopup(e);
          this.isInteracted = false;
          if (!isActive) {
            this.onFocusOut(e);
            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
          }
        }
      } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === "combobox" && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {
        this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
        e.preventDefault();
      }
    };
    DropDownList2.prototype.activeStateChange = function() {
      if (this.isDocumentClick) {
        this.hidePopup();
        this.onFocusOut();
        this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
      }
    };
    DropDownList2.prototype.focusDropDown = function(e) {
      if (!this.initial && this.isFilterLayout()) {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.dropDownClick = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      this.keyboardEvent = null;
      if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
        return;
      }
      var target = e.target;
      if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== "combobox") {
        e.preventDefault();
      }
      if (!this.readonly) {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          if (this.isFilterLayout()) {
            this.focusDropDown(e);
          }
        } else {
          this.focusIn(e);
          this.floatLabelChange();
          this.queryString = this.inputElement.value.trim() === "" ? null : this.inputElement.value;
          this.isDropDownClick = true;
          this.showPopup(e);
        }
        var proxy_1 = this;
        var duration = this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;
        if (!this.isSecondClick) {
          setTimeout(function() {
            proxy_1.cloneElements();
            proxy_1.isSecondClick = true;
          }, duration);
        }
      } else {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.cloneElements = function() {
      if (this.list) {
        var ulElement = this.list.querySelector("ul");
        if (ulElement) {
          ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
          this.actionCompleteData.ulElement = ulElement;
        }
      }
    };
    DropDownList2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = li.getAttribute("data-value") !== "null" ? this.getFormattedValue(li.getAttribute("data-value")) : null;
      var selectedData = this.getDataByValue(value);
      if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
          } else {
            _this.selectEventCallback(li, e, preventSelect, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, e, preventSelect, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    DropDownList2.prototype.selectEventCallback = function(li, e, preventSelect, selectedData, value) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (this.itemData != selectedData) {
        this.previousValue = !isNullOrUndefined(this.itemData) ? typeof this.itemData == "object" ? this.checkFieldValue(this.itemData, this.fields.value.split(".")) : this.itemData : null;
      }
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      li.setAttribute("aria-selected", "true");
      if (isNullOrUndefined(value)) {
        value = "null";
      }
      if (this.allowFiltering && !this.enableVirtualization && this.getModuleName() !== "autocomplete") {
        var filterIndex = this.getIndexByValueFilter(value);
        if (!isNullOrUndefined(filterIndex)) {
          this.activeIndex = filterIndex;
        } else {
          this.activeIndex = this.getIndexByValue(value);
        }
      } else {
        this.activeIndex = this.getIndexByValue(value);
      }
    };
    DropDownList2.prototype.activeItem = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
        this.removeSelection();
        li.classList.add(dropDownBaseClasses.selected);
        this.removeHover();
        li.setAttribute("aria-selected", "true");
      }
    };
    DropDownList2.prototype.setValue = function(e) {
      var dataItem = this.getItemData();
      if (dataItem.value === null) {
        Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      if (this.valueTemplate && this.itemData !== null) {
        this.setValueTemplate();
      } else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
      }
      if (!isNullOrUndefined(dataItem.value) && !this.enableVirtualization && this.allowFiltering) {
        this.activeIndex = this.getIndexByValueFilter(dataItem.value);
      }
      var clearIcon2 = dropDownListClasses.clearIcon;
      var isFilterElement = this.isFiltering() && this.filterInput && this.getModuleName() === "combobox";
      var clearElement = isFilterElement && this.filterInput.parentElement.querySelector("." + clearIcon2);
      if (this.isFiltering() && clearElement) {
        clearElement.style.removeProperty("visibility");
      }
      if (this.previousValue === dataItem.value) {
        this.isSelected = false;
        return true;
      } else {
        this.isSelected = !this.initial ? true : false;
        this.isSelectCustom = false;
        if (this.getModuleName() === "dropdownlist") {
          this.updateIconState();
        }
        return false;
      }
    };
    DropDownList2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
        if (this.enableVirtualization) {
          var fields = this.fields.value ? this.fields.value : "";
          if (this.dataSource instanceof DataManager && this.virtualGroupDataSource) {
            var getItem = new DataManager(this.virtualGroupDataSource).executeLocal(new Query().where(new Predicate(fields, "equal", this.value)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": dataItem.value });
              }
            }
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", this.value)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              var dataItem = this.getItemData();
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": dataItem.value });
              }
            }
          }
        }
      }
    };
    DropDownList2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.setValue(e)) {
        return;
      }
      if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== "keydown" || e.type === "keydown" && e.action === "enter")) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== "click")) {
        this.setScrollPosition(e);
      }
      if (Browser.info.name !== "mozilla") {
        if (this.targetElement()) {
          attributes(this.targetElement(), { "aria-describedby": this.inputElement.id !== "" ? this.inputElement.id : this.element.id });
          this.targetElement().removeAttribute("aria-live");
        }
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      } else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
      }
    };
    DropDownList2.prototype.dropdownCompiler = function(dropdownTemplate) {
      var checkTemplate = false;
      if (typeof dropdownTemplate !== "function" && dropdownTemplate) {
        try {
          checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownList2.prototype.setValueTemplate = function() {
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["valueTemplate"]);
        if (this.valueTempElement) {
          detach(this.valueTempElement);
          this.inputElement.style.display = "block";
          this.valueTempElement = null;
        }
      }
      if (!this.valueTempElement) {
        this.valueTempElement = this.createElement("span", { className: dropDownListClasses.value });
        this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
        this.inputElement.style.display = "none";
      }
      if (!this.isReact) {
        this.valueTempElement.innerHTML = "";
      }
      var valuecheck = this.dropdownCompiler(this.valueTemplate);
      if (typeof this.valueTemplate !== "function" && valuecheck) {
        compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());
      } else {
        compiledString = compile(this.valueTemplate);
      }
      var valueCompTemp = compiledString(this.itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);
      if (valueCompTemp && valueCompTemp.length > 0) {
        append(valueCompTemp, this.valueTempElement);
      }
      this.renderReactTemplates();
    };
    DropDownList2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    DropDownList2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    DropDownList2.prototype.onChangeEvent = function(eve) {
      var dataItem = this.getItemData();
      var index = this.isSelectCustom ? null : this.activeIndex;
      this.setProperties({ "index": index, "text": dataItem.text, "value": dataItem.value }, true);
      this.detachChangeEvent(eve);
    };
    DropDownList2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    DropDownList2.prototype.detachChangeEvent = function(eve) {
      this.isSelected = false;
      this.previousValue = this.value;
      this.activeIndex = this.index;
      this.typedString = !isNullOrUndefined(this.text) ? this.text : "";
      if (!this.initial) {
        var items = this.detachChanges(this.itemData);
        var preItems = void 0;
        if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
          preItems = Object.defineProperties({}, {
            value: {
              value: this.previousItemData,
              enumerable: true
            },
            text: {
              value: this.previousItemData,
              enumerable: true
            }
          });
        } else {
          preItems = this.previousItemData;
        }
        this.setHiddenValue();
        var eventArgs = {
          e: eve,
          item: this.item,
          itemData: items,
          previousItem: this.previousSelectedLI,
          previousItemData: preItems,
          isInteracted: eve ? true : false,
          value: this.value,
          element: this.element,
          event: eve
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
      }
      if ((isNullOrUndefined(this.value) || this.value === "") && this.floatLabelType !== "Always") {
        removeClass([this.inputWrapper.container], "e-valid-input");
      }
    };
    DropDownList2.prototype.setHiddenValue = function() {
      if (!isNullOrUndefined(this.value)) {
        if (this.hiddenElement.querySelector("option")) {
          var selectedElement = this.hiddenElement.querySelector("option");
          selectedElement.textContent = this.text;
          selectedElement.setAttribute("value", this.value.toString());
        } else {
          if (!isNullOrUndefined(this.hiddenElement)) {
            this.hiddenElement.innerHTML = "<option selected>" + this.text + "</option>";
            var selectedElement = this.hiddenElement.querySelector("option");
            selectedElement.setAttribute("value", this.value.toString());
          }
        }
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownList2.prototype.onFilterUp = function(e) {
      if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {
        this.isValidKey = false;
        switch (e.keyCode) {
          case 38:
          case 40:
            if (this.getModuleName() === "autocomplete" && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else {
              this.preventAutoFill = false;
            }
            this.preventAltUp = false;
            if (this.getModuleName() === "autocomplete" && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
              attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
            }
            e.preventDefault();
            break;
          case 46:
          case 8:
            this.typedString = this.filterInput.value;
            if (!this.isPopupOpen && this.typedString !== "" || this.isPopupOpen && this.queryString.length > 0) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "" && this.queryString === "" && this.getModuleName() !== "autocomplete") {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "") {
              if (this.list) {
                this.resetFocusElement();
              }
              this.activeIndex = null;
              if (this.getModuleName() !== "dropdownlist") {
                this.preventAutoFill = true;
                this.searchLists(e);
                if (this.getModuleName() === "autocomplete") {
                  this.hidePopup();
                }
              }
            }
            e.preventDefault();
            break;
          default:
            this.typedString = this.filterInput.value;
            this.preventAutoFill = false;
            this.searchLists(e);
            if (this.enableVirtualization && this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
              this.getFilteringSkeletonCount();
            }
            break;
        }
      } else {
        this.isValidKey = false;
      }
    };
    DropDownList2.prototype.getFilteringSkeletonCount = function() {
      var difference = this.dataCount - this.viewPortInfo.endIndex;
      var currentSkeletonCount = this.skeletonCount;
      this.getSkeletonCount(true);
      this.skeletonCount = this.dataCount > this.itemCount * 2 ? this.skeletonCount : difference > this.skeletonCount ? this.skeletonCount : difference > 0 ? difference : 0;
      var skeletonUpdated = true;
      if (this.getModuleName() === "autocomplete" && (this.totalItemCount != 0 && this.totalItemCount < this.itemCount * 2)) {
        this.skeletonCount = 0;
        skeletonUpdated = false;
      }
      if (!this.list.classList.contains(dropDownBaseClasses.noData)) {
        var isSkeletonCountChange = currentSkeletonCount !== this.skeletonCount;
        if (currentSkeletonCount !== this.skeletonCount && skeletonUpdated) {
          this.UpdateSkeleton(true, Math.abs(currentSkeletonCount - this.skeletonCount));
        } else {
          this.UpdateSkeleton();
        }
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        }
        if (this.list.getElementsByClassName("e-virtual-ddl-content").length > 0) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownList2.prototype.getSkeletonCount = function(retainSkeleton) {
      this.virtualListHeight = this.listHeight != null ? parseInt(this.listHeight, 10) : this.virtualListHeight;
      var actualCount = this.virtualListHeight > 0 ? Math.floor(this.virtualListHeight / this.listItemHeight) : 0;
      this.skeletonCount = actualCount * 2 < this.itemCount ? this.itemCount : actualCount * 2;
      this.itemCount = retainSkeleton ? this.itemCount : this.skeletonCount;
      this.skeletonCount = Math.floor(this.skeletonCount / 2) + 2;
    };
    DropDownList2.prototype.onFilterDown = function(e) {
      switch (e.keyCode) {
        case 13:
          break;
        case 40:
        case 38:
          this.queryString = this.filterInput.value;
          e.preventDefault();
          break;
        case 9:
          if (this.isPopupOpen && this.getModuleName() !== "autocomplete") {
            e.preventDefault();
          }
          break;
        default:
          this.prevSelectPoints = this.getSelectionPoints();
          this.queryString = this.filterInput.value;
          break;
      }
    };
    DropDownList2.prototype.removeFillSelection = function() {
      if (this.isInteracted) {
        var selection = this.getSelectionPoints();
        this.inputElement.setSelectionRange(selection.end, selection.end);
      }
    };
    DropDownList2.prototype.getQuery = function(query) {
      var filterQuery;
      if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
        var filterType = this.typedString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      }
      if (this.enableVirtualization && this.viewPortInfo.endIndex != 0 && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.virtualGroupDataSource)) {
        var takeValue = this.getTakeValue();
        var alreadySkipAdded = false;
        if (filterQuery) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onSkip") {
              alreadySkipAdded = true;
              break;
            }
          }
        }
        if (this.allowFiltering || !this.isPopupOpen || !alreadySkipAdded) {
          filterQuery.skip(this.virtualItemStartIndex);
        }
        if (this.isIncrementalRequest) {
          filterQuery.take(this.incrementalEndIndex);
        } else {
          filterQuery.take(takeValue);
        }
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    DropDownList2.prototype.getSelectionPoints = function() {
      var input = this.inputElement;
      return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };
    };
    DropDownList2.prototype.searchLists = function(e) {
      var _this = this;
      this.isTyped = true;
      this.activeIndex = null;
      this.isListSearched = true;
      if (this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
      this.isDataFetched = false;
      if (this.isFiltering()) {
        this.checkAndResetCache();
        var eventArgs_1 = {
          preventDefaultAction: false,
          text: this.filterInput.value,
          updateData: function(dataSource, query, fields) {
            if (eventArgs_1.cancel) {
              return;
            }
            _this.isCustomFilter = true;
            _this.filteringAction(dataSource, query, fields);
          },
          baseEventArgs: e,
          cancel: false
        };
        this.trigger("filtering", eventArgs_1, function(eventArgs) {
          if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {
            _this.filteringAction(_this.dataSource, null, _this.fields);
          }
        });
      }
    };
    DropDownList2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFilter = true;
      this.filteringAction(dataSource, query, fields);
    };
    DropDownList2.prototype.filteringAction = function(dataSource, query, fields) {
      if (!isNullOrUndefined(this.filterInput)) {
        this.beforePopupOpen = !this.isPopupOpen && this.getModuleName() === "combobox" && this.filterInput.value === "" ? false : true;
        var isNoData = this.list.classList.contains(dropDownBaseClasses.noData);
        if (this.filterInput.value.trim() === "" && !this.itemTemplate) {
          this.actionCompleteData.isUpdated = false;
          this.isTyped = false;
          if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {
            if (this.enableVirtualization) {
              this.totalItemCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
              this.resetList(dataSource, fields, query);
              if (isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
                if (!this.list.querySelector(".e-virtual-ddl-content")) {
                  this.list.appendChild(this.createElement("div", {
                    className: "e-virtual-ddl-content",
                    styles: this.getTransformValues()
                  })).appendChild(this.list.querySelector(".e-list-parent"));
                }
                if (!this.list.querySelector(".e-virtual-ddl")) {
                  var virualElement = this.createElement("div", {
                    id: this.element.id + "_popup",
                    className: "e-virtual-ddl",
                    styles: this.GetVirtualTrackHeight()
                  });
                  document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
                }
              }
            }
            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
          }
          this.isTyped = true;
          if (!isNullOrUndefined(this.itemData) && this.getModuleName() === "dropdownlist") {
            this.focusIndexItem();
            this.setScrollPosition();
          }
          this.isNotSearchList = true;
        } else {
          this.isNotSearchList = false;
          query = this.filterInput.value.trim() === "" ? null : query;
          if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
            this.isPreventScrollAction = true;
            this.list.scrollTop = 0;
            this.previousStartIndex = 0;
            this.virtualListInfo = null;
          }
          this.resetList(dataSource, fields, query);
          if (this.getModuleName() === "dropdownlist" && this.list.classList.contains(dropDownBaseClasses.noData)) {
            this.popupContentElement.setAttribute("role", "status");
            this.popupContentElement.setAttribute("id", "no-record");
            attributes(this.filterInputObj.container, { "aria-activedescendant": "no-record" });
          }
          if (this.enableVirtualization && isNoData && !this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!this.list.querySelector(".e-virtual-ddl-content")) {
              this.list.appendChild(this.createElement("div", {
                className: "e-virtual-ddl-content",
                styles: this.getTransformValues()
              })).appendChild(this.list.querySelector(".e-list-parent"));
            }
            if (!this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = this.createElement("div", {
                id: this.element.id + "_popup",
                className: "e-virtual-ddl",
                styles: this.GetVirtualTrackHeight()
              });
              document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
            }
          }
        }
        if (this.enableVirtualization) {
          this.getFilteringSkeletonCount();
        }
        this.renderReactTemplates();
      }
    };
    DropDownList2.prototype.setSearchBox = function(popupElement) {
      if (this.isFiltering()) {
        var parentElement = popupElement.querySelector("." + dropDownListClasses.filterParent) ? popupElement.querySelector("." + dropDownListClasses.filterParent) : this.createElement("span", {
          className: dropDownListClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: dropDownListClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        if (!isNullOrUndefined(this.cssClass)) {
          if (this.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], parentElement);
        prepend([parentElement], popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "click", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        if (!Browser.isDevice) {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        } else {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.mobileKeyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        }
        EventHandler.add(this.filterInput, "input", this.onInput, this);
        EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this);
        EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.pasteHandler, this);
        return this.filterInputObj;
      } else {
        return inputObject;
      }
    };
    DropDownList2.prototype.onInput = function(e) {
      this.isValidKey = true;
      if (this.getModuleName() === "combobox") {
        this.updateIconState();
      }
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.typedString = this.filterInput.value;
        this.preventAutoFill = true;
        this.searchLists(e);
      }
    };
    DropDownList2.prototype.pasteHandler = function(e) {
      var _this = this;
      setTimeout(function() {
        _this.typedString = _this.filterInput.value;
        _this.searchLists(e);
      });
    };
    DropDownList2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      if (this.beforePopupOpen) {
        this.renderPopup();
      }
    };
    DropDownList2.prototype.UpdateSkeleton = function(isSkeletonCountChange, skeletonCount) {
      var isContainSkeleton = this.list.querySelector(".e-virtual-ddl-content");
      var isContainVirtualList = this.list.querySelector(".e-virtual-list");
      if (isContainSkeleton && (!isContainVirtualList || isSkeletonCountChange) && this.enableVirtualization) {
        var totalSkeletonCount = isSkeletonCountChange ? skeletonCount : this.skeletonCount;
        for (var i = 0; i < totalSkeletonCount; i++) {
          var liElement = this.createElement("li", { className: dropDownListClasses.virtualList, styles: "overflow: inherit" });
          if (this.enableVirtualization && this.itemTemplate) {
            liElement.style.height = this.listItemHeight + "px";
          }
          var skeleton = new Skeleton({
            shape: "Text",
            height: "10px",
            width: "95%",
            cssClass: "e-skeleton-text"
          });
          skeleton.appendTo(this.createElement("div"));
          liElement.appendChild(skeleton.element);
          isContainSkeleton.firstChild.insertBefore(liElement, isContainSkeleton.firstChild.children[0]);
        }
      }
    };
    DropDownList2.prototype.getTakeValue = function() {
      return this.allowFiltering && this.getModuleName() === "dropdownlist" && Browser.isDevice ? Math.round(window.outerHeight / this.listItemHeight) : this.itemCount;
    };
    DropDownList2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      if (this.dataSource instanceof DataManager && !isNullOrUndefined(e) && !this.virtualGroupDataSource) {
        this.totalItemCount = e.count;
      }
      if (this.isNotSearchList && !this.enableVirtualization) {
        this.isNotSearchList = false;
        return;
      }
      var tempItemCount = this.itemCount;
      if (this.isActive || !isNullOrUndefined(ulElement)) {
        var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;
        _super.prototype.onActionComplete.call(this, ulElement, list, e);
        this.skeletonCount = this.totalItemCount != 0 && this.totalItemCount < this.itemCount * 2 ? 0 : this.skeletonCount;
        this.updateSelectElementData(this.allowFiltering);
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === "keydown") {
          this.isRequested = false;
          this.keyActionHandler(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {
          this.incrementalSearch(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (!this.enableVirtualization) {
          this.list.scrollTop = 0;
        }
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false", "aria-label": "listbox" });
        }
        if (this.initialRemoteRender) {
          this.initial = true;
          this.activeIndex = this.index;
          this.initialRemoteRender = false;
          if (this.value && this.dataSource instanceof DataManager) {
            var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
            var fieldValue_1 = this.fields.value.split(".");
            var checkVal = list.some(function(x) {
              return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === _this.value : x[checkField_1] === _this.value;
            });
            if (this.enableVirtualization && this.virtualGroupDataSource) {
              checkVal = this.virtualGroupDataSource.some(function(x) {
                return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === _this.value : x[checkField_1] === _this.value;
              });
            }
            if (!checkVal) {
              this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, "equal", this.value))).then(function(e2) {
                if (e2.result.length > 0) {
                  _this.addItem(e2.result, list.length);
                  _this.updateValues();
                } else {
                  _this.updateValues();
                }
              });
            } else {
              this.updateValues();
            }
          } else {
            this.updateValues();
          }
          this.initial = false;
        } else if (this.getModuleName() === "autocomplete" && this.value) {
          this.setInputValue();
        }
        if (this.getModuleName() !== "autocomplete" && this.isFiltering() && !this.isTyped) {
          if (!this.actionCompleteData.isUpdated || (!this.isCustomFilter && !this.isFilterFocus || isNullOrUndefined(this.itemData) && this.allowFiltering && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0))) {
            if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
              setTimeout(function() {
                _this.updateActionCompleteDataValues(ulElement, list);
              }, 0);
            } else {
              this.updateActionCompleteDataValues(ulElement, list);
            }
          }
          if ((this.allowCustom || this.allowFiltering && !this.isValueInList(list, this.value) && this.dataSource instanceof DataManager) && !this.enableVirtualization) {
            this.addNewItem(list, selectedItem);
          } else if ((this.allowCustom || this.allowFiltering && this.isValueInList(list, this.value)) && !this.enableVirtualization) {
            this.addNewItem(list, selectedItem);
          }
          if (!isNullOrUndefined(this.itemData) || isNullOrUndefined(this.itemData) && this.enableVirtualization) {
            this.focusIndexItem();
          }
          if (this.enableVirtualization) {
            this.updateActionCompleteDataValues(ulElement, list);
          }
        } else if (this.enableVirtualization && this.getModuleName() !== "autocomplete" && !this.isFiltering()) {
          var value = this.getItemData().value;
          this.activeIndex = this.getIndexByValue(value);
          var element = this.findListElement(this.list, "li", "data-value", value);
          this.selectedLI = element;
        } else if (this.enableVirtualization && this.getModuleName() === "autocomplete") {
          this.activeIndex = this.skeletonCount;
        }
        if (this.beforePopupOpen) {
          this.renderPopup(e);
          if (this.enableVirtualization) {
            if (!this.list.querySelector(".e-virtual-list")) {
              this.UpdateSkeleton();
              this.liCollections = this.list.querySelectorAll(".e-list-item");
            }
          }
          if (this.enableVirtualization && tempItemCount != this.itemCount) {
            this.resetList(this.dataSource, this.fields);
          }
        }
      }
    };
    DropDownList2.prototype.isValueInList = function(list, valueToFind) {
      if (Array.isArray(list)) {
        for (var i = 0; i < list.length; i++) {
          if (list[i] === valueToFind) {
            return true;
          }
        }
      } else if (typeof list === "object" && list !== null) {
        for (var key in list) {
          if (Object.prototype.hasOwnProperty.call(list, key) && list[key] === valueToFind) {
            return true;
          }
        }
      }
      return false;
    };
    DropDownList2.prototype.checkFieldValue = function(list, fieldValue) {
      var checkField = list;
      fieldValue.forEach(function(value) {
        checkField = checkField[value];
      });
      return checkField;
    };
    DropDownList2.prototype.updateActionCompleteDataValues = function(ulElement, list) {
      this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list, isUpdated: true };
      if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.addNewItem = function(listData, newElement) {
      var _this = this;
      if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
        var value_5 = this.getItemData().value;
        var isExist = listData.some(function(data) {
          return (typeof data === "string" || typeof data === "number") && data === value_5 || getValue(_this.fields.value, data) === value_5;
        });
        if (!isExist) {
          this.addItem(this.itemData);
        }
      }
    };
    DropDownList2.prototype.updateActionCompleteData = function(li, item, index) {
      var _this = this;
      if (this.getModuleName() !== "autocomplete" && this.actionCompleteData.ulElement) {
        if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
          setTimeout(function() {
            _this.actionCompleteDataUpdate(li, item, index);
          }, 0);
        } else {
          this.actionCompleteDataUpdate(li, item, index);
        }
      }
    };
    DropDownList2.prototype.actionCompleteDataUpdate = function(li, item, index) {
      if (index !== null) {
        this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);
      } else {
        this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));
      }
      if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {
        this.actionCompleteData.list.push(item);
      }
    };
    DropDownList2.prototype.focusIndexItem = function() {
      var value = this.getItemData().value;
      this.activeIndex = this.getIndexByValue(value);
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.selectedLI = element;
      this.activeItem(element);
      if (!(this.enableVirtualization && isNullOrUndefined(element))) {
        this.removeFocus();
      }
    };
    DropDownList2.prototype.updateSelection = function() {
      var selectedItem = this.list.querySelector("." + dropDownBaseClasses.selected);
      if (selectedItem) {
        this.setProperties({ "index": this.getIndexByValue(selectedItem.getAttribute("data-value")) });
        this.activeIndex = this.index;
      } else {
        this.removeFocus();
        this.list.querySelector("." + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.updateSelectionList = function() {
      var selectedItem = this.list && this.list.querySelector(".e-active");
      if (!selectedItem && !isNullOrUndefined(this.value)) {
        var findEle = this.findListElement(this.list, "li", "data-value", this.value);
        if (findEle) {
          findEle.classList.add("e-active");
        }
      }
    };
    DropDownList2.prototype.checkAndResetCache = function() {
      if (this.enableVirtualization) {
        this.generatedDataObject = {};
        this.virtualItemStartIndex = this.virtualItemEndIndex = 0;
        this.viewPortInfo = {
          currentPageNumber: null,
          direction: null,
          sentinelInfo: {},
          offsets: {},
          startIndex: 0,
          endIndex: this.itemCount
        };
        this.selectedValueInfo = null;
      }
    };
    DropDownList2.prototype.removeFocus = function() {
      var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses.focus);
      if (highlightedItem && highlightedItem.length) {
        removeClass(highlightedItem, dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.getTransformValues = function() {
      var translateY = this.viewPortInfo.startIndex * this.listItemHeight;
      translateY = translateY - this.skeletonCount * this.listItemHeight;
      translateY = this.viewPortInfo.startIndex === 0 && this.listData && this.listData.length === 0 ? 0 : translateY;
      var styleText = "transform: translate(0px, " + translateY + "px);";
      return styleText;
    };
    DropDownList2.prototype.GetVirtualTrackHeight = function() {
      var height = this.totalItemCount === this.viewPortInfo.endIndex ? this.totalItemCount * this.listItemHeight - this.itemCount * this.listItemHeight : this.totalItemCount * this.listItemHeight;
      var heightDimension = "height: " + (height - this.itemCount * this.listItemHeight) + "px;";
      if (this.getModuleName() === "autocomplete" && this.skeletonCount === 0) {
        return "height: 0px;";
      }
      return heightDimension;
    };
    DropDownList2.prototype.renderPopup = function(e) {
      var _this = this;
      if (this.popupObj && document.body.contains(this.popupObj.element)) {
        this.refreshPopup();
        return;
      }
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle = _this.createElement("div", {
            id: _this.element.id + "_popup",
            className: "e-ddl e-popup " + (_this.cssClass !== null ? _this.cssClass : "")
          });
          popupEle.setAttribute("aria-label", _this.element.id);
          popupEle.setAttribute("role", "dialog");
          var searchBox = _this.setSearchBox(popupEle);
          _this.listHeight = formatUnit(_this.popupHeight);
          if (_this.headerTemplate) {
            _this.setHeaderTemplate(popupEle);
          }
          append([_this.list], popupEle);
          if (_this.footerTemplate) {
            _this.setFooterTemplate(popupEle);
          }
          document.body.appendChild(popupEle);
          popupEle.style.top = "0px";
          if (_this.enableVirtualization && _this.itemTemplate) {
            var listitems = popupEle.querySelectorAll("li.e-list-item:not(.e-virtual-list)");
            _this.listItemHeight = listitems.length > 0 ? Math.ceil(listitems[0].getBoundingClientRect().height) : 0;
          }
          if (_this.enableVirtualization && !_this.list.classList.contains(dropDownBaseClasses.noData)) {
            if (!_this.list.querySelector(".e-virtual-ddl-content")) {
              _this.list.appendChild(_this.createElement("div", {
                className: "e-virtual-ddl-content",
                styles: _this.getTransformValues()
              })).appendChild(_this.list.querySelector(".e-list-parent"));
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = _this.getTransformValues();
            }
            _this.UpdateSkeleton();
            _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
            _this.virtualItemCount = _this.itemCount;
            if (!_this.list.querySelector(".e-virtual-ddl")) {
              var virualElement = _this.createElement("div", {
                id: _this.element.id + "_popup",
                className: "e-virtual-ddl",
                styles: _this.GetVirtualTrackHeight()
              });
              popupEle.querySelector(".e-dropdownbase").appendChild(virualElement);
            } else {
              _this.list.getElementsByClassName("e-virtual-ddl")[0].style = _this.GetVirtualTrackHeight();
            }
          }
          popupEle.style.visibility = "hidden";
          if (_this.popupHeight !== "auto") {
            _this.searchBoxHeight = 0;
            if (!isNullOrUndefined(searchBox.container) && _this.getModuleName() !== "combobox" && _this.getModuleName() !== "autocomplete") {
              _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
              _this.listHeight = (parseInt(_this.listHeight, 10) - _this.searchBoxHeight).toString() + "px";
            }
            if (_this.headerTemplate) {
              _this.header = _this.header ? _this.header : popupEle.querySelector(".e-ddl-header");
              var height = Math.round(_this.header.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            if (_this.footerTemplate) {
              _this.footer = _this.footer ? _this.footer : popupEle.querySelector(".e-ddl-footer");
              var height = Math.round(_this.footer.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            _this.list.style.maxHeight = (parseInt(_this.listHeight, 10) - 2).toString() + "px";
            popupEle.style.maxHeight = formatUnit(_this.popupHeight);
          } else {
            popupEle.style.height = "auto";
          }
          var offsetValue = 0;
          var left = void 0;
          _this.isPreventScrollAction = true;
          if (!isNullOrUndefined(_this.selectedLI) && (!isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0)) {
            _this.setScrollPosition();
          } else if (_this.enableVirtualization) {
            _this.setScrollPosition();
          } else {
            _this.list.scrollTop = 0;
          }
          if (Browser.isDevice && (!_this.allowFiltering && (_this.getModuleName() === "dropdownlist" || _this.isDropDownClick && _this.getModuleName() === "combobox"))) {
            offsetValue = _this.getOffsetValue(popupEle);
            var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];
            if (!isNullOrUndefined(_this.inputElement)) {
              left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));
            }
          }
          _this.createPopup(popupEle, offsetValue, left);
          _this.popupContentElement = _this.popupObj.element.querySelector(".e-content");
          _this.getFocusElement();
          _this.checkCollision(popupEle);
          if (Browser.isDevice) {
            if (parseInt(_this.popupWidth.toString(), 10) > window.outerWidth && !(_this.getModuleName() === "dropdownlist" && _this.allowFiltering)) {
              _this.popupObj.element.classList.add("e-wide-popup");
            }
            _this.popupObj.element.classList.add(dropDownListClasses.device);
            if (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox" && !_this.allowFiltering && _this.isDropDownClick) {
              _this.popupObj.collision = { X: "fit", Y: "fit" };
            }
            if (_this.isFilterLayout()) {
              _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);
              _this.popupObj.position = { X: 0, Y: 0 };
              _this.popupObj.dataBind();
              attributes(_this.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
              addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);
              _this.setSearchBoxPosition();
              _this.backIconElement = searchBox.container.querySelector(".e-back-icon");
              _this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses.clearIcon);
              EventHandler.add(_this.backIconElement, "click", _this.clickOnBackIcon, _this);
              EventHandler.add(_this.clearIconElement, "click", _this.clearText, _this);
            }
          }
          popupEle.style.visibility = "visible";
          addClass([popupEle], "e-popup-close");
          var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);
          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element = scrollParentElements_1[_i];
            EventHandler.add(element, "scroll", _this.scrollHandler, _this);
          }
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          if (_this.enableVirtualization) {
            _this.notify("bindScrollEvent", {
              module: "VirtualScroll",
              component: _this.getModuleName(),
              enable: _this.enableVirtualization
            });
            setTimeout(function() {
              if (_this.value || _this.list.querySelector(".e-active")) {
                _this.updateSelectionList();
                if (_this.selectedValueInfo && _this.viewPortInfo && _this.viewPortInfo.offsets.top) {
                  _this.list.scrollTop = _this.viewPortInfo.offsets.top;
                } else {
                  _this.scrollBottom(true, true);
                }
              }
            }, 5);
          }
          attributes(_this.targetElement(), { "aria-expanded": "true", "aria-owns": _this.element.id + "_popup", "aria-controls": _this.element.id });
          if (_this.getModuleName() !== "dropdownlist" && _this.list.classList.contains("e-nodata")) {
            attributes(_this.targetElement(), { "aria-activedescendant": "no-record" });
            _this.popupContentElement.setAttribute("role", "status");
            _this.popupContentElement.setAttribute("id", "no-record");
          }
          _this.inputElement.setAttribute("aria-expanded", "true");
          _this.inputElement.setAttribute("aria-controls", _this.element.id);
          var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;
          addClass([inputParent], [dropDownListClasses.inputFocus]);
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, event: e, cancel: false, animation: animModel };
          _this.trigger("open", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              if (!isNullOrUndefined(_this.inputWrapper)) {
                addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);
              }
              _this.renderReactTemplates();
              if (!isNullOrUndefined(_this.popupObj)) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.element : null);
              }
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    DropDownList2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "dropdownlist" || this.isDropDownClick)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.getOffsetValue = function(popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };
    DropDownList2.prototype.createPopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputWrapper.container,
        collision: this.enableRtl ? { X: "fit", Y: "flip" } : { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: this.enableRtl ? { X: "right", Y: "bottom" } : { X: "left", Y: "bottom" },
        zIndex: this.zIndex,
        close: function() {
          if (!_this.isDocumentClick) {
            _this.focusDropDown();
          }
          if (_this.isReact) {
            _this.clearTemplate(["headerTemplate", "footerTemplate"]);
          }
          _this.isNotSearchList = false;
          _this.isDocumentClick = false;
          _this.destroyPopup();
          if (_this.isFiltering() && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {
            _this.isActive = true;
            if (_this.enableVirtualization) {
              _this.onActionComplete(_this.ulElement, _this.listData, null, true);
            } else {
              _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);
            }
          }
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector("li");
          var ulElement = _this.list.querySelector("ul li");
          if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-item-focus")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-item-focus")[0].id });
          } else if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-active")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-active")[0].id });
          }
          if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && (actionList && ulElement && actionList.textContent !== ulElement.textContent) && _this.element.tagName !== "EJS-COMBOBOX") {
            _this.cloneElements();
          }
          if (_this.isFilterLayout()) {
            removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            _this.isFilterFocus = true;
            _this.filterInput.focus();
            if (_this.inputWrapper.clearButton) {
              addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }
          }
          _this.activeStateChange();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hidePopup();
          }
        }
      });
    };
    DropDownList2.prototype.isEmptyList = function() {
      return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
    };
    DropDownList2.prototype.getFocusElement = function() {
    };
    DropDownList2.prototype.isFilterLayout = function() {
      return this.getModuleName() === "dropdownlist" && this.allowFiltering;
    };
    DropDownList2.prototype.scrollHandler = function() {
      if (Browser.isDevice && (this.getModuleName() === "dropdownlist" && !this.isFilterLayout() || this.getModuleName() === "combobox" && !this.allowFiltering && this.isDropDownClick)) {
        if (this.element && !this.isElementInViewport(this.element)) {
          this.hidePopup();
        }
      }
    };
    DropDownList2.prototype.isElementInViewport = function(element) {
      var elementRect = element.getBoundingClientRect();
      return elementRect.top >= 0 && elementRect.left >= 0 && elementRect.bottom <= window.innerHeight && elementRect.right <= window.innerWidth;
    };
    ;
    DropDownList2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.popupObj.element.style.maxHeight = "100%";
      this.popupObj.element.style.width = "100%";
      this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px";
      this.list.style.height = window.innerHeight - searchBoxHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    DropDownList2.prototype.setPopupPosition = function(border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector("." + dropDownListClasses.focus) || this.selectedLI;
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      this.listItemHeight = liHeight;
      var listHeight = this.list.offsetHeight / 2;
      var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;
      if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
        var count = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight && !this.enableVirtualization) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }
      var inputHeight = this.inputWrapper.container.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };
    DropDownList2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === "dropdownlist" || this.isDropDownClick && this.getModuleName() === "combobox"))) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + "px";
      }
      return width;
    };
    DropDownList2.prototype.scrollBottom = function(isInitial, isInitialSelection, keyAction) {
      var _this = this;
      if (isInitialSelection === void 0) {
        isInitialSelection = false;
      }
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (isNullOrUndefined(this.selectedLI) && this.enableVirtualization) {
        this.selectedLI = this.list.querySelector("." + dropDownBaseClasses.li);
        if (!isNullOrUndefined(this.selectedLI) && this.selectedLI.classList.contains("e-virtual-list")) {
          this.selectedLI = this.liCollections[this.skeletonCount];
        }
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        this.isUpwardScrolling = false;
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var lastElementValue = this.list.querySelector("li:last-of-type") ? this.list.querySelector("li:last-of-type").getAttribute("data-value") : null;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
        var currentOffset = this.list.offsetHeight;
        var nextBottom = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        var isScrollerCHanged = false;
        var isScrollTopChanged = false;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10);
        var boxRange = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
          isScrollerCHanged = this.isKeyBoardAction;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction == "pageDown" ? this.getPageCount() - 2 : 1;
          if (!this.enableVirtualization || this.isKeyBoardAction || isInitialSelection) {
            if (this.isKeyBoardAction && this.enableVirtualization && lastElementValue && currentElementValue === lastElementValue && keyAction != "end" && !this.isVirtualScrolling) {
              this.isPreventKeyAction = true;
              if (this.enableVirtualization && this.itemTemplate) {
                this.list.scrollTop += nextOffset;
              } else {
                this.list.scrollTop += this.selectedLI.offsetHeight * liCount;
              }
              this.isPreventKeyAction = this.IsScrollerAtEnd() ? false : this.isPreventKeyAction;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
            } else if (this.enableVirtualization && keyAction == "end") {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
              this.list.scrollTop = this.list.scrollHeight;
            } else {
              if (keyAction == "pageDown" && this.enableVirtualization && !this.isVirtualScrolling) {
                this.isPreventKeyAction = false;
                this.isKeyBoardAction = false;
                this.isPreventScrollAction = false;
                nextOffset = nextOffset + this.selectedLI.offsetHeight * liCount;
              }
              this.list.scrollTop = nextOffset;
            }
          } else {
            this.list.scrollTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.virtualListInfo.startIndex * this.listItemHeight : 0;
          }
          isScrollerCHanged = this.isKeyBoardAction;
          isScrollTopChanged = true;
        }
        this.isKeyBoardAction = isScrollerCHanged;
        if (this.enableVirtualization && this.fields.groupBy && this.fixedHeaderElement && keyAction == "down") {
          setTimeout(function() {
            _this.scrollStop(null, true);
          }, 100);
        }
      }
    };
    DropDownList2.prototype.scrollTop = function(keyAction) {
      if (keyAction === void 0) {
        keyAction = null;
      }
      if (!isNullOrUndefined(this.selectedLI)) {
        var virtualListCount = this.list.querySelectorAll(".e-virtual-list").length;
        var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? this.selectedLI.offsetTop + this.virtualListInfo.startIndex * this.selectedLI.offsetHeight : this.selectedLI.offsetTop;
        var nextOffset = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight - this.list.scrollTop;
        var firstElementValue = this.list.querySelector("li.e-list-item:not(.e-virtual-list)") ? this.list.querySelector("li.e-list-item:not(.e-virtual-list)").getAttribute("data-value") : null;
        nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = selectedLiOffsetTop - virtualListCount * this.selectedLI.offsetHeight + this.selectedLI.offsetHeight - this.list.scrollTop;
        var isPageUpKeyAction = this.enableVirtualization && this.getModuleName() === "autocomplete" && nextOffset <= 0;
        if (this.activeIndex === 0 && !this.enableVirtualization) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0 || isPageUpKeyAction) {
          var currentElementValue = this.selectedLI ? this.selectedLI.getAttribute("data-value") : null;
          var liCount = keyAction == "pageUp" ? this.getPageCount() - 2 : 1;
          if (this.enableVirtualization && this.isKeyBoardAction && firstElementValue && currentElementValue === firstElementValue && keyAction != "home" && !this.isVirtualScrolling) {
            this.isUpwardScrolling = true;
            this.isPreventKeyAction = true;
            this.list.scrollTop -= this.selectedLI.offsetHeight * liCount;
            this.isPreventKeyAction = this.list.scrollTop != 0 ? this.isPreventKeyAction : false;
            this.isKeyBoardAction = false;
            this.isPreventScrollAction = false;
          } else if (this.enableVirtualization && keyAction == "home") {
            this.isPreventScrollAction = false;
            this.isPreventKeyAction = true;
            this.isKeyBoardAction = false;
            this.list.scrollTo(0, 0);
          } else {
            if (keyAction == "pageUp" && this.enableVirtualization && !this.isVirtualScrolling) {
              this.isPreventKeyAction = false;
              this.isKeyBoardAction = false;
              this.isPreventScrollAction = false;
              nextOffset = nextOffset - this.selectedLI.offsetHeight * liCount;
            }
            this.list.scrollTop = this.list.scrollTop + nextOffset;
          }
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };
    DropDownList2.prototype.isEditTextBox = function() {
      return false;
    };
    DropDownList2.prototype.isFiltering = function() {
      return this.allowFiltering;
    };
    DropDownList2.prototype.isPopupButton = function() {
      return true;
    };
    DropDownList2.prototype.setScrollPosition = function(e) {
      this.isPreventScrollAction = true;
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.isKeyBoardAction = true;
            this.scrollBottom(false, false, e.action);
            break;
          default:
            this.isKeyBoardAction = e.action == "up" || e.action == "pageUp" || e.action == "open";
            this.scrollTop(e.action);
            break;
        }
      } else {
        this.scrollBottom(true);
      }
      this.isKeyBoardAction = false;
    };
    DropDownList2.prototype.clearText = function() {
      this.filterInput.value = this.typedString = "";
      this.searchLists(null);
      if (this.enableVirtualization) {
        this.list.scrollTop = 0;
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
        if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
        }
        this.getSkeletonCount();
        this.UpdateSkeleton();
        this.liCollections = this.list.querySelectorAll(".e-list-item");
        if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
          this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
        }
      }
    };
    DropDownList2.prototype.setEleWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputWrapper.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    DropDownList2.prototype.closePopup = function(delay, e) {
      var _this = this;
      var isFilterValue = !isNullOrUndefined(this.filterInput) && !isNullOrUndefined(this.filterInput.value) && this.filterInput.value !== "";
      var typedString = this.getModuleName() === "combobox" ? this.typedString : null;
      this.isTyped = false;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      this.keyboardEvent = null;
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.isActive = false;
      this.filterInputObj = null;
      this.isDropDownClick = false;
      this.preventAutoFill = false;
      var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);
      for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
        var element = scrollableParentElements_1[_i];
        EventHandler.remove(element, "scroll", this.scrollHandler);
      }
      if (Browser.isDevice && this.isFilterLayout()) {
        removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);
      }
      if (this.isFilterLayout()) {
        if (!Browser.isDevice) {
          this.searchKeyModule.destroy();
          if (this.clearIconElement) {
            EventHandler.remove(this.clearIconElement, "click", this.clearText);
          }
        }
        if (this.backIconElement) {
          EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon);
          EventHandler.remove(this.clearIconElement, "click", this.clearText);
        }
        if (!isNullOrUndefined(this.filterInput)) {
          EventHandler.remove(this.filterInput, "input", this.onInput);
          EventHandler.remove(this.filterInput, "keyup", this.onFilterUp);
          EventHandler.remove(this.filterInput, "keydown", this.onFilterDown);
          EventHandler.remove(this.filterInput, "blur", this.onBlurHandler);
          EventHandler.remove(this.filterInput, "paste", this.pasteHandler);
        }
        if (this.allowFiltering && this.getModuleName() === "dropdownlist") {
          this.filterInput.removeAttribute("aria-activedescendant");
        }
        this.filterInput = null;
      }
      attributes(this.targetElement(), { "aria-expanded": "false" });
      this.inputElement.setAttribute("aria-expanded", "false");
      this.targetElement().removeAttribute("aria-owns");
      this.targetElement().removeAttribute("aria-activedescendant");
      this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);
      if (this.isFiltering()) {
        this.actionCompleteData.isUpdated = false;
      }
      if (this.enableVirtualization) {
        if (this.value == null || this.isTyped) {
          this.viewPortInfo.endIndex = this.viewPortInfo && this.viewPortInfo.endIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
          if (this.getModuleName() === "autocomplete" || this.getModuleName() === "dropdownlist" && !isNullOrUndefined(this.typedString) && this.typedString != "" || this.getModuleName() === "combobox" && this.allowFiltering && !isNullOrUndefined(this.typedString) && this.typedString != "") {
            this.checkAndResetCache();
          }
        } else if (this.getModuleName() === "autocomplete") {
          this.checkAndResetCache();
        }
        if ((this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox") && !(this.skeletonCount == 0)) {
          this.getSkeletonCount(true);
        }
      }
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("close", eventArgs, function(eventArgs2) {
        if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector(".e-fixed-head"))) {
          var fixedHeader = _this.popupObj.element.querySelector(".e-fixed-head");
          fixedHeader.parentNode.removeChild(fixedHeader);
          _this.fixedHeaderElement = null;
        }
        if (!eventArgs2.cancel) {
          if (_this.getModuleName() === "autocomplete") {
            _this.rippleFun();
          }
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
      if (Browser.isDevice && !eventArgs.cancel && this.popupObj.element.classList.contains("e-wide-popup")) {
        this.popupObj.element.classList.remove("e-wide-popup");
      }
      var dataSourceCount;
      if (this.dataSource instanceof DataManager) {
        dataSourceCount = this.virtualGroupDataSource && this.virtualGroupDataSource.length ? this.virtualGroupDataSource.length : 0;
      } else {
        dataSourceCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.enableVirtualization && this.isFiltering() && this.value != null && isFilterValue && this.totalItemCount !== dataSourceCount) {
        this.updateInitialData();
        this.checkAndResetCache();
      }
    };
    DropDownList2.prototype.updateInitialData = function() {
      var currentData = this.selectData;
      var ulElement = this.renderItems(currentData, this.fields);
      this.list.scrollTop = 0;
      this.virtualListInfo = {
        currentPageNumber: null,
        direction: null,
        sentinelInfo: {},
        offsets: {},
        startIndex: 0,
        endIndex: 0
      };
      if (this.getModuleName() === "combobox") {
        this.typedString = "";
      }
      this.previousStartIndex = 0;
      this.previousEndIndex = 0;
      if (this.dataSource instanceof DataManager) {
        this.totalItemCount = this.dataCount = this.virtualGroupDataSource && this.virtualGroupDataSource.length ? this.virtualGroupDataSource.length : 0;
      } else {
        this.totalItemCount = this.dataCount = this.dataSource && this.dataSource.length ? this.dataSource.length : 0;
      }
      if (this.list.getElementsByClassName("e-virtual-ddl")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl")[0].style = this.GetVirtualTrackHeight();
      }
      if (this.getModuleName() !== "autocomplete" && this.totalItemCount != 0 && this.totalItemCount > this.itemCount * 2) {
        this.getSkeletonCount();
      }
      this.UpdateSkeleton();
      this.listData = currentData;
      this.updateActionCompleteDataValues(ulElement, currentData);
      this.liCollections = this.list.querySelectorAll(".e-list-item");
      if (this.list.getElementsByClassName("e-virtual-ddl-content")[0]) {
        this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
      }
    };
    DropDownList2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.isFilterFocus = false;
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownList2.prototype.clickOnBackIcon = function() {
      this.hidePopup();
      this.focusIn();
    };
    DropDownList2.prototype.render = function() {
      this.preselectedIndex = !isNullOrUndefined(this.index) ? this.index : null;
      if (this.element.tagName === "INPUT") {
        this.inputElement = this.element;
        if (isNullOrUndefined(this.inputElement.getAttribute("role"))) {
          this.inputElement.setAttribute("role", "combobox");
        }
        if (isNullOrUndefined(this.inputElement.getAttribute("type"))) {
          this.inputElement.setAttribute("type", "text");
        }
        this.inputElement.setAttribute("aria-expanded", "false");
      } else {
        this.inputElement = this.createElement("input", { attrs: { role: "combobox", type: "text" } });
        if (this.element.tagName !== this.getNgDirective()) {
          this.element.style.display = "none";
        }
        this.element.parentElement.insertBefore(this.inputElement, this.element);
        this.preventTabIndex(this.inputElement);
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.getModuleName() === "dropdownlist" ? true : this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.inputWrapper.container);
      } else {
        this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
      }
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "aria-label": this.getModuleName(), "tabindex": "-1", "class": dropDownListClasses.hiddenElement }
      });
      prepend([this.hiddenElement], this.inputWrapper.container);
      this.validationAttribute(this.element, this.hiddenElement);
      this.setReadOnly();
      this.setFields();
      this.inputWrapper.container.style.width = formatUnit(this.width);
      this.inputWrapper.container.classList.add("e-ddl");
      if (this.floatLabelType === "Auto") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.wireEvent();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement.id = id + "_hidden";
      this.targetElement().setAttribute("tabindex", this.tabIndex);
      if ((this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") && !this.readonly) {
        this.inputElement.setAttribute("aria-label", this.getModuleName());
      } else if (this.getModuleName() === "dropdownlist") {
        attributes(this.targetElement(), { "aria-label": this.getModuleName() });
        this.inputElement.setAttribute("aria-label", this.getModuleName());
        this.inputElement.setAttribute("aria-expanded", "false");
        this.inputElement.setAttribute("aria-controls", this.element.id + "_popups");
      }
      attributes(this.targetElement(), this.getAriaAttributes());
      this.updateDataAttribute(this.htmlAttributes);
      this.setHTMLAttributes();
      if (this.targetElement() === this.inputElement) {
        this.inputElement.removeAttribute("aria-labelledby");
      }
      if (this.value !== null || this.activeIndex !== null || this.text !== null) {
        if (this.enableVirtualization) {
          this.listItemHeight = this.getListHeight();
          this.getSkeletonCount();
          this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
        }
        this.initValue();
        this.selectedValueInfo = this.viewPortInfo;
        if (this.enableVirtualization) {
          this.activeIndex = this.activeIndex + this.skeletonCount;
        }
      } else if (this.element.tagName === "SELECT" && this.element.options[0]) {
        var selectElement = this.element;
        this.value = selectElement.options[selectElement.selectedIndex].value;
        this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
        this.initValue();
      }
      this.setEnabled();
      this.preventTabIndex(this.element);
      if (!this.enabled) {
        this.targetElement().tabIndex = -1;
      }
      this.initial = false;
      this.element.style.opacity = "";
      this.inputElement.onselect = function(e) {
        e.stopImmediatePropagation();
      };
      this.inputElement.onchange = function(e) {
        e.stopImmediatePropagation();
      };
      if (this.element.hasAttribute("autofocus")) {
        this.focusIn();
      }
      if (!isNullOrUndefined(this.text)) {
        this.inputElement.setAttribute("value", this.text);
      }
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      var floatLabelElement = this.inputWrapper.container.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(this.element.id) && this.element.id !== "" && !isNullOrUndefined(floatLabelElement)) {
        floatLabelElement.id = "label_" + this.element.id.replace(/ /g, "_");
        attributes(this.inputElement, { "aria-labelledby": floatLabelElement.id });
      }
      this.renderComplete();
      this.listItemHeight = this.getListHeight();
      this.getSkeletonCount();
      if (this.enableVirtualization) {
        this.updateVirtualizationProperties(this.itemCount, this.allowFiltering);
      }
      this.viewPortInfo.startIndex = this.virtualItemStartIndex = 0;
      this.viewPortInfo.endIndex = this.virtualItemEndIndex = this.viewPortInfo.startIndex > 0 ? this.viewPortInfo.endIndex : this.itemCount;
    };
    DropDownList2.prototype.getListHeight = function() {
      var listParent = this.createElement("div", {
        className: "e-dropdownbase"
      });
      var item = this.createElement("li", {
        className: "e-list-item"
      });
      var listParentHeight = formatUnit(this.popupHeight);
      listParent.style.height = parseInt(listParentHeight, 10).toString() + "px";
      listParent.appendChild(item);
      document.body.appendChild(listParent);
      this.virtualListHeight = listParent.getBoundingClientRect().height;
      var listItemHeight = Math.ceil(item.getBoundingClientRect().height);
      listParent.remove();
      return listItemHeight;
    };
    DropDownList2.prototype.setFooterTemplate = function(popupEle) {
      var compiledString;
      if (this.footer) {
        if (this.isReact && typeof this.footerTemplate === "function") {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], dropDownListClasses.footer);
      }
      var footercheck = this.dropdownCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var footerCompTemp = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (footerCompTemp && footerCompTemp.length > 0) {
        append(footerCompTemp, this.footer);
      }
      append([this.footer], popupEle);
    };
    DropDownList2.prototype.setHeaderTemplate = function(popupEle) {
      var compiledString;
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], dropDownListClasses.header);
      }
      var headercheck = this.dropdownCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var headerCompTemp = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (headerCompTemp && headerCompTemp.length) {
        append(headerCompTemp, this.header);
      }
      var contentEle = popupEle.querySelector("div.e-content");
      popupEle.insertBefore(this.header, contentEle);
    };
    DropDownList2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    DropDownList2.prototype.setOldText = function(text) {
      this.text = text;
    };
    DropDownList2.prototype.setOldValue = function(value) {
      this.value = value;
    };
    DropDownList2.prototype.refreshPopup = function() {
      if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === "autocomplete")) {
        removeClass([this.popupObj.element], "e-popup-close");
        this.popupObj.refreshPosition(this.inputWrapper.container);
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.checkData = function(newProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering && !(this.isListSearched && newProp.dataSource instanceof DataManager)) {
        this.list = null;
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
      }
      this.isListSearched = false;
      var isChangeValue = Object.keys(newProp).indexOf("value") !== -1 && isNullOrUndefined(newProp.value);
      var isChangeText = Object.keys(newProp).indexOf("text") !== -1 && isNullOrUndefined(newProp.text);
      if (this.getModuleName() !== "autocomplete" && this.allowFiltering && (isChangeValue || isChangeText)) {
        this.itemData = null;
      }
      if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
        this.actionData = this.actionCompleteData;
      } else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        this.actionCompleteData = this.getModuleName() === "combobox" ? { ulElement: null, list: null, isUpdated: false } : this.actionCompleteData;
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.updateDataSource = function(props) {
      if (this.inputElement.value !== "" || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {
        this.clearAll(null, props);
      }
      if (this.fields.groupBy && props.fields && !this.isGroupChecking && this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || !(Array.isArray(props.dataSource) && props.dataSource.length === 0)) {
        this.typedString = "";
        this.resetList(this.dataSource);
      }
      if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
        this.checkCustomValue();
      }
    };
    DropDownList2.prototype.checkCustomValue = function() {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();
      this.setProperties({ "text": dataItem.text, "value": dataItem.value });
    };
    DropDownList2.prototype.updateInputFields = function() {
      if (this.getModuleName() === "dropdownlist") {
        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DropDownList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (!isNullOrUndefined(newProp.dataSource) && !this.isTouched && (isNullOrUndefined(newProp.value) && isNullOrUndefined(newProp.index)) && !isNullOrUndefined(this.preselectedIndex)) {
        newProp.index = this.preselectedIndex;
      }
      if (!isNullOrUndefined(newProp.value) || !isNullOrUndefined(newProp.index)) {
        this.isTouched = true;
      }
      if (this.getModuleName() === "dropdownlist") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "query":
          case "dataSource":
            this_1.getSkeletonCount();
            this_1.checkAndResetCache();
            break;
          case "htmlAttributes":
            this_1.setHTMLAttributes();
            break;
          case "width":
            this_1.setEleWidth(newProp.width);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this_1.inputElement);
            break;
          case "filterBarPlaceholder":
            if (this_1.filterInput) {
              Input.setPlaceholder(newProp.filterBarPlaceholder, this_1.filterInput);
            }
            break;
          case "readonly":
            if (this_1.getModuleName() !== "dropdownlist") {
              Input.setReadonly(newProp.readonly, this_1.inputElement);
            }
            this_1.setReadOnly();
            break;
          case "cssClass":
            this_1.setCssClass(newProp.cssClass, oldProp.cssClass);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "enableRtl":
            this_1.setEnableRtl();
            break;
          case "enabled":
            this_1.setEnable();
            break;
          case "text":
            if (newProp.text === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var li = this_1.getElementByText(newProp.text);
              if (!this_1.checkValidLi(li)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.text, oldProp.text, "text");
                } else if (newProp.text && this_1.dataSource instanceof DataManager) {
                  var listLength_1 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.text) ? this_1.fields.value : this_1.fields.text;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.text))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_1);
                      _this.updateValues();
                    } else {
                      _this.setOldText(oldProp.text);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldText(oldProp.text);
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "value":
            if (newProp.value === null) {
              this_1.clearAll();
              break;
            }
            if (this_1.enableVirtualization) {
              this_1.updateValues();
              this_1.updateInputFields();
              this_1.notify("setCurrentViewDataAsync", {
                module: "VirtualScroll"
              });
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
              break;
            }
            this_1.notify("beforeValueChange", { newProp });
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender) {
              var item = this_1.getElementByValue(newProp.value);
              if (!this_1.checkValidLi(item)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.value, oldProp.value, "value");
                } else if (newProp.value && this_1.dataSource instanceof DataManager) {
                  var listLength_2 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.value) ? this_1.fields.text : this_1.fields.value;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.value))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_2);
                      _this.updateValues();
                    } else {
                      _this.setOldValue(oldProp.value);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldValue(oldProp.value);
                }
              }
              this_1.updateInputFields();
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
            }
            break;
          case "index":
            if (newProp.index === null) {
              this_1.clearAll();
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initialRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initialRemoteRender && this_1.liCollections) {
              var element = this_1.liCollections[newProp.index];
              if (!this_1.checkValidLi(element)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.index, oldProp.index, "index");
                } else {
                  this_1.index = oldProp.index;
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "footerTemplate":
            if (this_1.popupObj) {
              this_1.setFooterTemplate(this_1.popupObj.element);
            }
            break;
          case "headerTemplate":
            if (this_1.popupObj) {
              this_1.setHeaderTemplate(this_1.popupObj.element);
            }
            break;
          case "valueTemplate":
            if (!isNullOrUndefined(this_1.itemData) && this_1.valueTemplate !== null) {
              this_1.setValueTemplate();
            }
            break;
          case "allowFiltering":
            if (this_1.allowFiltering) {
              this_1.actionCompleteData = {
                ulElement: this_1.ulElement,
                list: this_1.listData,
                isUpdated: true
              };
              this_1.actionData = this_1.actionCompleteData;
              this_1.updateSelectElementData(this_1.allowFiltering);
            }
            break;
          case "floatLabelType":
            Input.removeFloating(this_1.inputWrapper);
            Input.addFloating(this_1.inputElement, newProp.floatLabelType, this_1.placeholder, this_1.createElement);
            if (!isNullOrUndefined(this_1.inputWrapper.buttons[0]) && this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0] && this_1.floatLabelType !== "Never") {
              this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "showClearButton":
            if (!this_1.inputWrapper.clearButton) {
              Input.setClearButton(newProp.showClearButton, this_1.inputElement, this_1.inputWrapper, null, this_1.createElement);
              this_1.bindClearEvent();
            }
            break;
          default:
            {
              var ddlProps = this_1.getPropObject(prop2, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this_1, ddlProps.newProperty, ddlProps.oldProperty);
            }
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_1(prop);
      }
    };
    DropDownList2.prototype.checkValidLi = function(element) {
      if (this.isValidLI(element)) {
        this.setSelection(element, null);
        return true;
      }
      return false;
    };
    DropDownList2.prototype.setSelectionData = function(newProp, oldProp, prop) {
      var _this = this;
      var li;
      this.updateListValues = function() {
        if (prop === "text") {
          li = _this.getElementByText(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldText(oldProp);
          }
        } else if (prop === "value") {
          li = _this.getElementByValue(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldValue(oldProp);
          }
        } else if (prop === "index") {
          li = _this.liCollections[newProp];
          if (!_this.checkValidLi(li)) {
            _this.index = oldProp;
          }
        }
      };
    };
    DropDownList2.prototype.updatePopupState = function() {
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.showPopup();
      }
    };
    DropDownList2.prototype.setReadOnly = function() {
      if (this.readonly) {
        addClass([this.inputWrapper.container], ["e-readonly"]);
      } else {
        removeClass([this.inputWrapper.container], ["e-readonly"]);
      }
    };
    DropDownList2.prototype.setInputValue = function(newProp, oldProp) {
    };
    DropDownList2.prototype.setCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);
      if (this.popupObj) {
        Input.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    DropDownList2.prototype.getModuleName = function() {
      return "dropdownlist";
    };
    DropDownList2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isReact && this.getModuleName() === "combobox" && this.itemTemplate && this.isCustomFilter && this.isAddNewItemTemplate) {
        this.renderList();
        this.isAddNewItemTemplate = false;
      }
      if (this.isFiltering() && this.dataSource instanceof DataManager && this.actionData.list !== this.actionCompleteData.list && this.actionData.list && this.actionData.ulElement) {
        this.actionCompleteData = this.actionData;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
        this.isActive = true;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll("." + dropDownBaseClasses.li).length <= 0)) {
        if (this.isReact && this.isFiltering() && this.itemTemplate != null) {
          this.isSecondClick = false;
        }
        this.renderList(e);
      }
      if (this.enableVirtualization && this.listData && this.listData.length) {
        if (!isNullOrUndefined(this.value) && (this.getModuleName() === "dropdownlist" || this.getModuleName() === "combobox")) {
          this.removeHover();
        }
        if (!this.beforePopupOpen) {
          this.notify("setCurrentViewDataAsync", {
            module: "VirtualScroll"
          });
        }
      }
      if (this.beforePopupOpen) {
        this.invokeRenderPopup(e);
      }
      if (this.enableVirtualization && !this.allowFiltering && this.selectedValueInfo != null && this.selectedValueInfo.startIndex > 0 && this.value != null) {
        this.notify("dataProcessAsync", {
          module: "VirtualScroll",
          isOpen: true
        });
      }
    };
    DropDownList2.prototype.invokeRenderPopup = function(e) {
      if (Browser.isDevice && this.isFilterLayout()) {
        var proxy_2 = this;
        window.onpopstate = function() {
          proxy_2.hidePopup();
        };
        history.pushState({}, "");
      }
      if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData))) {
        this.renderPopup(e);
      }
    };
    DropDownList2.prototype.renderHightSearch = function() {
    };
    DropDownList2.prototype.hidePopup = function(e) {
      if (this.isEscapeKey && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.inputElement)) {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.isEscapeKey = false;
        if (!isNullOrUndefined(this.index)) {
          var element = this.findListElement(this.ulElement, "li", "data-value", this.value);
          this.selectedLI = this.liCollections[this.index] || element;
          if (this.selectedLI) {
            this.updateSelectedItem(this.selectedLI, null, true);
            if (this.valueTemplate && this.itemData !== null) {
              this.setValueTemplate();
            }
          }
        } else {
          this.resetSelection();
        }
      }
      this.closePopup(0, e);
      var dataItem = this.getItemData();
      var isSelectVal = !isNullOrUndefined(this.selectedLI);
      if (isSelectVal && this.enableVirtualization && this.selectedLI.classList) {
        isSelectVal = this.selectedLI.classList.contains("e-active");
      }
      if (this.inputElement && this.inputElement.value.trim() === "" && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {
        this.isSelectCustom = false;
        this.clearAll(e);
      }
    };
    DropDownList2.prototype.focusIn = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
        return;
      }
      var isFocused = false;
      if (this.preventFocus && Browser.isDevice) {
        this.inputWrapper.container.tabIndex = 1;
        this.inputWrapper.container.focus();
        this.preventFocus = false;
        isFocused = true;
      }
      if (!isFocused) {
        this.targetElement().focus();
      }
      addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      this.onFocus(e);
      if (this.floatLabelType === "Auto") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.focusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.enableVirtualization && (this.getModuleName() === "combobox" || this.getModuleName() === "autocomplete")) {
        this.isTyped = true;
      }
      this.hidePopup(e);
      if (this.targetElement()) {
        this.targetElement().blur();
      }
      removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      if (this.floatLabelType === "Auto" && this.inputElement.value === "") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.destroy = function() {
      this.isActive = false;
      resetIncrementalSearchValues(this.element.id);
      if (this.isReact) {
        this.clearTemplate();
      }
      this.hidePopup();
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.element && !this.element.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      if (this.inputElement) {
        var attrArray = [
          "readonly",
          "aria-disabled",
          "placeholder",
          "aria-labelledby",
          "aria-expanded",
          "autocomplete",
          "aria-readonly",
          "autocapitalize",
          "spellcheck",
          "aria-autocomplete",
          "aria-live",
          "aria-describedby",
          "aria-label"
        ];
        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }
        this.inputElement.setAttribute("tabindex", this.tabIndex);
        this.inputElement.classList.remove("e-input");
        Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.element.style.display = "block";
      if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
        detach(this.inputWrapper.container);
      } else {
        this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
        detach(this.inputWrapper.container);
      }
      this.hiddenElement = null;
      this.inputWrapper = null;
      this.keyboardModule = null;
      this.ulElement = null;
      this.list = null;
      this.popupObj = null;
      this.popupContentElement = null;
      this.rippleFun = null;
      this.selectedLI = null;
      this.liCollections = null;
      this.item = null;
      this.inputWrapper = null;
      this.footer = null;
      this.header = null;
      this.previousSelectedLI = null;
      this.valueTempElement = null;
      this.actionData.ulElement = null;
      if (this.inputElement && !isNullOrUndefined(this.inputElement.onchange)) {
        this.inputElement.onchange = null;
      }
      if (this.isAngular) {
        this.inputElement = null;
      }
      _super.prototype.destroy.call(this);
    };
    DropDownList2.prototype.getItems = function() {
      if (!this.list) {
        if (this.dataSource instanceof DataManager) {
          this.initialRemoteRender = true;
        }
        this.renderList();
      }
      return this.ulElement ? _super.prototype.getItems.call(this) : [];
    };
    DropDownList2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    DropDownList2.prototype.clear = function() {
      this.value = null;
    };
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "cssClass", void 0);
    __decorate5([
      Property("100%")
    ], DropDownList2.prototype, "width", void 0);
    __decorate5([
      Property(true)
    ], DropDownList2.prototype, "enabled", void 0);
    __decorate5([
      Property(false)
    ], DropDownList2.prototype, "enablePersistence", void 0);
    __decorate5([
      Property("300px")
    ], DropDownList2.prototype, "popupHeight", void 0);
    __decorate5([
      Property("100%")
    ], DropDownList2.prototype, "popupWidth", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "placeholder", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "filterBarPlaceholder", void 0);
    __decorate5([
      Property({})
    ], DropDownList2.prototype, "htmlAttributes", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "query", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "valueTemplate", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "headerTemplate", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "footerTemplate", void 0);
    __decorate5([
      Property(false)
    ], DropDownList2.prototype, "allowFiltering", void 0);
    __decorate5([
      Property(false)
    ], DropDownList2.prototype, "readonly", void 0);
    __decorate5([
      Property(false)
    ], DropDownList2.prototype, "enableVirtualization", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "text", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "value", void 0);
    __decorate5([
      Property(null)
    ], DropDownList2.prototype, "index", void 0);
    __decorate5([
      Property("Never")
    ], DropDownList2.prototype, "floatLabelType", void 0);
    __decorate5([
      Property(false)
    ], DropDownList2.prototype, "showClearButton", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "filtering", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "change", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "beforeOpen", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "open", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "close", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "blur", void 0);
    __decorate5([
      Event()
    ], DropDownList2.prototype, "focus", void 0);
    DropDownList2 = __decorate5([
      NotifyPropertyChanges
    ], DropDownList2);
    return DropDownList2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT = "e-hscroll";
var CLS_RTL = "e-rtl";
var CLS_DISABLE = "e-overlay";
var CLS_HSCROLLBAR = "e-hscroll-bar";
var CLS_HSCROLLCON = "e-hscroll-content";
var CLS_NAVARROW = "e-nav-arrow";
var CLS_NAVRIGHTARROW = "e-nav-right-arrow";
var CLS_NAVLEFTARROW = "e-nav-left-arrow";
var CLS_HSCROLLNAV = "e-scroll-nav";
var CLS_HSCROLLNAVRIGHT = "e-scroll-right-nav";
var CLS_HSCROLLNAVLEFT = "e-scroll-left-nav";
var CLS_DEVICE = "e-scroll-device";
var CLS_OVERLAY = "e-scroll-overlay";
var CLS_RIGHTOVERLAY = "e-scroll-right-overlay";
var CLS_LEFTOVERLAY = "e-scroll-left-overlay";
var OVERLAY_MAXWID = 40;
var HScroll = (
  /** @class */
  function(_super) {
    __extends6(HScroll2, _super);
    function HScroll2(options, element) {
      return _super.call(this, options, element) || this;
    }
    HScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var element = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (element.id === "") {
        element.id = getUniqueID("hscroll");
        this.uniqueId = true;
      }
      element.style.display = "block";
      if (this.enableRtl) {
        element.classList.add(CLS_RTL);
      }
    };
    HScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }
      this.setScrollState();
    };
    HScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    HScroll2.prototype.initialize = function() {
      var scrollEle = this.createElement("div", { className: CLS_HSCROLLCON });
      var scrollDiv = this.createElement("div", { className: CLS_HSCROLLBAR });
      scrollDiv.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }
      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = "hidden";
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };
    HScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    HScroll2.prototype.getModuleName = function() {
      return "hScroll";
    };
    HScroll2.prototype.destroy = function() {
      var ele = this.element;
      ele.style.display = "";
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      ele.classList.remove(CLS_RTL);
      var nav = selectAll(".e-" + ele.id + "_nav." + CLS_HSCROLLNAV, ele);
      var overlay = selectAll("." + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function(ele2) {
        detach(ele2);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (nav.length > 0) {
        detach(nav[0]);
        if (!isNullOrUndefined(nav[1])) {
          detach(nav[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    HScroll2.prototype.disable = function(value) {
      var navEles = selectAll(".e-scroll-nav:not(." + CLS_DISABLE + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE);
      } else {
        this.element.classList.remove(CLS_DISABLE);
      }
      [].slice.call(navEles).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    HScroll2.prototype.createOverlay = function(element) {
      var id = element.id.concat("_nav");
      var rightOverlayEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_RIGHTOVERLAY });
      var clsRight = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement("div", { id: id.concat("_right"), className: clsRight });
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_LEFTOVERLAY });
      if (this.ieCheck) {
        rightEle.classList.add("e-ie-align");
      }
      element.appendChild(rightOverlayEle);
      element.appendChild(rightEle);
      element.insertBefore(leftEle, element.firstChild);
      this.eventBinding([rightEle]);
    };
    HScroll2.prototype.createNavIcon = function(element) {
      var id = element.id.concat("_nav");
      var clsRight = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightAttributes = { "role": "button", "id": id.concat("_right"), "aria-label": "Scroll right" };
      var nav = this.createElement("div", { className: clsRight, attrs: rightAttributes });
      nav.setAttribute("aria-disabled", "false");
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      var clsLeft = "e-" + element.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVLEFT);
      var leftAttributes = { "role": "button", "id": id.concat("_left"), "aria-label": "Scroll left" };
      var navEle = this.createElement("div", { className: clsLeft + " " + CLS_DISABLE, attrs: leftAttributes });
      navEle.setAttribute("aria-disabled", "true");
      var navLeftItem = this.createElement("div", { className: CLS_NAVLEFTARROW + " " + CLS_NAVARROW + " e-icons" });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element.appendChild(nav);
      element.insertBefore(navEle, element.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navEle.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navEle]);
    };
    HScroll2.prototype.onKeyPress = function(e) {
      var _this = this;
      if (e.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, e.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    HScroll2.prototype.onKeyUp = function(e) {
      if (e.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    HScroll2.prototype.eventBinding = function(ele) {
      var _this = this;
      [].slice.call(ele).forEach(function(el) {
        new Touch(el, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        el.addEventListener("keydown", _this.onKeyPress.bind(_this));
        el.addEventListener("keyup", _this.onKeyUp.bind(_this));
        el.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        el.addEventListener("touchend", _this.repeatScroll.bind(_this));
        el.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(el, "click", _this.clickEventHandler, _this);
      });
    };
    HScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    HScroll2.prototype.tabHoldHandler = function(e) {
      var _this = this;
      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDis, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    HScroll2.prototype.contains = function(ele, className) {
      return ele.classList.contains(className);
    };
    HScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var rootEle = this.element;
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_HSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW).classList;
      }
      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }
      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList2.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      } else {
        if (classList2.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      }
    };
    HScroll2.prototype.clickEventHandler = function(e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };
    HScroll2.prototype.swipeHandler = function(e) {
      var swipeEle = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Left") {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === "Right") {
            swipeEle.scrollLeft -= distance * step;
          }
          start -= 0.5;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
      if (this.enableRtl && this.scrollEle.scrollLeft > 0) {
        this.scrollEle.scrollLeft = 0;
      }
    };
    HScroll2.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY, this.element)).forEach(function(el) {
          scrollVal -= el.offsetWidth;
        });
      }
      var animate = function() {
        var scrollValue;
        var scrollStep;
        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }
        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);
          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.touchHandler = function(e) {
      var ele = this.scrollEle;
      var distance = e.distanceX;
      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }
      if (e.scrollDirection === "Left") {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === "Right") {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };
    HScroll2.prototype.arrowDisabling = function(addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW);
        if (isNullOrUndefined(addDisable)) {
          classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else if (addDisable && removeDisable) {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute("aria-disabled", "true");
        addDisable.removeAttribute("tabindex");
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute("aria-disabled", "false");
        removeDisable.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    HScroll2.prototype.scrollHandler = function(e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector("." + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector("." + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;
      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }
      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
        }
        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + "px";
        } else {
          leftOverlay.style.width = "40px";
        }
        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px";
        } else {
          rightOverlay.style.width = "40px";
        }
      }
      if (scrollLeft === 0) {
        this.arrowDisabling(navLeftEle, navRightEle);
      } else if (Math.ceil(width + scrollLeft + 0.1) >= target.scrollWidth) {
        this.arrowDisabling(navRightEle, navLeftEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_HSCROLLNAV + "." + CLS_DISABLE);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    HScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };
    __decorate6([
      Property(null)
    ], HScroll2.prototype, "scrollStep", void 0);
    HScroll2 = __decorate6([
      NotifyPropertyChanges
    ], HScroll2);
    return HScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT2 = "e-vscroll";
var CLS_RTL2 = "e-rtl";
var CLS_DISABLE2 = "e-overlay";
var CLS_VSCROLLBAR = "e-vscroll-bar";
var CLS_VSCROLLCON = "e-vscroll-content";
var CLS_NAVARROW2 = "e-nav-arrow";
var CLS_NAVUPARROW = "e-nav-up-arrow";
var CLS_NAVDOWNARROW = "e-nav-down-arrow";
var CLS_VSCROLLNAV = "e-scroll-nav";
var CLS_VSCROLLNAVUP = "e-scroll-up-nav";
var CLS_VSCROLLNAVDOWN = "e-scroll-down-nav";
var CLS_DEVICE2 = "e-scroll-device";
var CLS_OVERLAY2 = "e-scroll-overlay";
var CLS_UPOVERLAY = "e-scroll-up-overlay";
var CLS_DOWNOVERLAY = "e-scroll-down-overlay";
var OVERLAY_MAXWID2 = 40;
var VScroll = (
  /** @class */
  function(_super) {
    __extends7(VScroll2, _super);
    function VScroll2(options, element) {
      return _super.call(this, options, element) || this;
    }
    VScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (ele.id === "") {
        ele.id = getUniqueID("vscroll");
        this.uniqueId = true;
      }
      ele.style.display = "block";
      if (this.enableRtl) {
        ele.classList.add(CLS_RTL2);
      }
    };
    VScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollEventHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE2);
        this.createOverlayElement(this.element);
      }
      this.setScrollState();
      EventHandler.add(this.element, "wheel", this.wheelEventHandler, this);
    };
    VScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    VScroll2.prototype.initialize = function() {
      var scrollCnt = createElement("div", { className: CLS_VSCROLLCON });
      var scrollBar = createElement("div", { className: CLS_VSCROLLBAR });
      scrollBar.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }
      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflow = "hidden";
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };
    VScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    VScroll2.prototype.getModuleName = function() {
      return "vScroll";
    };
    VScroll2.prototype.destroy = function() {
      var el = this.element;
      el.style.display = "";
      removeClass([this.element], [CLS_ROOT2, CLS_DEVICE2, CLS_RTL2]);
      var navs = selectAll(".e-" + el.id + "_nav." + CLS_VSCROLLNAV, el);
      var overlays = selectAll("." + CLS_OVERLAY2, el);
      [].slice.call(overlays).forEach(function(ele) {
        detach(ele);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (navs.length > 0) {
        detach(navs[0]);
        if (!isNullOrUndefined(navs[1])) {
          detach(navs[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollEventHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    VScroll2.prototype.disable = function(value) {
      var navEle = selectAll(".e-scroll-nav:not(." + CLS_DISABLE2 + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE2);
      } else {
        this.element.classList.remove(CLS_DISABLE2);
      }
      [].slice.call(navEle).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    VScroll2.prototype.createOverlayElement = function(element) {
      var id = element.id.concat("_nav");
      var downOverlayEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_DOWNOVERLAY });
      var clsDown = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var downEle = createElement("div", { id: id.concat("down"), className: clsDown });
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      downEle.appendChild(navItem);
      var upEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_UPOVERLAY });
      if (this.ieCheck) {
        downEle.classList.add("e-ie-align");
      }
      element.appendChild(downOverlayEle);
      element.appendChild(downEle);
      element.insertBefore(upEle, element.firstChild);
      this.eventBinding([downEle]);
    };
    VScroll2.prototype.createNavIcon = function(element) {
      var id = element.id.concat("_nav");
      var clsDown = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var nav = createElement("div", { id: id.concat("_down"), className: clsDown });
      nav.setAttribute("aria-disabled", "false");
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      var clsUp = "e-" + element.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVUP);
      var navElement = createElement("div", { id: id.concat("_up"), className: clsUp + " " + CLS_DISABLE2 });
      navElement.setAttribute("aria-disabled", "true");
      var navUpItem = createElement("div", { className: CLS_NAVUPARROW + " " + CLS_NAVARROW2 + " e-icons" });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      element.appendChild(nav);
      element.insertBefore(navElement, element.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navElement.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navElement]);
    };
    VScroll2.prototype.onKeyPress = function(ev) {
      var _this = this;
      if (ev.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, ev.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    VScroll2.prototype.onKeyUp = function(ev) {
      if (ev.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    VScroll2.prototype.eventBinding = function(element) {
      var _this = this;
      [].slice.call(element).forEach(function(ele) {
        new Touch(ele, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        ele.addEventListener("keydown", _this.onKeyPress.bind(_this));
        ele.addEventListener("keyup", _this.onKeyUp.bind(_this));
        ele.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        ele.addEventListener("touchend", _this.repeatScroll.bind(_this));
        ele.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(ele, "click", _this.clickEventHandler, _this);
      });
    };
    VScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    VScroll2.prototype.tabHoldHandler = function(ev) {
      var _this = this;
      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDistance, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    VScroll2.prototype.contains = function(element, className) {
      return element.classList.contains(className);
    };
    VScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_VSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW2).classList;
      }
      if (classList2.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, "add", isContinuous);
      } else if (classList2.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, "", isContinuous);
      }
    };
    VScroll2.prototype.clickEventHandler = function(event2) {
      this.eleScrolling(this.scrollStep, event2.target, false);
    };
    VScroll2.prototype.wheelEventHandler = function(e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? "add" : "", false);
    };
    VScroll2.prototype.swipeHandler = function(e) {
      var swipeElement = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Up") {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === "Down") {
            swipeElement.scrollTop -= distance * step;
          }
          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };
    VScroll2.prototype.frameScrollRequest = function(scrollValue, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY2, this.element)).forEach(function(el) {
          scrollValue -= el.offsetHeight;
        });
      }
      var animate = function() {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);
          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.touchHandler = function(e) {
      var el = this.scrollEle;
      var distance = e.distanceY;
      if (e.scrollDirection === "Up") {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === "Down") {
        el.scrollTop = el.scrollTop - distance;
      }
    };
    VScroll2.prototype.arrowDisabling = function(addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW2);
        if (isNullOrUndefined(addDisableCls)) {
          classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE2);
        addDisableCls.setAttribute("aria-disabled", "true");
        addDisableCls.removeAttribute("tabindex");
        removeDisableCls.classList.remove(CLS_DISABLE2);
        removeDisableCls.setAttribute("aria-disabled", "false");
        removeDisableCls.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    VScroll2.prototype.scrollEventHandler = function(e) {
      var target = e.target;
      var height = target.offsetHeight;
      var navUpEle = this.element.querySelector("." + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector("." + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector("." + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector("." + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;
      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }
      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID2) {
          upOverlay.style.height = scrollTop + "px";
        } else {
          upOverlay.style.height = "40px";
        }
        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID2) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + "px";
        } else {
          downOverlay.style.height = "40px";
        }
      }
      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + 0.1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_VSCROLLNAV + "." + CLS_DISABLE2);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE2);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    VScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(CLS_RTL2);
            } else {
              this.element.classList.remove(CLS_RTL2);
            }
            break;
        }
      }
    };
    __decorate7([
      Property(null)
    ], VScroll2.prototype, "scrollStep", void 0);
    VScroll2 = __decorate7([
      NotifyPropertyChanges
    ], VScroll2);
    return VScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js
function addScrolling(createElement2, container, content, scrollType, enableRtl, offset) {
  var containerOffset;
  var contentOffset;
  var parentElem = container.parentElement;
  if (scrollType === "vscroll") {
    containerOffset = offset || container.getBoundingClientRect().height;
    contentOffset = content.getBoundingClientRect().height;
  } else {
    containerOffset = container.getBoundingClientRect().width;
    contentOffset = content.getBoundingClientRect().width;
  }
  if (containerOffset < contentOffset) {
    return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
  } else if (parentElem) {
    var width = parentElem.getBoundingClientRect().width;
    if (width < containerOffset && scrollType === "hscroll") {
      contentOffset = width;
      container.style.maxWidth = width + "px";
      return createScrollbar(createElement2, container, content, scrollType, enableRtl, offset);
    }
    return content;
  } else {
    return content;
  }
}
function createScrollbar(createElement2, container, content, scrollType, enableRtl, offset) {
  var scrollEle = createElement2("div", { className: "e-menu-" + scrollType });
  container.appendChild(scrollEle);
  scrollEle.appendChild(content);
  if (offset) {
    scrollEle.style.overflow = "hidden";
    scrollEle.style.height = offset + "px";
  } else {
    scrollEle.style.maxHeight = container.style.maxHeight;
    container.style.overflow = "hidden";
  }
  var scrollObj;
  if (scrollType === "vscroll") {
    scrollObj = new VScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetHeight / 2;
  } else {
    scrollObj = new HScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetWidth;
  }
  return scrollEle;
}
function destroyScroll(scrollObj, element, skipEle) {
  if (scrollObj) {
    var menu = select(".e-menu-parent", element);
    if (menu) {
      if (!skipEle || skipEle === menu) {
        scrollObj.destroy();
        element.parentElement.appendChild(menu);
        detach(element);
      }
    } else {
      scrollObj.destroy();
      detach(element);
    }
  }
}

// node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ENTER = "enter";
var ESCAPE = "escape";
var FOCUSED = "e-focused";
var HEADER = "e-menu-header";
var SELECTED = "e-selected";
var SEPARATOR = "e-separator";
var UPARROW = "uparrow";
var DOWNARROW = "downarrow";
var LEFTARROW = "leftarrow";
var RIGHTARROW = "rightarrow";
var HOME = "home";
var END = "end";
var TAB = "tab";
var CARET = "e-caret";
var ITEM = "e-menu-item";
var DISABLED = "e-disabled";
var HIDE2 = "e-menu-hide";
var ICONS = "e-icons";
var RTL3 = "e-rtl";
var POPUP = "e-menu-popup";
var TEMPLATE_PROPERTY = "Template";
var FieldSettings2 = (
  /** @class */
  function(_super) {
    __extends8(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("id")
    ], FieldSettings3.prototype, "itemId", void 0);
    __decorate8([
      Property("parentId")
    ], FieldSettings3.prototype, "parentId", void 0);
    __decorate8([
      Property("text")
    ], FieldSettings3.prototype, "text", void 0);
    __decorate8([
      Property("iconCss")
    ], FieldSettings3.prototype, "iconCss", void 0);
    __decorate8([
      Property("url")
    ], FieldSettings3.prototype, "url", void 0);
    __decorate8([
      Property("separator")
    ], FieldSettings3.prototype, "separator", void 0);
    __decorate8([
      Property("items")
    ], FieldSettings3.prototype, "children", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var MenuItem = (
  /** @class */
  function(_super) {
    __extends8(MenuItem2, _super);
    function MenuItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property(null)
    ], MenuItem2.prototype, "iconCss", void 0);
    __decorate8([
      Property("")
    ], MenuItem2.prototype, "id", void 0);
    __decorate8([
      Property(false)
    ], MenuItem2.prototype, "separator", void 0);
    __decorate8([
      Collection([], MenuItem2)
    ], MenuItem2.prototype, "items", void 0);
    __decorate8([
      Property("")
    ], MenuItem2.prototype, "text", void 0);
    __decorate8([
      Property("")
    ], MenuItem2.prototype, "url", void 0);
    return MenuItem2;
  }(ChildProperty)
);
var MenuAnimationSettings = (
  /** @class */
  function(_super) {
    __extends8(MenuAnimationSettings2, _super);
    function MenuAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("SlideDown")
    ], MenuAnimationSettings2.prototype, "effect", void 0);
    __decorate8([
      Property(400)
    ], MenuAnimationSettings2.prototype, "duration", void 0);
    __decorate8([
      Property("ease")
    ], MenuAnimationSettings2.prototype, "easing", void 0);
    return MenuAnimationSettings2;
  }(ChildProperty)
);
var MenuBase = (
  /** @class */
  function(_super) {
    __extends8(MenuBase2, _super);
    function MenuBase2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.navIdx = [];
      _this.animation = new Animation({});
      _this.isTapHold = false;
      _this.tempItem = [];
      _this.showSubMenuOn = "Auto";
      return _this;
    }
    MenuBase2.prototype.preRender = function() {
      if (!this.isMenu) {
        var ul = void 0;
        if (this.element.tagName === "EJS-CONTEXTMENU") {
          ul = this.createElement("ul", {
            id: getUniqueID(this.getModuleName()),
            className: "e-control e-lib e-" + this.getModuleName()
          });
          var ejInst = getValue("ej2_instances", this.element);
          removeClass([this.element], ["e-control", "e-lib", "e-" + this.getModuleName()]);
          this.clonedElement = this.element;
          this.element = ul;
          setValue("ej2_instances", ejInst, this.element);
        } else {
          ul = this.createElement("ul", { id: getUniqueID(this.getModuleName()) });
          append([].slice.call(this.element.cloneNode(true).children), ul);
          var refEle = this.element.nextElementSibling;
          if (refEle) {
            this.element.parentElement.insertBefore(ul, refEle);
          } else {
            this.element.parentElement.appendChild(ul);
          }
          this.clonedElement = ul;
        }
        this.clonedElement.style.display = "none";
      }
      if (this.element.tagName === "EJS-MENU") {
        var ele = this.element;
        var ejInstance = getValue("ej2_instances", ele);
        var ul = this.createElement("ul");
        var wrapper = this.createElement("EJS-MENU", { className: "e-" + this.getModuleName() + "-wrapper" });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = ul;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.clonedElement = wrapper;
        this.element = ele;
        if (!this.element.id) {
          this.element.id = getUniqueID(this.getModuleName());
        }
      }
    };
    MenuBase2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderItems();
      this.wireEvents();
      this.renderComplete();
      var wrapper = this.getWrapper();
      if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {
        requestAnimationFrame(function() {
          addScrolling(_this.createElement, wrapper, _this.element, "hscroll", _this.enableRtl);
        });
      }
    };
    MenuBase2.prototype.initialize = function() {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        wrapper = this.createElement("div", { className: "e-" + this.getModuleName() + "-wrapper" });
        if (this.isMenu) {
          this.element.parentElement.insertBefore(wrapper, this.element);
        } else {
          document.body.appendChild(wrapper);
        }
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL3);
      }
      wrapper.appendChild(this.element);
      if (this.isMenu && this.hamburgerMode) {
        if (!this.target) {
          this.createHeaderContainer(wrapper);
        }
      }
      this.defaultOption = this.showItemOnClick;
    };
    MenuBase2.prototype.renderItems = function() {
      if (!this.items.length) {
        var items = ListBase.createJsonFromElement(this.element, { fields: { child: "items" } });
        this.setProperties({ items }, true);
        if (isBlazor() && !this.isMenu) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = "";
        }
      }
      var ul = this.createItems(this.items);
      append(Array.prototype.slice.call(ul.children), this.element);
      this.element.classList.add("e-menu-parent");
      if (this.isMenu) {
        if (!this.hamburgerMode && this.element.classList.contains("e-vertical")) {
          this.setBlankIconStyle(this.element);
        }
        if (this.enableScrolling) {
          var wrapper = this.getWrapper();
          if (this.element.classList.contains("e-vertical")) {
            addScrolling(this.createElement, wrapper, this.element, "vscroll", this.enableRtl);
          } else {
            addScrolling(this.createElement, wrapper, this.element, "hscroll", this.enableRtl);
          }
        }
      } else {
        this.element.parentElement.setAttribute("role", "dialog");
        this.element.parentElement.setAttribute("aria-label", "context menu");
      }
    };
    MenuBase2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      if (this.target) {
        var target = void 0;
        var targetElems = selectAll(this.target);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.add(target, "click", this.menuHeaderClickHandler, this);
          } else {
            if (Browser.isIos) {
              new Touch(target, { tapHold: this.touchHandler.bind(this) });
            } else {
              EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
            }
          }
        }
        this.targetElement = target;
        if (!this.isMenu) {
          EventHandler.add(this.targetElement, "mousewheel DOMMouseScroll", this.scrollHandler, this);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_1 = _a[_i];
            EventHandler.add(parent_1, "mousewheel DOMMouseScroll", this.scrollHandler, this);
          }
        }
      }
      if (!Browser.isDevice) {
        this.delegateMoverHandler = this.moverHandler.bind(this);
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
        EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this);
        EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this);
      }
      this.delegateClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHandler, this);
      this.wireKeyboardEvent(wrapper);
      this.rippleFn = rippleEffect(wrapper, { selector: "." + ITEM });
    };
    MenuBase2.prototype.wireKeyboardEvent = function(element) {
      var keyConfigs = {
        downarrow: DOWNARROW,
        uparrow: UPARROW,
        enter: ENTER,
        leftarrow: LEFTARROW,
        rightarrow: RIGHTARROW,
        escape: ESCAPE
      };
      if (this.isMenu) {
        keyConfigs.home = HOME;
        keyConfigs.end = END;
        keyConfigs.tab = TAB;
      }
      new KeyboardEvents(element, {
        keyAction: this.keyBoardHandler.bind(this),
        keyConfigs
      });
    };
    MenuBase2.prototype.mouseDownHandler = function(e) {
      if (closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && !closest(e.target, ".e-" + this.getModuleName() + "-popup")) {
        this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
      }
    };
    MenuBase2.prototype.keyHandler = function(e) {
      if (e.keyCode === 38 || e.keyCode === 40) {
        if (e.target && (e.target.classList.contains("e-contextmenu") || e.target.classList.contains("e-menu-item"))) {
          e.preventDefault();
        }
      }
    };
    MenuBase2.prototype.keyBoardHandler = function(e) {
      var actionName = "";
      var trgt = e.target;
      var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
      e.preventDefault();
      if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains("e-scroll-nav")) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, ".e-" + this.getModuleName() + "-wrapper")]);
      }
      if (actionNeeded) {
        switch (e.action) {
          case RIGHTARROW:
            actionName = RIGHTARROW;
            e.action = DOWNARROW;
            break;
          case LEFTARROW:
            actionName = LEFTARROW;
            e.action = UPARROW;
            break;
          case DOWNARROW:
            actionName = DOWNARROW;
            e.action = RIGHTARROW;
            break;
          case UPARROW:
            actionName = UPARROW;
            e.action = "";
            break;
        }
      } else if (this.enableRtl) {
        switch (e.action) {
          case LEFTARROW:
            actionNeeded = true;
            actionName = LEFTARROW;
            e.action = RIGHTARROW;
            break;
          case RIGHTARROW:
            actionNeeded = true;
            actionName = RIGHTARROW;
            e.action = LEFTARROW;
            break;
        }
      }
      switch (e.action) {
        case DOWNARROW:
        case UPARROW:
        case END:
        case HOME:
        case TAB:
          this.upDownKeyHandler(e);
          break;
        case RIGHTARROW:
          this.rightEnterKeyHandler(e);
          break;
        case LEFTARROW:
          this.leftEscKeyHandler(e);
          break;
        case ENTER:
          if (this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            this.rightEnterKeyHandler(e);
          }
          break;
        case ESCAPE:
          this.leftEscKeyHandler(e);
          break;
      }
      if (actionNeeded) {
        e.action = actionName;
      }
    };
    MenuBase2.prototype.upDownKeyHandler = function(e) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        if (e.action !== END && e.action !== HOME) {
          fliIdx = this.getIdx(cul, fli);
        }
        fli.classList.remove(FOCUSED);
        if (e.action !== END && e.action !== HOME) {
          if (e.action === DOWNARROW) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
            fliIdx = defaultIdx;
          }
        }
      }
      var cli = cul.children[fliIdx];
      fliIdx = this.isValidLI(cli, fliIdx, e.action);
      cul.children[fliIdx].classList.add(FOCUSED);
      cul.children[fliIdx].focus();
    };
    MenuBase2.prototype.isValidLI = function(cli, index, action) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE2)) {
        if (action === DOWNARROW && index === cul.childElementCount - 1) {
          index = defaultIdx;
        } else if (action === UPARROW && index === 0) {
          index = defaultIdx;
        } else if (action === DOWNARROW || action === RIGHTARROW) {
          index++;
        } else {
          index--;
        }
      }
      cli = cul.children[index];
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED) || cli.classList.contains(HIDE2)) {
        index = this.isValidLI(cli, index, action);
      }
      return index;
    };
    MenuBase2.prototype.getUlByNavIdx = function(navIdxLen) {
      var _this = this;
      if (navIdxLen === void 0) {
        navIdxLen = this.navIdx.length;
      }
      if (this.isMenu) {
        var popup = [this.getWrapper()].concat([].slice.call(selectAll("." + POPUP)))[navIdxLen];
        var popups_1 = [];
        var allPopup = selectAll("." + POPUP);
        allPopup.forEach(function(elem) {
          if (_this.element.id === elem.id.split("-")[2] || elem.id.split("-")[2] + "-" + elem.id.split("-")[3]) {
            popups_1.push(elem);
          }
        });
        popup = [this.getWrapper()].concat([].slice.call(popups_1))[navIdxLen];
        return isNullOrUndefined(popup) ? null : select(".e-menu-parent", popup);
      } else {
        return this.getWrapper().children[navIdxLen];
      }
    };
    MenuBase2.prototype.rightEnterKeyHandler = function(e) {
      var eventArgs;
      var cul = this.getUlByNavIdx();
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        var fliIdx = this.getIdx(cul, fli);
        var navIdx = this.navIdx.concat(fliIdx);
        var item = this.getItem(navIdx);
        if (item.items.length) {
          this.navIdx.push(fliIdx);
          this.keyType = "right";
          this.action = e.action;
          this.openMenu(fli, item, -1, -1, e);
        } else {
          if (e.action === ENTER) {
            if (this.isMenu && this.navIdx.length === 0) {
              this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
            } else {
              fli.classList.remove(FOCUSED);
            }
            fli.classList.add(SELECTED);
            eventArgs = { element: fli, item, event: e };
            this.trigger("select", eventArgs);
            var aEle = fli.querySelector(".e-menu-url");
            if (item.url && aEle) {
              switch (aEle.getAttribute("target")) {
                case "_blank":
                  window.open(item.url, "_blank");
                  break;
                case "_parent":
                  window.parent.location.href = item.url;
                  break;
                default:
                  window.location.href = item.url;
              }
            }
            this.closeMenu(null, e);
            var sli = this.getLIByClass(this.getUlByNavIdx(), SELECTED);
            if (sli) {
              sli.classList.add(FOCUSED);
              sli.focus();
            }
          }
        }
      }
    };
    MenuBase2.prototype.leftEscKeyHandler = function(e) {
      if (this.navIdx.length) {
        this.keyType = "left";
        this.closeMenu(this.navIdx.length, e);
      } else {
        if (e.action === ESCAPE) {
          this.closeMenu(null, e);
        }
      }
    };
    MenuBase2.prototype.scrollHandler = function(e) {
      this.closeMenu(null, e);
    };
    MenuBase2.prototype.touchHandler = function(e) {
      this.isTapHold = true;
      this.cmenuHandler(e.originalEvent);
    };
    MenuBase2.prototype.cmenuHandler = function(e) {
      e.preventDefault();
      this.currentTarget = e.target;
      this.isCMenu = true;
      this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
      this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
      this.closeMenu(null, e);
      if (this.isCMenu) {
        if (this.canOpen(e.target)) {
          this.openMenu(null, null, this.pageY, this.pageX, e);
        }
        this.isCMenu = false;
      }
    };
    MenuBase2.prototype.closeMenu = function(ulIndex, e, isIterated) {
      var _this = this;
      if (ulIndex === void 0) {
        ulIndex = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (this.isMenuVisible()) {
        var sli = void 0;
        var item_1;
        var wrapper_1 = this.getWrapper();
        var beforeCloseArgs = void 0;
        var items_1;
        var popups = this.getPopups();
        var isClose = false;
        var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;
        var ul_1 = this.isMenu && cnt !== 1 ? select(".e-ul", popups[cnt - 2]) : selectAll(".e-menu-parent", wrapper_1)[cnt - 1];
        if (this.isMenu && ul_1.classList.contains("e-menu")) {
          sli = this.getLIByClass(ul_1, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          isClose = true;
        }
        if (!isClose) {
          var liElem_1 = e && e.target && this.getLI(e.target);
          if (liElem_1) {
            this.cli = liElem_1;
          } else {
            this.cli = ul_1.children[0];
          }
          item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
          items_1 = item_1 ? item_1.items : this.items;
          beforeCloseArgs = { element: ul_1, parentItem: item_1, items: items_1, event: e, cancel: false, isFocused: true };
          this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            var popupEle;
            var closeArgs;
            var popupId = "";
            var popupObj;
            var isOpen = !observedCloseArgs.cancel;
            if (isOpen || _this.isCMenu) {
              if (_this.isMenu) {
                popupEle = closest(ul_1, "." + POPUP);
                if (_this.hamburgerMode) {
                  popupEle.parentElement.style.minHeight = "";
                  closest(ul_1, ".e-menu-item").setAttribute("aria-expanded", "false");
                }
                _this.unWireKeyboardEvent(popupEle);
                destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);
                popupObj = getInstance(popupEle, Popup);
                popupObj.hide();
                popupId = popupEle.id;
                popupObj.destroy();
                detach(popupEle);
              } else {
                _this.toggleAnimation(ul_1, false);
              }
              closeArgs = { element: ul_1, parentItem: item_1, items: items_1 };
              _this.trigger("onClose", closeArgs);
              _this.navIdx.pop();
              if (_this.navIdx.length === 0 && e && e.type === "keyup") {
                _this.showSubMenu = false;
              }
              if (!_this.isMenu) {
                EventHandler.remove(ul_1, "keydown", _this.keyHandler);
                if (_this.keyType === "right") {
                  _this.keyType = "";
                }
              }
            }
            _this.updateReactTemplate();
            var trgtliId;
            var closedLi;
            var trgtLi;
            var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();
            if (_this.isCMenu) {
              if (_this.canOpen(e.target)) {
                _this.openMenu(null, null, _this.pageY, _this.pageX, e);
              }
              _this.isCMenu = false;
            }
            if (_this.isMenu && trgtpopUp && popupId.length) {
              trgtliId = new RegExp("(.*)-ej2menu-" + _this.element.id + "-popup").exec(popupId)[1];
              closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            } else if (trgtpopUp) {
              closedLi = trgtpopUp.querySelector(".e-menu-item.e-selected");
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            }
            var submenus = liElem_1 && liElem_1.querySelectorAll(".e-menu-item");
            if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {
              _this.afterCloseMenu(e);
            } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== "left" && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {
              var ele = e && (e.target.classList.contains("e-vscroll") || e.target.classList.contains("e-scroll-nav")) ? closest(e.target, ".e-menu-wrapper") : null;
              if (ele) {
                ele = ele.querySelector(".e-menu-item");
                if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);
                }
              } else {
                if (!(e && e.target.classList.contains("e-nav-arrow"))) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
                }
              }
            } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {
              _this.closeMenu(null, e);
            } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {
              _this.closeMenu(null, e);
            } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {
              _this.isMenusClosed = true;
              _this.closeMenu(0, e);
            } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, ".e-menu-parent.e-control")) {
              _this.closeMenu(0, e);
            } else if (isOpen && !_this.isMenu && selectAll(".e-menu-parent", wrapper_1)[ulIndex - 1] && e.which === 3) {
              _this.closeMenu(null, e);
            } else {
              if (isOpen && (_this.keyType === "right" || _this.keyType === "click")) {
                _this.afterCloseMenu(e);
              } else {
                var cul = _this.getUlByNavIdx();
                var sli_1 = _this.getLIByClass(cul, SELECTED);
                if (sli_1) {
                  sli_1.setAttribute("aria-expanded", "false");
                  sli_1.classList.remove(SELECTED);
                  if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === "left") {
                    sli_1.classList.add(FOCUSED);
                    if (!e.target || !e.target.classList.contains("e-edit-template")) {
                      sli_1.focus();
                    }
                  }
                }
                if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute("aria-expanded") === "false" && liElem_1.getAttribute("aria-haspopup") === "true") {
                  if (closest(liElem_1, ".e-menu-parent.e-control")) {
                    _this.navIdx = [];
                  } else {
                    _this.navIdx.pop();
                  }
                  _this.navIdx.push(_this.cliIdx);
                  var item_2 = _this.getItem(_this.navIdx);
                  liElem_1.setAttribute("aria-expanded", "true");
                  _this.openMenu(liElem_1, item_2, -1, -1, e);
                }
              }
              if (_this.navIdx.length < 1) {
                if (_this.showSubMenuOn === "Hover" || _this.showSubMenuOn === "Click") {
                  _this.showItemOnClick = _this.defaultOption;
                  _this.showSubMenuOn = "Auto";
                }
              }
            }
            _this.removeStateWrapper();
          });
        }
      }
    };
    MenuBase2.prototype.updateReactTemplate = function() {
      if (this.isReact && this.template && this.navIdx.length === 0) {
        var portals = this.portals.splice(0, this.items.length);
        this.clearTemplate(["template"]);
        this.portals = portals;
        this.renderReactTemplates();
      }
    };
    MenuBase2.prototype.getMenuItemModel = function(item, level) {
      if (isNullOrUndefined(item)) {
        return null;
      }
      if (isNullOrUndefined(level)) {
        level = 0;
      }
      var fields = this.getFields(level);
      return {
        text: item[fields.text],
        id: item[fields.id],
        items: item[fields.child],
        separator: item[fields.separator],
        iconCss: item[fields.iconCss],
        url: item[fields.url]
      };
    };
    MenuBase2.prototype.getPopups = function() {
      var _this = this;
      var popups = [];
      [].slice.call(document.querySelectorAll("." + POPUP)).forEach(function(elem) {
        if (!isNullOrUndefined(elem.querySelector("." + ITEM)) && _this.getIndex(elem.querySelector("." + ITEM).id, true).length) {
          popups.push(elem);
        }
      });
      return popups;
    };
    MenuBase2.prototype.isMenuVisible = function() {
      return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
    };
    MenuBase2.prototype.canOpen = function(target) {
      var canOpen = true;
      if (this.filter) {
        canOpen = false;
        var filter = this.filter.split(" ");
        for (var i = 0, len = filter.length; i < len; i++) {
          if (closest(target, "." + filter[i])) {
            canOpen = true;
            break;
          }
        }
      }
      return canOpen;
    };
    MenuBase2.prototype.openMenu = function(li, item, top, left, e, target) {
      var _this = this;
      if (top === void 0) {
        top = 0;
      }
      if (left === void 0) {
        left = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (target === void 0) {
        target = this.targetElement;
      }
      var wrapper = this.getWrapper();
      this.lItem = li;
      var elemId = this.element.id !== "" ? this.element.id : "menu";
      this.isMenusClosed = false;
      if (isNullOrUndefined(top)) {
        top = -1;
      }
      if (isNullOrUndefined(left)) {
        left = -1;
      }
      if (li) {
        this.uList = this.createItems(item[this.getField("children", this.navIdx.length - 1)]);
        if (!this.isMenu && Browser.isDevice) {
          wrapper.lastChild.style.display = "none";
          var data = {
            text: item[this.getField("text")].toString(),
            iconCss: ICONS + " e-previous"
          };
          var hdata = new MenuItem(this.items[0], "items", data, true);
          var hli = this.createItems([hdata]).children[0];
          hli.classList.add(HEADER);
          this.uList.insertBefore(hli, this.uList.children[0]);
        }
        if (this.isMenu) {
          this.popupWrapper = this.createElement("div", {
            className: "e-" + this.getModuleName() + "-wrapper " + POPUP,
            id: li.id + "-ej2menu-" + elemId + "-popup"
          });
          if (this.hamburgerMode) {
            top = li.offsetHeight;
            li.appendChild(this.popupWrapper);
          } else {
            document.body.appendChild(this.popupWrapper);
          }
          this.isNestedOrVertical = this.element.classList.contains("e-vertical") || this.navIdx.length !== 1;
          this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);
          if (this.template) {
            this.renderReactTemplates();
          }
          if (this.hamburgerMode) {
            this.calculateIndentSize(this.uList, li);
          } else {
            if (this.cssClass) {
              addClass([this.popupWrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            this.popupObj.hide();
          }
          if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, "menu");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, "menu");
          }
        } else {
          this.uList.style.zIndex = this.element.style.zIndex;
          wrapper.appendChild(this.uList);
          if (!this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, "none");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
          }
        }
      } else {
        this.uList = this.element;
        this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();
        if (isNullOrUndefined(e)) {
          var ev = document.createEvent("MouseEvents");
          ev.initEvent("click", true, false);
          var targetEvent = this.copyObject(ev, {});
          targetEvent.target = targetEvent.srcElement = target;
          targetEvent.currentTarget = target;
          this.triggerBeforeOpen(li, this.uList, item, targetEvent, top, left, "none");
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
        }
      }
    };
    MenuBase2.prototype.copyObject = function(source, destination) {
      for (var prop in source) {
        destination["" + prop] = source["" + prop];
      }
      return destination;
    };
    MenuBase2.prototype.calculateIndentSize = function(ul, li) {
      var liStyle = getComputedStyle(li);
      var liIndent = parseInt(liStyle.textIndent, 10);
      if (this.navIdx.length < 2 && !li.classList.contains("e-blankicon")) {
        liIndent *= 2;
      } else {
        liIndent += liIndent / 4;
      }
      ul.style.textIndent = liIndent + "px";
      var blankIconElem = ul.querySelectorAll(".e-blankicon");
      if (blankIconElem && blankIconElem.length) {
        var menuIconElem = ul.querySelector(".e-menu-icon");
        var menuIconElemStyle = getComputedStyle(menuIconElem);
        var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;
        for (var i = 0; i < blankIconElem.length; i++) {
          blankIconElem[i].style.textIndent = blankIconIndent + "px";
        }
      }
    };
    MenuBase2.prototype.generatePopup = function(popupWrapper, ul, li, isNestedOrVertical) {
      var _this = this;
      var popupObj = new Popup(popupWrapper, {
        actionOnScroll: this.hamburgerMode ? "none" : "reposition",
        relateTo: li,
        collision: this.hamburgerMode ? { X: "none", Y: "none" } : { X: isNestedOrVertical || this.enableRtl ? "none" : "flip", Y: "fit" },
        position: isNestedOrVertical && !this.hamburgerMode ? { X: "right", Y: "top" } : { X: "left", Y: "bottom" },
        targetType: "relative",
        enableRtl: this.enableRtl,
        content: ul,
        open: function() {
          var scrollEle = select(".e-menu-vscroll", popupObj.element);
          if (scrollEle) {
            scrollEle.style.height = "inherit";
            scrollEle.style.maxHeight = "";
          }
          var ul2 = select(".e-ul", popupObj.element);
          popupObj.element.style.maxHeight = "";
          ul2.focus();
          _this.triggerOpen(ul2);
        }
      });
      return popupObj;
    };
    MenuBase2.prototype.createHeaderContainer = function(wrapper) {
      wrapper = wrapper || this.getWrapper();
      var spanElem = this.createElement("span", { className: "e-" + this.getModuleName() + "-header" });
      var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;
      var spanTitle = this.createElement("span", {
        className: "e-" + this.getModuleName() + "-title",
        innerHTML: tempTitle
      });
      var spanIcon = this.createElement("span", {
        className: "e-icons e-" + this.getModuleName() + "-icon",
        attrs: { "tabindex": "0" }
      });
      spanElem.appendChild(spanTitle);
      spanElem.appendChild(spanIcon);
      wrapper.insertBefore(spanElem, this.element);
    };
    MenuBase2.prototype.openHamburgerMenu = function(e) {
      if (this.hamburgerMode) {
        this.triggerBeforeOpen(null, this.element, null, e, 0, 0, "hamburger");
      }
    };
    MenuBase2.prototype.closeHamburgerMenu = function(e) {
      var _this = this;
      var beforeCloseArgs = {
        element: this.element,
        parentItem: null,
        event: e,
        items: this.items,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedHamburgerCloseArgs) {
        if (!observedHamburgerCloseArgs.cancel) {
          _this.closeMenu(null, e);
          _this.element.classList.add("e-hide-menu");
          _this.trigger("onClose", { element: _this.element, parentItem: null, items: _this.items });
        }
      });
    };
    MenuBase2.prototype.callFit = function(element, x, y, top, left) {
      return fit(element, null, { X: x, Y: y }, { top, left });
    };
    MenuBase2.prototype.triggerBeforeOpen = function(li, ul, item, e, top, left, type) {
      var _this = this;
      var items = li ? item[this.getField("children", this.navIdx.length - 1)] : this.items;
      var eventArgs = {
        element: ul,
        items,
        parentItem: item,
        event: e,
        cancel: false,
        top,
        left,
        showSubMenuOn: "Auto"
      };
      var menuType = type;
      this.trigger("beforeOpen", eventArgs, function(observedOpenArgs) {
        switch (menuType) {
          case "menu":
            if (!_this.hamburgerMode) {
              if (observedOpenArgs.showSubMenuOn !== "Auto") {
                _this.showItemOnClick = !_this.defaultOption;
                _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;
              }
              _this.top = observedOpenArgs.top;
              _this.left = observedOpenArgs.left;
            }
            _this.popupWrapper.style.display = "block";
            if (!_this.hamburgerMode) {
              _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + "px";
              if (_this.enableScrolling) {
                addScrolling(_this.createElement, _this.popupWrapper, _this.uList, "vscroll", _this.enableRtl);
              }
              _this.checkScrollOffset(e);
            }
            if (!_this.hamburgerMode && !_this.left && !_this.top) {
              _this.popupObj.refreshPosition(_this.lItem, true);
              _this.left = parseInt(_this.popupWrapper.style.left, 10);
              _this.top = parseInt(_this.popupWrapper.style.top, 10);
              if (_this.enableRtl) {
                _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
              }
              if (_this.template && (_this.isReact || _this.isAngular)) {
                requestAnimationFrame(function() {
                  _this.collision();
                  _this.popupWrapper.style.display = "";
                });
              } else {
                _this.collision();
                _this.popupWrapper.style.display = "";
              }
            } else {
              _this.popupObj.collision = { X: "none", Y: "none" };
              _this.popupWrapper.style.display = "";
            }
            break;
          case "none":
            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
            break;
          case "hamburger":
            if (!observedOpenArgs.cancel) {
              _this.element.classList.remove("e-hide-menu");
              _this.triggerOpen(_this.element);
            }
            break;
        }
        if (menuType !== "hamburger") {
          if (observedOpenArgs.cancel) {
            if (_this.isMenu) {
              _this.popupObj.destroy();
              detach(_this.popupWrapper);
            } else if (ul.className.indexOf("e-ul") > -1) {
              detach(ul);
            }
            _this.navIdx.pop();
          } else {
            if (_this.isMenu) {
              if (_this.hamburgerMode) {
                _this.popupWrapper.style.top = _this.top + "px";
                _this.popupWrapper.style.left = "0px";
                _this.toggleAnimation(_this.popupWrapper);
              } else {
                _this.setBlankIconStyle(_this.popupWrapper);
                _this.wireKeyboardEvent(_this.popupWrapper);
                rippleEffect(_this.popupWrapper, { selector: "." + ITEM });
                _this.popupWrapper.style.left = _this.left + "px";
                _this.popupWrapper.style.top = _this.top + "px";
                var animationOptions = _this.animationSettings.effect !== "None" ? {
                  name: _this.animationSettings.effect,
                  duration: _this.animationSettings.duration,
                  timingFunction: _this.animationSettings.easing
                } : null;
                _this.popupObj.show(animationOptions, _this.lItem);
              }
            } else {
              _this.setBlankIconStyle(_this.uList);
              _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);
              _this.toggleAnimation(_this.uList);
            }
          }
        }
        if (_this.keyType === "right") {
          var cul = _this.getUlByNavIdx();
          li.classList.remove(FOCUSED);
          if (_this.isMenu && _this.navIdx.length === 1) {
            _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);
          }
          li.classList.add(SELECTED);
          if (_this.action === ENTER) {
            var eventArgs_1 = { element: li, item, event: e };
            _this.trigger("select", eventArgs_1);
          }
          li.focus();
          cul = _this.getUlByNavIdx();
          var index = _this.isValidLI(cul.children[0], 0, _this.action);
          cul.children[index].classList.add(FOCUSED);
          cul.children[index].focus();
        }
      });
    };
    MenuBase2.prototype.collision = function() {
      var collide;
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf("right") > -1 || collide.indexOf("left") > -1)) {
        this.popupObj.collision.X = "none";
        var offWidth = closest(this.lItem, ".e-" + this.getModuleName() + "-wrapper").offsetWidth;
        this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? "right" : "left", "top").left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;
      }
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if (collide.indexOf("left") > -1 || collide.indexOf("right") > -1) {
        this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;
      }
      this.popupWrapper.style.left = this.left + "px";
    };
    MenuBase2.prototype.setBlankIconStyle = function(menu) {
      var blankIconList = [].slice.call(menu.getElementsByClassName("e-blankicon"));
      if (!blankIconList.length) {
        return;
      }
      var iconLi = menu.querySelector(".e-menu-item:not(.e-blankicon):not(.e-separator)");
      if (!iconLi) {
        return;
      }
      var icon = iconLi.querySelector(".e-menu-icon");
      if (!icon) {
        return;
      }
      var cssProp = this.enableRtl ? { padding: "paddingRight", margin: "marginLeft" } : { padding: "paddingLeft", margin: "marginRight" };
      var iconCssProps = getComputedStyle(icon);
      var iconSize = parseInt(iconCssProps.fontSize, 10);
      if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
        iconSize = parseInt(iconCssProps.width, 10);
      }
      var size = iconSize + parseInt(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iconCssProps[cssProp.margin],
        10
      ) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
      blankIconList.forEach(function(li) {
        li.style[cssProp.padding] = size;
      });
    };
    MenuBase2.prototype.checkScrollOffset = function(e) {
      var wrapper = this.getWrapper();
      if (wrapper.children[0].classList.contains("e-menu-hscroll") && this.navIdx.length === 1) {
        var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, "." + ITEM);
        var offsetEle = select(".e-hscroll-bar", wrapper);
        if (offsetEle.scrollLeft > trgt.offsetLeft) {
          offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
        }
        var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
        var offsetRight = trgt.offsetLeft + trgt.offsetWidth;
        if (offsetLeft < offsetRight) {
          offsetEle.scrollLeft += offsetRight - offsetLeft;
        }
      }
    };
    MenuBase2.prototype.setPosition = function(li, ul, top, left) {
      var px = "px";
      this.toggleVisiblity(ul);
      if (ul === this.element || left > -1 && top > -1) {
        var collide = isCollide(ul, null, left, top);
        if (collide.indexOf("right") > -1) {
          left = left - ul.offsetWidth;
        }
        if (collide.indexOf("bottom") > -1) {
          var offset = this.callFit(ul, false, true, top, left);
          top = offset.top - 20;
          if (top < 0) {
            var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;
            if (newTop > -1) {
              top = newTop;
            }
          }
        }
        collide = isCollide(ul, null, left, top);
        if (collide.indexOf("left") > -1) {
          var offset = this.callFit(ul, true, false, top, left);
          left = offset.left;
        }
      } else {
        if (Browser.isDevice) {
          top = Number(this.element.style.top.replace(px, ""));
          left = Number(this.element.style.left.replace(px, ""));
        } else {
          var x = this.enableRtl ? "left" : "right";
          var offset = calculatePosition(li, x, "top");
          top = offset.top;
          left = offset.left;
          var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
          var xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1;
          if (xCollision) {
            offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top");
            left = offset.left;
          }
          if (this.enableRtl || xCollision) {
            left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
          }
          if (collide.indexOf("bottom") > -1) {
            offset = this.callFit(ul, false, true, top, left);
            top = offset.top;
          }
        }
      }
      this.toggleVisiblity(ul, false);
      ul.style.top = top + px;
      ul.style.left = left + px;
    };
    MenuBase2.prototype.toggleVisiblity = function(ul, isVisible2) {
      if (isVisible2 === void 0) {
        isVisible2 = true;
      }
      ul.style.visibility = isVisible2 ? "hidden" : "";
      ul.style.display = isVisible2 ? "block" : "none";
    };
    MenuBase2.prototype.createItems = function(items) {
      var _this = this;
      var level = this.navIdx ? this.navIdx.length : 0;
      var fields = this.getFields(level);
      var showIcon = this.hasField(items, this.getField("iconCss", level));
      var listBaseOptions = {
        showIcon,
        moduleName: "menu",
        fields,
        template: this.template,
        itemNavigable: true,
        itemCreating: function(args) {
          if (!args.curData[args.fields[fields.id]]) {
            args.curData[args.fields[fields.id]] = getUniqueID("menuitem");
          }
          if (isNullOrUndefined(args.curData.htmlAttributes)) {
            args.curData.htmlAttributes = {};
          }
          if (Browser.isIE) {
            args.curData.htmlAttributes.role = "menuitem";
            args.curData.htmlAttributes.tabindex = "-1";
          } else {
            Object.assign(args.curData.htmlAttributes, { role: "menuitem", tabindex: "-1" });
          }
          if (_this.isMenu && !args.curData[_this.getField("separator", level)]) {
            args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];
          }
          if (args.curData[args.fields[fields.iconCss]] === "") {
            args.curData[args.fields[fields.iconCss]] = null;
          }
        },
        itemCreated: function(args) {
          if (args.curData[_this.getField("separator", level)]) {
            args.item.classList.add(SEPARATOR);
            args.item.setAttribute("role", "separator");
          }
          if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField("separator", level)]) {
            args.item.classList.add("e-blankicon");
          }
          if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
            var span = _this.createElement("span", { className: ICONS + " " + CARET });
            args.item.appendChild(span);
            args.item.setAttribute("aria-haspopup", "true");
            args.item.setAttribute("aria-expanded", "false");
            args.item.classList.add("e-menu-caret-icon");
          }
          if (_this.isMenu && _this.template) {
            args.item.setAttribute("id", args.curData[args.fields.id].toString());
            args.item.removeAttribute("data-uid");
            if (args.item.classList.contains("e-level-1")) {
              args.item.classList.remove("e-level-1");
            }
            if (args.item.classList.contains("e-has-child")) {
              args.item.classList.remove("e-has-child");
            }
            args.item.removeAttribute("aria-level");
          }
          var eventArgs = { item: args.curData, element: args.item };
          _this.trigger("beforeItemRender", eventArgs);
        }
      };
      this.setProperties({ "items": this.items }, true);
      if (this.isMenu) {
        listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
      }
      var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);
      ul.setAttribute("tabindex", "0");
      if (this.isMenu) {
        ul.setAttribute("role", "menu");
      } else {
        ul.setAttribute("role", "menubar");
      }
      return ul;
    };
    MenuBase2.prototype.moverHandler = function(e) {
      var trgt = e.target;
      this.liTrgt = trgt;
      var cli = this.getLI(trgt);
      var wrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : this.getWrapper();
      var hdrWrapper = this.getWrapper();
      var regex = new RegExp("-ej2menu-(.*)-popup");
      var ulId;
      var isDifferentElem = false;
      if (!wrapper) {
        return;
      }
      if (wrapper.id !== "") {
        ulId = regex.exec(wrapper.id)[1];
      } else {
        ulId = wrapper.querySelector("ul").id;
      }
      if (ulId !== this.element.id) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);
        if (this.navIdx.length) {
          isDifferentElem = true;
        } else {
          return;
        }
      }
      if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper") && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
        cli.classList.add(FOCUSED);
        if (!this.showItemOnClick) {
          this.clickHandler(e);
        }
      } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
      }
      if (this.isMenu) {
        if (!this.showItemOnClick && (trgt.parentElement !== wrapper && !closest(trgt, ".e-" + this.getModuleName() + "-popup")) && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== "Hover") {
          this.removeLIStateByClass([FOCUSED], [wrapper]);
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        } else if (isDifferentElem && !this.showItemOnClick) {
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        }
        if (!this.isClosed) {
          this.removeStateWrapper();
        }
        this.isClosed = false;
      }
    };
    MenuBase2.prototype.removeStateWrapper = function() {
      if (this.liTrgt) {
        var wrapper = closest(this.liTrgt, ".e-menu-vscroll");
        if (this.liTrgt.tagName === "DIV" && wrapper) {
          this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
        }
      }
    };
    MenuBase2.prototype.removeLIStateByClass = function(classList2, element) {
      var li;
      var _loop_1 = function(i2) {
        classList2.forEach(function(className) {
          li = select("." + className, element[i2]);
          if (li) {
            li.classList.remove(className);
          }
        });
      };
      for (var i = 0; i < element.length; i++) {
        _loop_1(i);
      }
    };
    MenuBase2.prototype.getField = function(propName, level) {
      if (level === void 0) {
        level = 0;
      }
      var fieldName = this.fields["" + propName];
      return typeof fieldName === "string" ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
    };
    MenuBase2.prototype.getFields = function(level) {
      if (level === void 0) {
        level = 0;
      }
      return {
        id: this.getField("itemId", level),
        iconCss: this.getField("iconCss", level),
        text: this.getField("text", level),
        url: this.getField("url", level),
        child: this.getField("children", level),
        separator: this.getField("separator", level)
      };
    };
    MenuBase2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    MenuBase2.prototype.menuHeaderClickHandler = function(e) {
      if (closest(e.target, ".e-menu-wrapper").querySelector("ul.e-menu-parent").id !== this.element.id) {
        return;
      }
      if (this.element.className.indexOf("e-hide-menu") > -1) {
        this.openHamburgerMenu(e);
      } else {
        this.closeHamburgerMenu(e);
      }
    };
    MenuBase2.prototype.clickHandler = function(e) {
      if (this.isTapHold) {
        this.isTapHold = false;
      } else {
        var wrapper = this.getWrapper();
        var trgt = e.target;
        var cli = this.cli = this.getLI(trgt);
        var regex = new RegExp("-ej2menu-(.*)-popup");
        var cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null;
        var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);
        if (Browser.isDevice && this.isMenu) {
          this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
          this.mouseDownHandler(e);
        }
        if (cli && cliWrapper && this.isMenu) {
          var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector(".e-menu-parent").id;
          if (this.element.id !== cliWrapperId) {
            return;
          }
        }
        if (isInstLI && e.type === "click" && !cli.classList.contains(HEADER)) {
          this.setLISelected(cli);
          var navIdx = this.getIndex(cli.id, true);
          var item = this.getItem(navIdx);
          var eventArgs = { element: cli, item, event: e };
          this.trigger("select", eventArgs);
        }
        if (isInstLI && (e.type === "mouseover" || Browser.isDevice || this.showItemOnClick)) {
          var ul = void 0;
          if (cli.classList.contains(HEADER)) {
            ul = wrapper.children[this.navIdx.length - 1];
            this.toggleAnimation(ul);
            var sli = this.getLIByClass(ul, SELECTED);
            if (sli) {
              sli.classList.remove(SELECTED);
            }
            detach(cli.parentNode);
            this.navIdx.pop();
          } else {
            if (!cli.classList.contains(SEPARATOR)) {
              this.showSubMenu = true;
              var cul = cli.parentNode;
              if (isNullOrUndefined(cul)) {
                return;
              }
              this.cliIdx = this.getIdx(cul, cli);
              if (this.isMenu || !Browser.isDevice) {
                var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, ".e-" + this.getModuleName() + "-wrapper")) : this.getIdx(wrapper, cul);
                if (this.navIdx[culIdx] === this.cliIdx) {
                  this.showSubMenu = false;
                }
                if (culIdx !== this.navIdx.length && (e.type !== "mouseover" || this.showSubMenu)) {
                  var sli = this.getLIByClass(cul, SELECTED);
                  if (sli) {
                    sli.classList.remove(SELECTED);
                  }
                  this.isClosed = true;
                  this.keyType = "click";
                  if (this.showItemOnClick) {
                    this.setLISelected(cli);
                  }
                  this.closeMenu(culIdx + 1, e);
                  if (this.showItemOnClick) {
                    this.setLISelected(cli);
                  }
                }
              }
              if (!this.isClosed) {
                this.afterCloseMenu(e);
              }
              this.isClosed = false;
            }
          }
        } else {
          if (this.isMenu && trgt.tagName === "DIV" && this.navIdx.length && closest(trgt, ".e-menu-vscroll")) {
            var popupEle = closest(trgt, "." + POPUP);
            var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;
            if (cIdx < this.navIdx.length) {
              this.closeMenu(cIdx + 1, e);
              if (popupEle) {
                this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
              }
            }
          } else if (this.isMenu && this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            if (trgt.tagName !== "UL" || (this.isMenu ? trgt.parentElement.classList.contains("e-menu-wrapper") && !this.getIndex(trgt.querySelector("." + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
              if (!cli) {
                this.removeLIStateByClass([SELECTED], [wrapper]);
              }
              if (!cli || !cli.querySelector("." + CARET)) {
                this.closeMenu(null, e);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.afterCloseMenu = function(e) {
      if (isNullOrUndefined(e)) {
        return;
      }
      var isHeader;
      if (this.showSubMenu) {
        if (this.showItemOnClick && this.navIdx.length === 0) {
          isHeader = closest(e.target, ".e-menu-parent.e-control");
        } else {
          isHeader = closest(this.element, ".e-menu-parent.e-control");
        }
        var idx = this.navIdx.concat(this.cliIdx);
        var item = this.getItem(idx);
        if (item && item[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
          if (e.type === "mouseover" || Browser.isDevice && this.isMenu) {
            this.setLISelected(this.cli);
          }
          if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute("aria-expanded") === "false") {
            this.cli.setAttribute("aria-expanded", "true");
            this.navIdx.push(this.cliIdx);
            this.openMenu(this.cli, item, null, null, e);
          }
        } else {
          if (e.type !== "mouseover") {
            this.closeMenu(null, e);
          }
        }
        if (!isHeader) {
          var cul = this.getUlByNavIdx();
          var sli = this.getLIByClass(cul, SELECTED);
          if (sli) {
            sli.setAttribute("aria-expanded", "false");
            sli.classList.remove(SELECTED);
          }
        }
      }
      this.keyType = "";
    };
    MenuBase2.prototype.setLISelected = function(li) {
      var sli = this.getLIByClass(li.parentElement, SELECTED);
      if (sli) {
        sli.classList.remove(SELECTED);
      }
      if (!this.isMenu) {
        li.classList.remove(FOCUSED);
      }
      li.classList.add(SELECTED);
    };
    MenuBase2.prototype.getLIByClass = function(ul, classname) {
      for (var i = 0, len = ul.children.length; i < len; i++) {
        if (ul.children[i].classList.contains(classname)) {
          return ul.children[i];
        }
      }
      return null;
    };
    MenuBase2.prototype.getItemIndex = function(item, isUniqueId) {
      var idx;
      if (typeof item === "string") {
        idx = item;
      } else {
        idx = item.id;
      }
      var isText = isUniqueId === false ? false : true;
      var navIdx = this.getIndex(idx, isText);
      return navIdx;
    };
    MenuBase2.prototype.setItem = function(item, id, isUniqueId) {
      var idx;
      if (isUniqueId) {
        idx = id ? id : item.id;
      } else {
        idx = id ? id : item.text;
      }
      var navIdx = this.getIndex(idx, isUniqueId);
      var newItem = this.getItem(navIdx);
      Object.assign(newItem, item);
    };
    MenuBase2.prototype.getItem = function(navIdx) {
      navIdx = navIdx.slice();
      var idx = navIdx.pop();
      var items = this.getItems(navIdx);
      return items[idx];
    };
    MenuBase2.prototype.getItems = function(navIdx) {
      var items = this.items;
      for (var i = 0; i < navIdx.length; i++) {
        items = items[navIdx[i]][this.getField("children", i)];
      }
      return items;
    };
    MenuBase2.prototype.setItems = function(newItems, navIdx) {
      var items = this.getItems(navIdx);
      items.splice(0, items.length);
      for (var i = 0; i < newItems.length; i++) {
        items.splice(i, 0, newItems[i]);
      }
    };
    MenuBase2.prototype.getIdx = function(ul, li, skipHdr) {
      if (skipHdr === void 0) {
        skipHdr = true;
      }
      var idx = Array.prototype.indexOf.call(ul.children, li);
      if (skipHdr && ul.children[0].classList.contains(HEADER)) {
        idx--;
      }
      return idx;
    };
    MenuBase2.prototype.getLI = function(elem) {
      if (elem.tagName === "LI" && elem.classList.contains("e-menu-item")) {
        return elem;
      }
      return closest(elem, "li.e-menu-item");
    };
    MenuBase2.prototype.updateItemsByNavIdx = function() {
      var items = this.items;
      var count = 0;
      for (var index = 0; index < this.navIdx.length; index++) {
        items = items[index].items;
        if (!items) {
          break;
        }
        count++;
        var ul = this.getUlByNavIdx(count);
        if (!ul) {
          break;
        }
        this.updateItem(ul, items);
      }
    };
    MenuBase2.prototype.removeChildElement = function(elem) {
      while (elem.firstElementChild) {
        elem.removeChild(elem.firstElementChild);
      }
      return elem;
    };
    MenuBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var wrapper = this.getWrapper();
      var _loop_2 = function(prop2) {
        switch (prop2) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (this_1.enableRtl) {
              wrapper.classList.add(RTL3);
            } else {
              wrapper.classList.remove(RTL3);
            }
            break;
          case "showItemOnClick":
            this_1.unWireEvents();
            this_1.showItemOnClick = newProp.showItemOnClick;
            this_1.wireEvents();
            break;
          case "enableScrolling":
            if (newProp.enableScrolling) {
              var ul_2;
              if (this_1.element.classList.contains("e-vertical")) {
                addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
              } else {
                addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
              }
              this_1.getPopups().forEach(function(wrapper2) {
                ul_2 = select(".e-ul", wrapper2);
                addScrolling(_this.createElement, wrapper2, ul_2, "vscroll", _this.enableRtl);
              });
            } else {
              var ul_3 = wrapper.children[0];
              if (this_1.element.classList.contains("e-vertical")) {
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
              } else {
                destroyScroll(getInstance(ul_3, HScroll), ul_3);
              }
              wrapper.style.overflow = "";
              wrapper.appendChild(this_1.element);
              this_1.getPopups().forEach(function(wrapper2) {
                ul_3 = wrapper2.children[0];
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
                wrapper2.style.overflow = "";
              });
            }
            break;
          case "items": {
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0;
            if (this_1.isReact && this_1.template) {
              this_1.clearTemplate(["template"]);
            }
            if (!Object.keys(oldProp.items).length) {
              this_1.updateItem(this_1.element, this_1.items);
              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains("e-custom-scroll")) {
                if (this_1.element.classList.contains("e-vertical")) {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
                } else {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
                }
              }
              if (!this_1.hamburgerMode) {
                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                  detach(wrapper.lastElementChild);
                }
              }
              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);
              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));
                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }
                navIdx.length = 0;
              }
            }
            break;
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_2(prop);
      }
    };
    MenuBase2.prototype.updateItem = function(ul, items) {
      if (isBlazor() && !this.isMenu) {
        ul = this.removeChildElement(ul);
      } else {
        if (this.enableScrolling) {
          var wrapper1 = this.getWrapper();
          var ul1 = wrapper1.children[0];
          if (this.element.classList.contains("e-vertical")) {
            destroyScroll(getInstance(ul1, VScroll), ul1);
          } else {
            destroyScroll(getInstance(ul1, HScroll), ul1);
          }
        }
        ul.innerHTML = "";
      }
      var lis = [].slice.call(this.createItems(items).children);
      lis.forEach(function(li) {
        ul.appendChild(li);
      });
    };
    MenuBase2.prototype.getChangedItemIndex = function(newProp, index, idx) {
      index.push(idx);
      var key = Object.keys(newProp.items[idx]).pop();
      if (key === "items") {
        var item = newProp.items[idx];
        var popStr = Object.keys(item.items).pop();
        if (popStr) {
          this.getChangedItemIndex(item, index, Number(popStr));
        }
      } else {
        if (key === "isParentArray" && index.length > 1) {
          index.pop();
        }
      }
      return index;
    };
    MenuBase2.prototype.removeItem = function(item, navIdx, idx) {
      item.splice(idx, 1);
      var uls = this.getWrapper().children;
      if (navIdx.length < uls.length) {
        detach(uls[navIdx.length].children[idx]);
      }
    };
    MenuBase2.prototype.unWireEvents = function(targetSelctor) {
      if (targetSelctor === void 0) {
        targetSelctor = this.target;
      }
      var wrapper = this.getWrapper();
      if (targetSelctor) {
        var target = void 0;
        var touchModule = void 0;
        var targetElems = selectAll(targetSelctor);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.remove(target, "click", this.menuHeaderClickHandler);
          } else {
            if (Browser.isIos) {
              touchModule = getInstance(target, Touch);
              if (touchModule) {
                touchModule.destroy();
              }
            } else {
              EventHandler.remove(target, "contextmenu", this.cmenuHandler);
            }
          }
        }
        if (!this.isMenu) {
          EventHandler.remove(this.targetElement, "mousewheel DOMMouseScroll", this.scrollHandler);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_2 = _a[_i];
            EventHandler.remove(parent_2, "mousewheel DOMMouseScroll", this.scrollHandler);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler);
        EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler);
      }
      EventHandler.remove(document, "click", this.delegateClickHandler);
      this.unWireKeyboardEvent(wrapper);
      this.rippleFn();
    };
    MenuBase2.prototype.unWireKeyboardEvent = function(element) {
      var keyboardModule = getInstance(element, KeyboardEvents);
      if (keyboardModule) {
        keyboardModule.destroy();
      }
    };
    MenuBase2.prototype.toggleAnimation = function(ul, isMenuOpen) {
      var _this = this;
      if (isMenuOpen === void 0) {
        isMenuOpen = true;
      }
      var pUlHeight;
      var pElement;
      if (this.animationSettings.effect === "None" || !isMenuOpen) {
        this.end(ul, isMenuOpen);
      } else {
        this.animation.animate(ul, {
          name: this.animationSettings.effect,
          duration: this.animationSettings.duration,
          timingFunction: this.animationSettings.easing,
          begin: function(options) {
            if (_this.hamburgerMode) {
              pElement = options.element.parentElement;
              options.element.style.position = "absolute";
              pUlHeight = pElement.offsetHeight;
              options.element.style.maxHeight = options.element.offsetHeight + "px";
              pElement.style.maxHeight = "";
            } else {
              options.element.style.display = "block";
              options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
            }
          },
          progress: function(options) {
            if (_this.hamburgerMode) {
              pElement.style.minHeight = pUlHeight + options.element.offsetHeight + "px";
            }
          },
          end: function(options) {
            if (_this.hamburgerMode) {
              options.element.style.position = "";
              options.element.style.maxHeight = "";
              pElement.style.minHeight = "";
              options.element.style.top = "0px";
              options.element.children[0].focus();
              _this.triggerOpen(options.element.children[0]);
            } else {
              _this.end(options.element, isMenuOpen);
            }
          }
        });
      }
    };
    MenuBase2.prototype.triggerOpen = function(ul) {
      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
      var eventArgs = {
        element: ul,
        parentItem: item,
        items: item ? item.items : this.items
      };
      this.trigger("onOpen", eventArgs);
      if (!this.isMenu) {
        EventHandler.add(ul, "keydown", this.keyHandler, this);
      }
    };
    MenuBase2.prototype.end = function(ul, isMenuOpen) {
      if (isMenuOpen) {
        ul.style.display = "block";
        ul.style.maxHeight = "";
        this.triggerOpen(ul);
        if (ul.querySelector("." + FOCUSED)) {
          ul.querySelector("." + FOCUSED).focus();
        } else {
          var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];
          if (this.currentTarget) {
            if (!(this.currentTarget.classList.contains("e-numerictextbox") || this.currentTarget.classList.contains("e-textbox") || this.currentTarget.tagName === "INPUT")) {
              if (ele) {
                ele.querySelector("." + SELECTED).focus();
              } else {
                this.element.focus();
              }
            }
          } else {
            if (ele) {
              ele.querySelector("." + SELECTED).focus();
            } else {
              this.element.focus();
            }
          }
        }
      } else {
        if (ul === this.element) {
          var fli = this.getLIByClass(this.element, FOCUSED);
          if (fli) {
            fli.classList.remove(FOCUSED);
          }
          var sli = this.getLIByClass(this.element, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          ul.style.display = "none";
        } else {
          detach(ul);
        }
      }
    };
    MenuBase2.prototype.getPersistData = function() {
      return "";
    };
    MenuBase2.prototype.getWrapper = function() {
      return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
    };
    MenuBase2.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
      if (items === void 0) {
        items = this.items;
      }
      if (nIndex === void 0) {
        nIndex = [];
      }
      if (isCallBack === void 0) {
        isCallBack = false;
      }
      if (level === void 0) {
        level = 0;
      }
      var item;
      level = isCallBack ? level + 1 : 0;
      for (var i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if ((isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)]) === data) {
          nIndex.push(i);
          break;
        } else if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
          nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, true, level);
          if (nIndex[nIndex.length - 1] === -1) {
            if (i !== len - 1) {
              nIndex.pop();
            }
          } else {
            nIndex.unshift(i);
            break;
          }
        } else {
          if (i === len - 1) {
            nIndex.push(-1);
          }
        }
      }
      return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
    };
    MenuBase2.prototype.enableItems = function(items, enable, isUniqueId) {
      if (enable === void 0) {
        enable = true;
      }
      var ul;
      var idx;
      var navIdx;
      var disabled = DISABLED;
      var skipItem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        if (this.navIdx.length) {
          if (navIdx.length !== 1) {
            skipItem = false;
            for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
              if (navIdx[i_1] !== this.navIdx[i_1]) {
                skipItem = true;
                break;
              }
            }
            if (skipItem) {
              continue;
            }
          }
        } else {
          if (navIdx.length !== 1) {
            continue;
          }
        }
        idx = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        if (ul && !isNullOrUndefined(idx)) {
          if (enable) {
            if (this.isMenu) {
              ul.children[idx].classList.remove(disabled);
              ul.children[idx].removeAttribute("aria-disabled");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.remove(disabled);
              } else {
                ul.children[idx].classList.remove(disabled);
              }
            }
          } else {
            if (this.isMenu) {
              ul.children[idx].classList.add(disabled);
              ul.children[idx].setAttribute("aria-disabled", "true");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.add(disabled);
              } else {
                ul.children[idx].classList.add(disabled);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.showItems = function(items, isUniqueId) {
      this.showHideItems(items, false, isUniqueId);
    };
    MenuBase2.prototype.hideItems = function(items, isUniqueId) {
      this.showHideItems(items, true, isUniqueId);
    };
    MenuBase2.prototype.showHideItems = function(items, ishide, isUniqueId) {
      var ul;
      var index;
      var navIdx;
      var item;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        index = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        item = this.getItems(navIdx);
        if (ul) {
          var validUl = isUniqueId ? ul.children[index].id : item[index].text.toString();
          if (ishide && validUl === items[i]) {
            ul.children[index].classList.add(HIDE2);
          } else if (!ishide && validUl === items[i]) {
            ul.children[index].classList.remove(HIDE2);
          }
        }
      }
    };
    MenuBase2.prototype.removeItems = function(items, isUniqueId) {
      var idx;
      var navIdx;
      var iitems;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        if (!isNullOrUndefined(idx)) {
          this.removeItem(iitems, navIdx, idx);
        }
      }
    };
    MenuBase2.prototype.insertAfter = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId);
    };
    MenuBase2.prototype.insertBefore = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId, false);
    };
    MenuBase2.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
      if (isAfter === void 0) {
        isAfter = true;
      }
      var li;
      var idx;
      var navIdx;
      var iitems;
      var menuitem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(text, isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        menuitem = new MenuItem(iitems[0], "items", items[i], true);
        iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
        var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);
        if (!isNullOrUndefined(idx) && navIdx.length < uls.length) {
          idx = isAfter ? idx + 1 : idx;
          li = this.createItems(iitems).children[idx];
          var ul = this.isMenu ? select(".e-menu-parent", uls[navIdx.length]) : uls[navIdx.length];
          ul.insertBefore(li, ul.children[idx]);
        }
      }
    };
    MenuBase2.prototype.removeAttributes = function() {
      var _this = this;
      ["top", "left", "display", "z-index"].forEach(function(key) {
        _this.element.style.removeProperty(key);
      });
      ["role", "tabindex", "class", "style"].forEach(function(key) {
        if (key === "class" && _this.element.classList.contains("e-menu-parent")) {
          _this.element.classList.remove("e-menu-parent");
        }
        if (["class", "style"].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
          _this.element.removeAttribute(key);
        }
        if (_this.isMenu && key === "class" && _this.element.classList.contains("e-vertical")) {
          _this.element.classList.remove("e-vertical");
        }
      });
    };
    MenuBase2.prototype.destroy = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        this.unWireEvents();
        if (!this.isMenu) {
          this.clonedElement.style.display = "";
          if (this.clonedElement.tagName === "EJS-CONTEXTMENU") {
            addClass([this.clonedElement], ["e-control", "e-lib", "e-" + this.getModuleName()]);
            this.element = this.clonedElement;
          } else {
            if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === "LI") {
              this.setProperties({ "items": [] }, true);
            }
            if (document.getElementById(this.clonedElement.id)) {
              var refEle = this.clonedElement.nextElementSibling;
              if (refEle && refEle !== wrapper) {
                this.clonedElement.parentElement.insertBefore(this.element, refEle);
              } else {
                this.clonedElement.parentElement.appendChild(this.element);
              }
              if (isBlazor() && !this.isMenu) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = "";
              }
              append([].slice.call(this.clonedElement.children), this.element);
              detach(this.clonedElement);
              this.removeAttributes();
            }
          }
          this.clonedElement = null;
        } else {
          this.closeMenu();
          if (isBlazor() && !this.isMenu) {
            this.element = this.removeChildElement(this.element);
          } else {
            this.element.innerHTML = "";
          }
          this.removeAttributes();
          wrapper.parentNode.insertBefore(this.element, wrapper);
          this.clonedElement = null;
        }
        if (this.isMenu && this.clonedElement) {
          detach(this.element);
          wrapper.style.display = "";
          wrapper.classList.remove("e-" + this.getModuleName() + "-wrapper");
          wrapper.removeAttribute("data-ripple");
        } else {
          detach(wrapper);
        }
        _super.prototype.destroy.call(this);
        if (this.template) {
          this.clearTemplate(["template"]);
        }
      }
      this.rippleFn = null;
    };
    __decorate8([
      Event()
    ], MenuBase2.prototype, "beforeItemRender", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "beforeOpen", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "onOpen", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "beforeClose", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "onClose", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "select", void 0);
    __decorate8([
      Event()
    ], MenuBase2.prototype, "created", void 0);
    __decorate8([
      Property("")
    ], MenuBase2.prototype, "cssClass", void 0);
    __decorate8([
      Property(0)
    ], MenuBase2.prototype, "hoverDelay", void 0);
    __decorate8([
      Property(false)
    ], MenuBase2.prototype, "showItemOnClick", void 0);
    __decorate8([
      Property("")
    ], MenuBase2.prototype, "target", void 0);
    __decorate8([
      Property("")
    ], MenuBase2.prototype, "filter", void 0);
    __decorate8([
      Property(null)
    ], MenuBase2.prototype, "template", void 0);
    __decorate8([
      Property(false)
    ], MenuBase2.prototype, "enableScrolling", void 0);
    __decorate8([
      Property(false)
    ], MenuBase2.prototype, "enableHtmlSanitizer", void 0);
    __decorate8([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], MenuBase2.prototype, "fields", void 0);
    __decorate8([
      Collection([], MenuItem)
    ], MenuBase2.prototype, "items", void 0);
    __decorate8([
      Complex({ duration: 400, easing: "ease", effect: "SlideDown" }, MenuAnimationSettings)
    ], MenuBase2.prototype, "animationSettings", void 0);
    MenuBase2 = __decorate8([
      NotifyPropertyChanges
    ], MenuBase2);
    return MenuBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_VERTICAL = "e-vertical";
var CLS_ITEMS = "e-toolbar-items";
var CLS_ITEM = "e-toolbar-item";
var CLS_RTL3 = "e-rtl";
var CLS_SEPARATOR = "e-separator";
var CLS_POPUPICON = "e-popup-up-icon";
var CLS_POPUPDOWN = "e-popup-down-icon";
var CLS_POPUPOPEN = "e-popup-open";
var CLS_TEMPLATE = "e-template";
var CLS_DISABLE3 = "e-overlay";
var CLS_POPUPTEXT = "e-toolbar-text";
var CLS_TBARTEXT = "e-popup-text";
var CLS_TBAROVERFLOW = "e-overflow-show";
var CLS_POPOVERFLOW = "e-overflow-hide";
var CLS_TBARBTN = "e-tbar-btn";
var CLS_TBARNAV = "e-hor-nav";
var CLS_TBARSCRLNAV = "e-scroll-nav";
var CLS_TBARRIGHT = "e-toolbar-right";
var CLS_TBARLEFT = "e-toolbar-left";
var CLS_TBARCENTER = "e-toolbar-center";
var CLS_TBARPOS = "e-tbar-pos";
var CLS_HSCROLLCNT = "e-hscroll-content";
var CLS_VSCROLLCNT = "e-vscroll-content";
var CLS_HSCROLLBAR2 = "e-hscroll-bar";
var CLS_POPUPNAV = "e-hor-nav";
var CLS_POPUPCLASS = "e-toolbar-pop";
var CLS_POPUP = "e-toolbar-popup";
var CLS_TBARBTNTEXT = "e-tbar-btn-text";
var CLS_TBARNAVACT = "e-nav-active";
var CLS_TBARIGNORE = "e-ignore";
var CLS_POPPRI = "e-popup-alone";
var CLS_HIDDEN = "e-hidden";
var CLS_MULTIROW = "e-toolbar-multirow";
var CLS_MULTIROWPOS = "e-multirow-pos";
var CLS_MULTIROW_SEPARATOR = "e-multirow-separator";
var CLS_EXTENDABLE_SEPARATOR = "e-extended-separator";
var CLS_EXTEANDABLE_TOOLBAR = "e-extended-toolbar";
var CLS_EXTENDABLECLASS = "e-toolbar-extended";
var CLS_EXTENDPOPUP = "e-expended-nav";
var CLS_EXTENDEDPOPOPEN = "e-tbar-extended";
var Item = (
  /** @class */
  function(_super) {
    __extends9(Item2, _super);
    function Item2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([
      Property("")
    ], Item2.prototype, "id", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "text", void 0);
    __decorate9([
      Property("auto")
    ], Item2.prototype, "width", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "cssClass", void 0);
    __decorate9([
      Property(false)
    ], Item2.prototype, "showAlwaysInPopup", void 0);
    __decorate9([
      Property(false)
    ], Item2.prototype, "disabled", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "prefixIcon", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "suffixIcon", void 0);
    __decorate9([
      Property(true)
    ], Item2.prototype, "visible", void 0);
    __decorate9([
      Property("None")
    ], Item2.prototype, "overflow", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "template", void 0);
    __decorate9([
      Property("Button")
    ], Item2.prototype, "type", void 0);
    __decorate9([
      Property("Both")
    ], Item2.prototype, "showTextOn", void 0);
    __decorate9([
      Property(null)
    ], Item2.prototype, "htmlAttributes", void 0);
    __decorate9([
      Property("")
    ], Item2.prototype, "tooltipText", void 0);
    __decorate9([
      Property("Left")
    ], Item2.prototype, "align", void 0);
    __decorate9([
      Event()
    ], Item2.prototype, "click", void 0);
    __decorate9([
      Property(-1)
    ], Item2.prototype, "tabIndex", void 0);
    return Item2;
  }(ChildProperty)
);
var Toolbar = (
  /** @class */
  function(_super) {
    __extends9(Toolbar2, _super);
    function Toolbar2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.resizeContext = _this.resize.bind(_this);
      _this.orientationChangeContext = _this.orientationChange.bind(_this);
      _this.keyConfigs = {
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        popupOpen: "enter",
        popupClose: "escape",
        tab: "tab",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Toolbar2.prototype.destroy = function() {
      var _this = this;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      var btnItems = this.element.querySelectorAll(".e-control.e-btn");
      [].slice.call(btnItems).forEach(function(el) {
        if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {
          el.ej2_instances[0].destroy();
        }
      });
      this.unwireEvents();
      this.tempId.forEach(function(ele) {
        if (!isNullOrUndefined(_this.element.querySelector(ele))) {
          document.body.appendChild(_this.element.querySelector(ele)).style.display = "none";
        }
      });
      this.destroyItems();
      while (this.element.lastElementChild) {
        this.element.removeChild(this.element.lastElementChild);
      }
      if (this.trgtEle) {
        this.element.appendChild(this.ctrlTem);
        this.trgtEle = null;
        this.ctrlTem = null;
      }
      if (this.popObj) {
        this.popObj.destroy();
        detach(this.popObj.element);
      }
      if (this.activeEle) {
        this.activeEle = null;
      }
      this.popObj = null;
      this.tbarAlign = null;
      this.tbarItemsCol = [];
      this.remove(this.element, "e-toolpop");
      if (this.cssClass) {
        removeClass([this.element], this.cssClass.split(" "));
      }
      this.element.removeAttribute("style");
      ["aria-disabled", "aria-orientation", "role"].forEach(function(attrb) {
        return _this.element.removeAttribute(attrb);
      });
      _super.prototype.destroy.call(this);
    };
    Toolbar2.prototype.preRender = function() {
      var eventArgs = { enableCollision: this.enableCollision, scrollStep: this.scrollStep };
      this.trigger("beforeCreate", eventArgs);
      this.enableCollision = eventArgs.enableCollision;
      this.scrollStep = eventArgs.scrollStep;
      this.scrollModule = null;
      this.popObj = null;
      this.tempId = [];
      this.tbarItemsCol = this.items;
      this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
      this.isExtendedOpen = false;
      this.popupPriCount = 0;
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL3);
      }
    };
    Toolbar2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resizeContext);
      window.addEventListener("orientationchange", this.orientationChangeContext);
      if (this.allowKeyboard) {
        this.wireKeyboardEvent();
      }
    };
    Toolbar2.prototype.wireKeyboardEvent = function() {
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      EventHandler.add(this.element, "keydown", this.docKeyDown, this);
      this.updateTabIndex("0");
    };
    Toolbar2.prototype.updateTabIndex = function(tabIndex) {
      var ele = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(ele) && !isNullOrUndefined(ele.firstElementChild)) {
        var dataTabIndex = ele.firstElementChild.getAttribute("data-tabindex");
        if (dataTabIndex && dataTabIndex === "-1" && ele.firstElementChild.tagName !== "INPUT") {
          ele.firstElementChild.setAttribute("tabindex", tabIndex);
        }
      }
    };
    Toolbar2.prototype.unwireKeyboardEvent = function() {
      if (this.keyModule) {
        EventHandler.remove(this.element, "keydown", this.docKeyDown);
        this.keyModule.destroy();
        this.keyModule = null;
      }
    };
    Toolbar2.prototype.docKeyDown = function(e) {
      if (e.target.tagName === "INPUT") {
        return;
      }
      var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== "Extended";
      if (e.keyCode === 9 && e.target.classList.contains("e-hor-nav") === true && popCheck) {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
      var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;
      if (keyCheck) {
        e.preventDefault();
      }
    };
    Toolbar2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      this.destroyScroll();
      this.unwireKeyboardEvent();
      window.removeEventListener("resize", this.resizeContext);
      window.removeEventListener("orientationchange", this.orientationChangeContext);
      EventHandler.remove(document, "scroll", this.docEvent);
      EventHandler.remove(document, "click", this.docEvent);
    };
    Toolbar2.prototype.clearProperty = function() {
      this.tbarEle = [];
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
    };
    Toolbar2.prototype.docEvent = function(e) {
      var popEle = closest(e.target, ".e-popup");
      if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === "Popup") {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
    };
    Toolbar2.prototype.destroyScroll = function() {
      if (this.scrollModule) {
        if (this.tbarAlign) {
          this.add(this.scrollModule.element, CLS_TBARPOS);
        }
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
    };
    Toolbar2.prototype.destroyItems = function() {
      if (this.element) {
        [].slice.call(this.element.querySelectorAll("." + CLS_ITEM)).forEach(function(el) {
          detach(el);
        });
      }
      if (this.tbarAlign) {
        var tbarItems = this.element.querySelector("." + CLS_ITEMS);
        [].slice.call(tbarItems.children).forEach(function(el) {
          detach(el);
        });
        this.tbarAlign = false;
        this.remove(tbarItems, CLS_TBARPOS);
      }
      this.clearProperty();
    };
    Toolbar2.prototype.destroyMode = function() {
      if (this.scrollModule) {
        this.remove(this.scrollModule.element, CLS_RTL3);
        this.destroyScroll();
      }
      this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
      var tempEle = this.element.querySelector(".e-toolbar-multirow");
      if (tempEle) {
        this.remove(tempEle, CLS_MULTIROW);
      }
      if (this.popObj) {
        this.popupRefresh(this.popObj.element, true);
      }
    };
    Toolbar2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Toolbar2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Toolbar2.prototype.elementFocus = function(ele) {
      var fChild = ele.firstElementChild;
      if (fChild) {
        fChild.focus();
        this.activeEleSwitch(ele);
      } else {
        ele.focus();
      }
    };
    Toolbar2.prototype.clstElement = function(tbrNavChk, trgt) {
      var clst;
      if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {
        clst = this.popObj.element.querySelector("." + CLS_ITEM);
      } else if (this.element === trgt || tbrNavChk) {
        clst = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      } else {
        clst = closest(trgt, "." + CLS_ITEM);
      }
      return clst;
    };
    Toolbar2.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
      var popObj = this.popObj;
      var rootEle = this.element;
      var popAnimate = { name: "FadeOut", duration: 100 };
      var value = e.action === "moveUp" ? "previous" : "next";
      var ele;
      var nodes;
      switch (e.action) {
        case "moveRight":
          if (this.isVertical) {
            return;
          }
          if (rootEle === trgt) {
            this.elementFocus(clst);
          } else if (!navChk) {
            this.eleFocus(clst, "next");
          }
          break;
        case "moveLeft":
          if (this.isVertical) {
            return;
          }
          if (!navChk) {
            this.eleFocus(clst, "previous");
          }
          break;
        case "home":
        case "end":
          if (clst) {
            var popupCheck = closest(clst, ".e-popup");
            var extendedPopup = this.element.querySelector("." + CLS_EXTENDABLECLASS);
            if (this.overflowMode === "Extended" && extendedPopup && extendedPopup.classList.contains("e-popup-open")) {
              popupCheck = e.action === "end" ? extendedPopup : null;
            }
            if (popupCheck) {
              if (isVisible(this.popObj.element)) {
                nodes = [].slice.call(popupCheck.children);
                if (e.action === "home") {
                  ele = this.focusFirstVisibleEle(nodes);
                } else {
                  ele = this.focusLastVisibleEle(nodes);
                }
              }
            } else {
              nodes = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + ")");
              if (e.action === "home") {
                ele = this.focusFirstVisibleEle(nodes);
              } else {
                ele = this.focusLastVisibleEle(nodes);
              }
            }
            if (ele) {
              this.elementFocus(ele);
            }
          }
          break;
        case "moveUp":
        case "moveDown":
          if (!this.isVertical) {
            if (popObj && closest(trgt, ".e-popup")) {
              var popEle = popObj.element;
              var popFrstEle = popEle.firstElementChild;
              if (value === "previous" && popFrstEle === clst) {
                popEle.lastElementChild.firstChild.focus();
              } else if (value === "next" && popEle.lastElementChild === clst) {
                popFrstEle.firstChild.focus();
              } else {
                this.eleFocus(clst, value);
              }
            } else if (e.action === "moveDown" && popObj && isVisible(popObj.element)) {
              this.elementFocus(clst);
            }
          } else {
            if (e.action === "moveUp") {
              this.eleFocus(clst, "previous");
            } else {
              this.eleFocus(clst, "next");
            }
          }
          break;
        case "tab":
          if (!scrollChk && !navChk) {
            var ele_1 = clst.firstElementChild;
            if (rootEle === trgt) {
              if (this.activeEle) {
                this.activeEle.focus();
              } else {
                this.activeEleRemove(ele_1);
                ele_1.focus();
              }
            }
          }
          break;
        case "popupClose":
          if (popObj && this.overflowMode !== "Extended") {
            popObj.hide(popAnimate);
          }
          break;
        case "popupOpen":
          if (!navChk) {
            return;
          }
          if (popObj && !isVisible(popObj.element)) {
            popObj.element.style.top = rootEle.offsetHeight + "px";
            popObj.show({ name: "FadeIn", duration: 100 });
          } else {
            popObj.hide(popAnimate);
          }
          break;
      }
    };
    Toolbar2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      if (trgt.tagName === "INPUT" || trgt.tagName === "TEXTAREA" || this.element.classList.contains(CLS_DISABLE3)) {
        return;
      }
      e.preventDefault();
      var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
      var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
      var clst = this.clstElement(tbrNavChk, trgt);
      if (clst || tbarScrollChk) {
        this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
      }
    };
    Toolbar2.prototype.disable = function(value) {
      var rootEle = this.element;
      if (value) {
        rootEle.classList.add(CLS_DISABLE3);
      } else {
        rootEle.classList.remove(CLS_DISABLE3);
      }
      if (this.activeEle) {
        this.activeEle.setAttribute("tabindex", this.activeEle.getAttribute("data-tabindex"));
      }
      if (this.scrollModule) {
        this.scrollModule.disable(value);
      }
      if (this.popObj) {
        if (isVisible(this.popObj.element) && this.overflowMode !== "Extended") {
          this.popObj.hide();
        }
        rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", !value ? "0" : "-1");
      }
    };
    Toolbar2.prototype.eleContains = function(el) {
      return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE3) || el.getAttribute("disabled") || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);
    };
    Toolbar2.prototype.focusFirstVisibleEle = function(nodes) {
      var element;
      var index = 0;
      while (index < nodes.length) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index++;
      }
      return element;
    };
    Toolbar2.prototype.focusLastVisibleEle = function(nodes) {
      var element;
      var index = nodes.length - 1;
      while (index >= 0) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index--;
      }
      return element;
    };
    Toolbar2.prototype.eleFocus = function(closest2, pos) {
      var sib = Object(closest2)[pos + "ElementSibling"];
      if (sib) {
        var skipEle = this.eleContains(sib);
        if (skipEle) {
          this.eleFocus(sib, pos);
          return;
        }
        this.elementFocus(sib);
      } else if (this.tbarAlign) {
        var elem = Object(closest2.parentElement)[pos + "ElementSibling"];
        if (!isNullOrUndefined(elem) && elem.children.length === 0) {
          elem = Object(elem)[pos + "ElementSibling"];
        }
        if (!isNullOrUndefined(elem) && elem.children.length > 0) {
          if (pos === "next") {
            var el = elem.querySelector("." + CLS_ITEM);
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              el.firstElementChild.focus();
              this.activeEleSwitch(el);
            }
          } else {
            var el = elem.lastElementChild;
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              this.elementFocus(el);
            }
          }
        }
      } else if (!isNullOrUndefined(closest2)) {
        var tbrItems = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_DISABLE3 + "):not(." + CLS_HIDDEN + ")");
        if (pos === "next" && tbrItems) {
          this.elementFocus(tbrItems[0]);
        } else if (pos === "previous" && tbrItems) {
          this.elementFocus(tbrItems[tbrItems.length - 1]);
        }
      }
    };
    Toolbar2.prototype.clickHandler = function(e) {
      var _this = this;
      var trgt = e.target;
      var ele = this.element;
      var isPopupElement = !isNullOrUndefined(closest(trgt, "." + CLS_POPUPCLASS));
      var clsList = trgt.classList;
      var popupNav = closest(trgt, "." + CLS_TBARNAV);
      if (!popupNav) {
        popupNav = trgt;
      }
      if (!ele.children[0].classList.contains("e-hscroll") && !ele.children[0].classList.contains("e-vscroll") && clsList.contains(CLS_TBARNAV)) {
        clsList = trgt.querySelector(".e-icons").classList;
      }
      if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
        this.popupClickHandler(ele, popupNav, CLS_RTL3);
      }
      var itemObj;
      var clst = closest(e.target, "." + CLS_ITEM);
      if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE3)) && !popupNav.classList.contains(CLS_TBARNAV)) {
        return;
      }
      if (clst) {
        var tempItem = this.items[this.tbarEle.indexOf(clst)];
        itemObj = tempItem;
      }
      var eventArgs = { originalEvent: e, item: itemObj };
      if (itemObj && !isNullOrUndefined(itemObj.click)) {
        this.trigger("items[" + this.tbarEle.indexOf(clst) + "].click", eventArgs);
      }
      if (!eventArgs.cancel) {
        this.trigger("clicked", eventArgs, function(clickedArgs) {
          if (!isNullOrUndefined(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === "Popup" && clickedArgs.item && clickedArgs.item.type !== "Input") {
            _this.popObj.hide({ name: "FadeOut", duration: 100 });
          }
        });
      }
    };
    Toolbar2.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL8) {
      var popObj = this.popObj;
      if (isVisible(popObj.element)) {
        popupNav.classList.remove(CLS_TBARNAVACT);
        popObj.hide({ name: "FadeOut", duration: 100 });
      } else {
        if (ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = true;
          popObj.position = { X: "left", Y: "top" };
        }
        if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = false;
          popObj.position = { X: "right", Y: "top" };
        }
        popObj.dataBind();
        popObj.refreshPosition();
        popObj.element.style.top = this.getElementOffsetY() + "px";
        if (this.overflowMode === "Extended") {
          popObj.element.style.minHeight = "0px";
        }
        popupNav.classList.add(CLS_TBARNAVACT);
        popObj.show({ name: "FadeIn", duration: 100 });
      }
    };
    Toolbar2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          _this.refreshOverflow();
        });
      }
    };
    Toolbar2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      if (Browser.info.name !== "msie" || this.height !== "auto" || this.overflowMode === "MultiRow") {
        setStyleAttribute(this.element, { "height": height });
      }
      setStyleAttribute(this.element, { "width": width });
      var ariaAttr = {
        "role": "toolbar",
        "aria-disabled": "false",
        "aria-orientation": !this.isVertical ? "horizontal" : "vertical"
      };
      attributes(this.element, ariaAttr);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Toolbar2.prototype.renderControl = function() {
      var ele = this.element;
      this.trgtEle = ele.children.length > 0 ? ele.querySelector("div") : null;
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
      this.renderItems();
      this.renderLayout();
    };
    Toolbar2.prototype.renderLayout = function() {
      this.renderOverflowMode();
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }
      this.separator();
    };
    Toolbar2.prototype.itemsAlign = function(items, itemEleDom) {
      var innerItem;
      var innerPos;
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      for (var i = 0; i < items.length; i++) {
        innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);
        if (this.tbarEle.indexOf(innerItem) === -1) {
          this.tbarEle.push(innerItem);
        }
        if (!this.tbarAlign) {
          this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);
        }
        innerPos = itemEleDom.querySelector(".e-toolbar-" + items[parseInt(i.toString(), 10)].align.toLowerCase());
        if (innerPos) {
          if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== "Show")) {
            this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + "s").toLowerCase()].push(innerItem);
          }
          innerPos.appendChild(innerItem);
        } else {
          itemEleDom.appendChild(innerItem);
        }
      }
      if (this.isReact) {
        var portals = "portals";
        this.notify("render-react-toolbar-template", this["" + portals]);
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.changeOrientation = function() {
      var ele = this.element;
      if (this.isVertical) {
        ele.classList.remove(CLS_VERTICAL);
        this.isVertical = false;
        if (this.height === "auto" || this.height === "100%") {
          ele.style.height = this.height;
        }
        ele.setAttribute("aria-orientation", "horizontal");
      } else {
        ele.classList.add(CLS_VERTICAL);
        this.isVertical = true;
        ele.setAttribute("aria-orientation", "vertical");
        setStyleAttribute(this.element, { "height": formatUnit(this.height), "width": formatUnit(this.width) });
      }
      this.destroyMode();
      this.refreshOverflow();
    };
    Toolbar2.prototype.initScroll = function(element, innerItems) {
      if (!this.scrollModule && this.checkOverflow(element, innerItems[0])) {
        if (this.tbarAlign) {
          this.element.querySelector("." + CLS_ITEMS + " ." + CLS_TBARCENTER).removeAttribute("style");
        }
        if (this.isVertical) {
          this.scrollModule = new VScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        } else {
          this.scrollModule = new HScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        }
        if (this.cssClass) {
          addClass([innerItems[0]], this.cssClass.split(" "));
        }
        var scrollEle = this.scrollModule.element.querySelector("." + CLS_HSCROLLBAR2 + ", .e-vscroll-bar");
        if (scrollEle) {
          scrollEle.removeAttribute("tabindex");
        }
        this.remove(this.scrollModule.element, CLS_TBARPOS);
        setStyleAttribute(this.element, { overflow: "hidden" });
      }
    };
    Toolbar2.prototype.itemWidthCal = function(items) {
      var _this = this;
      var width = 0;
      var style;
      [].slice.call(selectAll("." + CLS_ITEM, items)).forEach(function(el) {
        if (isVisible(el)) {
          style = window.getComputedStyle(el);
          width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
          width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
          width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
        }
      });
      return width;
    };
    Toolbar2.prototype.getScrollCntEle = function(innerItem) {
      var trgClass = this.isVertical ? ".e-vscroll-content" : ".e-hscroll-content";
      return innerItem.querySelector(trgClass);
    };
    Toolbar2.prototype.checkOverflow = function(element, innerItem) {
      if (isNullOrUndefined(element) || isNullOrUndefined(innerItem) || !isVisible(element)) {
        return false;
      }
      var eleWidth = this.isVertical ? element.offsetHeight : element.offsetWidth;
      var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;
      if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
        itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
      }
      var popNav = element.querySelector("." + CLS_TBARNAV);
      var scrollNav = element.querySelector("." + CLS_TBARSCRLNAV);
      var navEleWidth = 0;
      if (popNav) {
        navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
      } else if (scrollNav) {
        navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
      }
      if (itemWidth > eleWidth - navEleWidth) {
        return true;
      } else {
        return false;
      }
    };
    Toolbar2.prototype.refreshOverflow = function() {
      this.resize();
    };
    Toolbar2.prototype.toolbarAlign = function(innerItems) {
      if (this.tbarAlign) {
        this.add(innerItems, CLS_TBARPOS);
        this.itemPositioning();
      }
    };
    Toolbar2.prototype.renderOverflowMode = function() {
      var ele = this.element;
      var innerItems = ele.querySelector("." + CLS_ITEMS);
      var priorityCheck = this.popupPriCount > 0;
      if (ele && ele.children.length > 0) {
        this.offsetWid = ele.offsetWidth;
        this.remove(this.element, "e-toolpop");
        if (Browser.info.name === "msie" && this.height === "auto") {
          ele.style.height = "";
        }
        switch (this.overflowMode) {
          case "Scrollable":
            if (isNullOrUndefined(this.scrollModule)) {
              this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
            }
            break;
          case "Popup":
            this.add(this.element, "e-toolpop");
            if (this.tbarAlign) {
              this.removePositioning();
            }
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
            break;
          case "MultiRow":
            this.add(innerItems, CLS_MULTIROW);
            if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
              this.removePositioning();
              this.add(innerItems, CLS_MULTIROWPOS);
            }
            if (ele.style.overflow === "hidden") {
              ele.style.overflow = "";
            }
            if (Browser.info.name === "msie" || ele.style.height !== "auto") {
              ele.style.height = "auto";
            }
            break;
          case "Extended":
            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              if (this.tbarAlign) {
                this.removePositioning();
              }
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
        }
      }
    };
    Toolbar2.prototype.setOverflowAttributes = function(ele) {
      this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele)));
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-haspopup": "true",
        "aria-label": "overflow"
      };
      attributes(this.element.querySelector("." + CLS_TBARNAV), ariaAttr);
    };
    Toolbar2.prototype.separator = function() {
      var element = this.element;
      var eleItem = [].slice.call(element.querySelectorAll("." + CLS_SEPARATOR));
      var multiVar = element.querySelector("." + CLS_MULTIROW_SEPARATOR);
      var extendVar = element.querySelector("." + CLS_EXTENDABLE_SEPARATOR);
      var eleInlineItem = this.overflowMode === "MultiRow" ? multiVar : extendVar;
      if (eleInlineItem !== null) {
        if (this.overflowMode === "MultiRow") {
          eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === "Extended") {
          eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
        }
      }
      for (var i = 0; i <= eleItem.length - 1; i++) {
        if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {
          if (this.overflowMode === "MultiRow") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);
          } else if (this.overflowMode === "Extended") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);
          }
        }
      }
    };
    Toolbar2.prototype.createPopupEle = function(ele, innerEle) {
      var innerNav = ele.querySelector("." + CLS_TBARNAV);
      var vertical = this.isVertical;
      if (!innerNav) {
        this.createPopupIcon(ele);
      }
      innerNav = ele.querySelector("." + CLS_TBARNAV);
      var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
      var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
      this.element.classList.remove("e-rtl");
      setStyleAttribute(this.element, { direction: "initial" });
      this.checkPriority(ele, innerEle, eleWidth, true);
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      this.element.style.removeProperty("direction");
      this.createPopup();
    };
    Toolbar2.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
      var element = tbarObj.element;
      var poppedEle = [].slice.call(selectAll("." + CLS_POPUP, element.querySelector("." + CLS_ITEMS)));
      var nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
      var nodeIndex = 0;
      var nodePri = 0;
      poppedEle.forEach(function(el, index) {
        nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
        if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
          if (tbarObj.tbResize && nodes.length > index) {
            ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);
            ++nodePri;
          } else {
            ele.insertBefore(el, ele.children[nodes.length]);
            ++nodePri;
          }
        } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (el.classList.contains(CLS_POPOVERFLOW)) {
          popupPri.push(el);
        } else if (tbarObj.tbResize) {
          ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
          ++nodeIndex;
        } else {
          ele.appendChild(el);
        }
        if (el.classList.contains(CLS_SEPARATOR)) {
          setStyleAttribute(el, { display: "", height: sepHeight + "px" });
        } else {
          setStyleAttribute(el, { display: "", height: eleHeight + "px" });
        }
      });
      popupPri.forEach(function(el) {
        ele.appendChild(el);
      });
      var tbarEle = selectAll("." + CLS_ITEM, element.querySelector("." + CLS_ITEMS));
      for (var i = tbarEle.length - 1; i >= 0; i--) {
        var tbarElement = tbarEle[parseInt(i.toString(), 10)];
        if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== "Extended") {
          setStyleAttribute(tbarElement, { display: "none" });
        } else {
          break;
        }
      }
    };
    Toolbar2.prototype.createPopup = function() {
      var element = this.element;
      var sepHeight;
      var sepItem;
      if (this.overflowMode === "Extended") {
        sepItem = element.querySelector("." + CLS_SEPARATOR);
        sepHeight = element.style.height === "auto" || element.style.height === "" ? null : sepItem && sepItem.offsetHeight;
      }
      var eleItem = element.querySelector("." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_POPUP + ")");
      var eleHeight = element.style.height === "auto" || element.style.height === "" ? null : eleItem && eleItem.offsetHeight;
      var ele;
      var popupPri = [];
      if (select("#" + element.id + "_popup." + CLS_POPUPCLASS, element)) {
        ele = select("#" + element.id + "_popup." + CLS_POPUPCLASS, element);
      } else {
        var extendEle = this.createElement("div", {
          id: element.id + "_popup",
          className: CLS_POPUPCLASS + " " + CLS_EXTENDABLECLASS
        });
        var popupEle = this.createElement("div", { id: element.id + "_popup", className: CLS_POPUPCLASS });
        ele = this.overflowMode === "Extended" ? extendEle : popupEle;
      }
      this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
      this.popupInit(element, ele);
    };
    Toolbar2.prototype.getElementOffsetY = function() {
      return this.overflowMode === "Extended" && window.getComputedStyle(this.element).getPropertyValue("box-sizing") === "border-box" ? this.element.clientHeight : this.element.offsetHeight;
    };
    Toolbar2.prototype.popupInit = function(element, ele) {
      if (!this.popObj) {
        element.appendChild(ele);
        if (this.cssClass) {
          addClass([ele], this.cssClass.split(" "));
        }
        setStyleAttribute(this.element, { overflow: "" });
        var eleStyles = window.getComputedStyle(this.element);
        var popup = new Popup(null, {
          relateTo: this.element,
          offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
          enableRtl: this.enableRtl,
          open: this.popupOpen.bind(this),
          close: this.popupClose.bind(this),
          collision: { Y: this.enableCollision ? "flip" : "none" },
          position: this.enableRtl ? { X: "left", Y: "top" } : { X: "right", Y: "top" }
        });
        if (this.overflowMode === "Extended") {
          popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
          popup.offsetX = 0;
        }
        popup.appendTo(ele);
        EventHandler.add(document, "scroll", this.docEvent.bind(this));
        EventHandler.add(document, "click ", this.docEvent.bind(this));
        popup.element.style.maxHeight = popup.element.offsetHeight + "px";
        if (this.isVertical) {
          popup.element.style.visibility = "hidden";
        }
        if (this.isExtendedOpen) {
          var popupNav = this.element.querySelector("." + CLS_TBARNAV);
          popupNav.classList.add(CLS_TBARNAVACT);
          classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
          this.element.querySelector("." + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
        } else {
          popup.hide();
        }
        this.popObj = popup;
      } else {
        var popupEle = this.popObj.element;
        setStyleAttribute(popupEle, { maxHeight: "", display: "block" });
        setStyleAttribute(popupEle, { maxHeight: popupEle.offsetHeight + "px", display: "" });
      }
    };
    Toolbar2.prototype.tbarPopupHandler = function(isOpen) {
      if (this.overflowMode === "Extended") {
        if (isOpen) {
          this.add(this.element, CLS_EXTENDEDPOPOPEN);
        } else {
          this.remove(this.element, CLS_EXTENDEDPOPOPEN);
        }
      }
    };
    Toolbar2.prototype.popupOpen = function(e) {
      var popObj = this.popObj;
      if (!this.isVertical) {
        popObj.offsetY = this.getElementOffsetY();
        popObj.dataBind();
      }
      var popupEle = this.popObj.element;
      var toolEle = this.popObj.element.parentElement;
      var popupNav = toolEle.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "true");
      setStyleAttribute(popObj.element, { height: "auto", maxHeight: "" });
      popObj.element.style.maxHeight = popObj.element.offsetHeight + "px";
      if (this.overflowMode === "Extended") {
        popObj.element.style.minHeight = "";
      }
      var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.add(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
      this.tbarPopupHandler(true);
      var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
      if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
        popObj.height = overflowHeight + "px";
        for (var i = 0; i <= popupEle.childElementCount; i++) {
          var ele = popupEle.children[parseInt(i.toString(), 10)];
          if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
            overflowHeight = ele.offsetTop;
            break;
          }
        }
        setStyleAttribute(popObj.element, { maxHeight: overflowHeight + "px" });
      } else if (this.isVertical) {
        var tbEleData = this.element.getBoundingClientRect();
        setStyleAttribute(popObj.element, { maxHeight: tbEleData.top + this.element.offsetHeight + "px", bottom: 0, visibility: "" });
      }
      if (popObj) {
        var popupOffset = popupEle.getBoundingClientRect();
        if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {
          popObj.collision = { Y: "none" };
          popObj.dataBind();
        }
        popObj.refreshPosition();
      }
    };
    Toolbar2.prototype.popupClose = function(e) {
      var element = this.element;
      var popupNav = element.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "false");
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.remove(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
      this.tbarPopupHandler(false);
    };
    Toolbar2.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
      var popPriority = this.popupPriCount > 0;
      var len = inEle.length;
      var eleWid = eleWidth;
      var eleOffset;
      var checkoffset;
      var sepCheck = 0;
      var itemCount = 0;
      var itemPopCount = 0;
      var checkClass = function(ele2, val) {
        var rVal = false;
        val.forEach(function(cls) {
          if (ele2.classList.contains(cls)) {
            rVal = true;
          }
        });
        return rVal;
      };
      for (var i = len - 1; i >= 0; i--) {
        var mrgn = void 0;
        var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);
        if (this.isVertical) {
          mrgn = parseFloat(compuStyle.marginTop);
          mrgn += parseFloat(compuStyle.marginBottom);
        } else {
          mrgn = parseFloat(compuStyle.marginRight);
          mrgn += parseFloat(compuStyle.marginLeft);
        }
        var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];
        if (fstEleCheck) {
          this.tbarEleMrgn = mrgn;
        }
        eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;
        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;
        if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {
          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
          if (this.isVertical) {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
          } else {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
          }
          itemPopCount++;
        }
        if (this.isVertical) {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;
        } else {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;
        }
        if (checkoffset) {
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {
            if (this.overflowMode === "Extended") {
              var sepEle = inEle[parseInt(i.toString(), 10)];
              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
                itemPopCount++;
              }
              itemCount++;
            } else if (this.overflowMode === "Popup") {
              if (sepCheck > 0 && itemCount === itemPopCount) {
                var sepEle = inEle[i + itemCount + (sepCheck - 1)];
                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  setStyleAttribute(sepEle, { display: "none" });
                }
              }
              sepCheck++;
              itemCount = 0;
              itemPopCount = 0;
            }
          } else {
            itemCount++;
          }
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
            inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
            if (this.isVertical) {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
            } else {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
            }
            itemPopCount++;
          } else {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          }
        }
      }
      if (pre) {
        var popedEle = selectAll("." + CLS_ITEM + ":not(." + CLS_POPUP + ")", this.element);
        this.checkPriority(ele, popedEle, eleWid, false);
      }
    };
    Toolbar2.prototype.createPopupIcon = function(element) {
      var id = element.id.concat("_nav");
      var className = "e-" + element.id.concat("_nav " + CLS_POPUPNAV);
      className = this.overflowMode === "Extended" ? className + " " + CLS_EXTENDPOPUP : className;
      var nav = this.createElement("div", { id, className });
      if (Browser.info.name === "msie" || Browser.info.name === "edge") {
        nav.classList.add("e-ie-align");
      }
      var navItem = this.createElement("div", { className: CLS_POPUPDOWN + " e-icons" });
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      nav.setAttribute("role", "button");
      element.appendChild(nav);
    };
    Toolbar2.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig, eleStyles) {
      var ignoreCount = ig;
      var popEle = this.popObj.element;
      var query = "." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_TBAROVERFLOW + ")";
      var priEleCnt = selectAll("." + CLS_POPUP + ":not(." + CLS_TBAROVERFLOW + ")", popEle).length;
      var checkClass = function(ele, val) {
        return ele.classList.contains(val);
      };
      if (selectAll(query, inEle).length === 0) {
        var eleSep = inEle.children[indx - (indx - sepPri) - 1];
        var ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);
        if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {
          eleSep.style.display = "unset";
          var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
          var prevSep = eleSep.previousElementSibling;
          if (elWid + eleSepWidth < wid || des) {
            inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            if (!isNullOrUndefined(prevSep)) {
              prevSep.style.display = "";
            }
          } else {
            setStyleAttribute(el, eleStyles);
            if (prevSep.classList.contains(CLS_SEPARATOR)) {
              prevSep.style.display = "none";
            }
          }
          eleSep.style.display = "";
        } else {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
        }
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
      }
    };
    Toolbar2.prototype.popupRefresh = function(popupEle, destroy2) {
      var _this = this;
      var ele = this.element;
      var isVer = this.isVertical;
      var innerEle = ele.querySelector("." + CLS_ITEMS);
      var popNav = ele.querySelector("." + CLS_TBARNAV);
      if (isNullOrUndefined(popNav)) {
        return;
      }
      innerEle.removeAttribute("style");
      popupEle.style.display = "block";
      var dimension;
      if (isVer) {
        dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
      } else {
        dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
      }
      var popupEleWidth = 0;
      [].slice.call(popupEle.children).forEach(function(el) {
        popupEleWidth += _this.popupEleWidth(el);
        setStyleAttribute(el, { "position": "" });
      });
      if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
        destroy2 = true;
      }
      this.popupEleRefresh(dimension, popupEle, destroy2);
      popupEle.style.display = "";
      if (popupEle.children.length === 0 && popNav && this.popObj) {
        detach(popNav);
        popNav = null;
        this.popObj.destroy();
        detach(this.popObj.element);
        this.popObj = null;
      }
    };
    Toolbar2.prototype.ignoreEleFetch = function(index, innerEle) {
      var ignoreEle = [].slice.call(innerEle.querySelectorAll("." + CLS_TBARIGNORE));
      var ignoreInx = [];
      var count = 0;
      if (ignoreEle.length > 0) {
        ignoreEle.forEach(function(ele) {
          ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
        });
      } else {
        return 0;
      }
      ignoreInx.forEach(function(val) {
        if (val <= index) {
          count++;
        }
      });
      return count;
    };
    Toolbar2.prototype.checkPopupRefresh = function(root, popEle) {
      popEle.style.display = "block";
      var elWid = this.popupEleWidth(popEle.firstElementChild);
      popEle.firstElementChild.style.removeProperty("Position");
      var tbarWidth = root.offsetWidth - root.querySelector("." + CLS_TBARNAV).offsetWidth;
      var tbarItemsWid = root.querySelector("." + CLS_ITEMS).offsetWidth;
      popEle.style.removeProperty("display");
      if (tbarWidth > elWid + tbarItemsWid) {
        return true;
      }
      return false;
    };
    Toolbar2.prototype.popupEleWidth = function(el) {
      el.style.position = "absolute";
      var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
      var btnText = el.querySelector("." + CLS_TBARBTNTEXT);
      if (el.classList.contains("e-tbtn-align") || el.classList.contains(CLS_TBARTEXT)) {
        var btn = el.children[0];
        if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {
          btnText.style.display = "none";
        } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
          btnText.style.display = "block";
        }
        btn.style.minWidth = "0%";
        elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
        btn.style.minWidth = "";
        btn.style.minHeight = "";
        if (!isNullOrUndefined(btnText)) {
          btnText.style.display = "";
        }
      }
      return elWidth;
    };
    Toolbar2.prototype.popupEleRefresh = function(width, popupEle, destroy2) {
      var popPriority = this.popupPriCount > 0;
      var eleSplice = this.tbarEle;
      var priEleCnt;
      var index;
      var innerEle = this.element.querySelector("." + CLS_ITEMS);
      var ignoreCount = 0;
      var _loop_1 = function(el2) {
        if (el2.classList.contains(CLS_POPPRI) && popPriority && !destroy2) {
          return "continue";
        }
        var elWidth = this_1.popupEleWidth(el2);
        if (el2 === this_1.tbarEle[0]) {
          elWidth += this_1.tbarEleMrgn;
        }
        el2.style.position = "";
        if (elWidth < width || destroy2) {
          var inlineStyles = { minWidth: el2.style.minWidth, height: el2.style.height, minHeight: el2.style.minHeight };
          setStyleAttribute(el2, { minWidth: "", height: "", minHeight: "" });
          if (!el2.classList.contains(CLS_POPOVERFLOW)) {
            el2.classList.remove(CLS_POPUP);
          }
          index = this_1.tbarEle.indexOf(el2);
          if (this_1.tbarAlign) {
            var pos = this_1.items[parseInt(index.toString(), 10)].align;
            index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el2);
            eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()];
            innerEle = this_1.element.querySelector("." + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
          }
          var sepBeforePri_1 = 0;
          if (this_1.overflowMode !== "Extended") {
            eleSplice.slice(0, index).forEach(function(el3) {
              if (el3.classList.contains(CLS_TBAROVERFLOW) || el3.classList.contains(CLS_SEPARATOR)) {
                if (el3.classList.contains(CLS_SEPARATOR)) {
                  el3.style.display = "";
                  width -= el3.offsetWidth;
                }
                sepBeforePri_1++;
              }
            });
          }
          ignoreCount = this_1.ignoreEleFetch(index, innerEle);
          if (el2.classList.contains(CLS_TBAROVERFLOW)) {
            this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el2, destroy2, elWidth, width, ignoreCount, inlineStyles);
            width -= el2.offsetWidth;
          } else if (index === 0) {
            innerEle.insertBefore(el2, innerEle.firstChild);
            width -= el2.offsetWidth;
          } else {
            priEleCnt = selectAll("." + CLS_TBAROVERFLOW, this_1.popObj.element).length;
            innerEle.insertBefore(el2, innerEle.children[index + ignoreCount - priEleCnt]);
            width -= el2.offsetWidth;
          }
          el2.style.height = "";
        } else {
          return "break";
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
        var el = _a[_i];
        var state_1 = _loop_1(el);
        if (state_1 === "break")
          break;
      }
      var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);
      if (checkOverflow && !destroy2) {
        this.renderOverflowMode();
      }
    };
    Toolbar2.prototype.removePositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      this.remove(item, CLS_TBARPOS);
      var innerItem = [].slice.call(item.childNodes);
      innerItem[1].removeAttribute("style");
      innerItem[2].removeAttribute("style");
    };
    Toolbar2.prototype.refreshPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      this.add(item, CLS_TBARPOS);
      this.itemPositioning();
    };
    Toolbar2.prototype.itemPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      var margin;
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      var popupNav = this.element.querySelector("." + CLS_TBARNAV);
      var innerItem;
      if (this.scrollModule) {
        var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
        innerItem = [].slice.call(item.querySelector("." + trgClass).children);
      } else {
        innerItem = [].slice.call(item.childNodes);
      }
      if (this.isVertical) {
        margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
      } else {
        margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
      }
      var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
      if (popupNav) {
        tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
        var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + "px";
        innerItem[2].removeAttribute("style");
        if (this.isVertical) {
          if (this.enableRtl) {
            innerItem[2].style.top = popWid;
          } else {
            innerItem[2].style.bottom = popWid;
          }
        } else {
          if (this.enableRtl) {
            innerItem[2].style.left = popWid;
          } else {
            innerItem[2].style.right = popWid;
          }
        }
      }
      if (tbarWid <= margin) {
        return;
      }
      var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
      innerItem[1].removeAttribute("style");
      var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + "px";
      if (this.isVertical) {
        if (this.enableRtl) {
          innerItem[1].style.marginBottom = mrgn;
        } else {
          innerItem[1].style.marginTop = mrgn;
        }
      } else {
        if (this.enableRtl) {
          innerItem[1].style.marginRight = mrgn;
        } else {
          innerItem[1].style.marginLeft = mrgn;
        }
      }
    };
    Toolbar2.prototype.tbarItemAlign = function(item, itemEle, pos) {
      var _this = this;
      if (item.showAlwaysInPopup && item.overflow !== "Show") {
        return;
      }
      var alignDiv = [];
      alignDiv.push(this.createElement("div", { className: CLS_TBARLEFT }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARCENTER }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARRIGHT }));
      if (pos === 0 && item.align !== "Left") {
        alignDiv.forEach(function(ele) {
          itemEle.appendChild(ele);
        });
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      } else if (item.align !== "Left") {
        var alignEle = itemEle.childNodes;
        var leftAlign_1 = alignDiv[0];
        [].slice.call(alignEle).forEach(function(el) {
          _this.tbarAlgEle.lefts.push(el);
          leftAlign_1.appendChild(el);
        });
        itemEle.appendChild(leftAlign_1);
        itemEle.appendChild(alignDiv[1]);
        itemEle.appendChild(alignDiv[2]);
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      }
    };
    Toolbar2.prototype.ctrlTemplate = function() {
      var _this = this;
      this.ctrlTem = this.trgtEle.cloneNode(true);
      this.add(this.trgtEle, CLS_ITEMS);
      this.tbarEle = [];
      var innerEle = [].slice.call(this.trgtEle.children);
      innerEle.forEach(function(ele) {
        if (ele.tagName === "DIV") {
          _this.tbarEle.push(ele);
          if (!isNullOrUndefined(ele.firstElementChild)) {
            ele.firstElementChild.setAttribute("aria-disabled", "false");
          }
          _this.add(ele, CLS_ITEM);
        }
      });
    };
    Toolbar2.prototype.renderItems = function() {
      var ele = this.element;
      var items = this.items;
      if (this.trgtEle != null) {
        this.ctrlTemplate();
      } else if (ele && items.length > 0) {
        var itemEleDom = void 0;
        if (ele && ele.children.length > 0) {
          itemEleDom = ele.querySelector("." + CLS_ITEMS);
        }
        if (!itemEleDom) {
          itemEleDom = this.createElement("div", { className: CLS_ITEMS });
        }
        this.itemsAlign(items, itemEleDom);
        ele.appendChild(itemEleDom);
      }
    };
    Toolbar2.prototype.setAttr = function(attr, element) {
      var key = Object.keys(attr);
      var keyVal;
      for (var i = 0; i < key.length; i++) {
        keyVal = key[parseInt(i.toString(), 10)];
        if (keyVal === "class") {
          this.add(element, attr["" + keyVal]);
        } else {
          element.setAttribute(keyVal, attr["" + keyVal]);
        }
      }
    };
    Toolbar2.prototype.enableItems = function(items, isEnable) {
      var elements = items;
      var len = elements.length;
      var ele;
      if (isNullOrUndefined(isEnable)) {
        isEnable = true;
      }
      var enable = function(isEnable2, ele2) {
        if (isEnable2) {
          ele2.classList.remove(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "false");
          }
        } else {
          ele2.classList.add(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "true");
          }
        }
      };
      if (!isNullOrUndefined(len) && len >= 1) {
        for (var a = 0, element = [].slice.call(elements); a < len; a++) {
          var itemElement = element[parseInt(a.toString(), 10)];
          if (typeof itemElement === "number") {
            ele = this.getElementByIndex(itemElement);
            if (isNullOrUndefined(ele)) {
              return;
            } else {
              elements[parseInt(a.toString(), 10)] = ele;
            }
          } else {
            ele = itemElement;
          }
          enable(isEnable, ele);
        }
        if (isEnable) {
          removeClass(elements, CLS_DISABLE3);
        } else {
          addClass(elements, CLS_DISABLE3);
        }
      } else {
        if (typeof elements === "number") {
          ele = this.getElementByIndex(elements);
          if (isNullOrUndefined(ele)) {
            return;
          }
        } else {
          ele = items;
        }
        enable(isEnable, ele);
      }
    };
    Toolbar2.prototype.getElementByIndex = function(index) {
      if (this.tbarEle[parseInt(index.toString(), 10)]) {
        return this.tbarEle[parseInt(index.toString(), 10)];
      }
      return null;
    };
    Toolbar2.prototype.addItems = function(items, index) {
      var innerItems;
      this.extendedOpen();
      var itemsDiv = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(itemsDiv)) {
        this.itemsRerender(items);
        return;
      }
      var innerEle;
      var itemAgn = "Left";
      if (isNullOrUndefined(index)) {
        index = 0;
      }
      items.forEach(function(e) {
        if (!isNullOrUndefined(e.align) && e.align !== "Left" && itemAgn === "Left") {
          itemAgn = e.align;
        }
      });
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (isNullOrUndefined(item.type)) {
          item.type = "Button";
        }
        innerItems = selectAll("." + CLS_ITEM, this.element);
        item.align = itemAgn;
        innerEle = this.renderSubComponent(item, index);
        if (this.tbarEle.length >= index && innerItems.length >= 0) {
          if (isNullOrUndefined(this.scrollModule)) {
            this.destroyMode();
          }
          var algIndex = item.align[0] === "L" ? 0 : item.align[0] === "C" ? 1 : 2;
          var ele = void 0;
          if (!this.tbarAlign && itemAgn !== "Left") {
            this.tbarItemAlign(item, itemsDiv, 1);
            this.tbarAlign = true;
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.appendChild(innerEle);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle);
            this.refreshPositioning();
          } else if (this.tbarAlign) {
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle);
            this.refreshPositioning();
          } else if (innerItems.length === 0) {
            innerItems = selectAll("." + CLS_ITEMS, this.element);
            innerItems[0].appendChild(innerEle);
          } else {
            innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);
          }
          this.items.splice(index, 0, item);
          if (item.template) {
            this.tbarEle.splice(this.tbarEle.length - 1, 1);
          }
          this.tbarEle.splice(index, 0, innerEle);
          index++;
          this.offsetWid = itemsDiv.offsetWidth;
        }
      }
      itemsDiv.style.width = "";
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.removeItems = function(args) {
      var elements = args;
      var index;
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (typeof elements === "number") {
        index = parseInt(args.toString(), 10);
        this.removeItemByIndex(index, innerItems);
      } else {
        if (elements && elements.length > 1) {
          for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
            var ele = _a[_i];
            index = this.tbarEle.indexOf(ele);
            this.removeItemByIndex(index, innerItems);
            innerItems = selectAll("." + CLS_ITEM, this.element);
          }
        } else {
          var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
          index = innerItems.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
        }
      }
      this.resize();
    };
    Toolbar2.prototype.removeItemByIndex = function(index, innerItems) {
      if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {
        var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);
        if (this.tbarAlign) {
          var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);
          this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);
        }
        if (this.isReact) {
          this.clearToolbarTemplate(innerItems[parseInt(index.toString(), 10)]);
        }
        var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector(".e-control.e-btn");
        if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {
          btnItem.ej2_instances[0].destroy();
        }
        detach(innerItems[parseInt(index.toString(), 10)]);
        this.items.splice(eleIdx, 1);
        this.tbarEle.splice(eleIdx, 1);
      }
    };
    Toolbar2.prototype.templateRender = function(templateProp, innerEle, item, index) {
      var itemType = item.type;
      var eleObj = templateProp;
      var isComponent;
      if (typeof templateProp === "object") {
        isComponent = typeof eleObj.appendTo === "function";
      }
      if (typeof templateProp === "string" || !isComponent) {
        var templateFn = void 0;
        var val = templateProp;
        var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
        val = typeof templateProp === "string" ? templateProp.trim() : templateProp;
        try {
          if (typeof templateProp === "object" && !isNullOrUndefined(templateProp.tagName)) {
            innerEle.appendChild(templateProp);
          } else if (typeof templateProp === "string" && regEx.test(val)) {
            innerEle.innerHTML = val;
          } else if (document.querySelectorAll(val).length) {
            var ele = document.querySelector(val);
            var tempStr = ele.outerHTML.trim();
            innerEle.appendChild(ele);
            ele.style.display = "";
            if (!isNullOrUndefined(tempStr)) {
              this.tempId.push(val);
            }
          } else {
            templateFn = compile(val);
          }
        } catch (e) {
          templateFn = compile(val);
        }
        var tempArray = void 0;
        if (!isNullOrUndefined(templateFn)) {
          var toolbarTemplateID = this.element.id + index + "_template";
          tempArray = templateFn({}, this, "template", toolbarTemplateID, this.isStringTemplate, void 0, void 0, this.root);
        }
        if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {
          [].slice.call(tempArray).forEach(function(ele2) {
            if (!isNullOrUndefined(ele2.tagName)) {
              ele2.style.display = "";
            }
            innerEle.appendChild(ele2);
          });
        }
      } else if (itemType === "Input") {
        var ele = this.createElement("input");
        if (item.id) {
          ele.id = item.id;
        } else {
          ele.id = getUniqueID("tbr-ipt");
        }
        innerEle.appendChild(ele);
        eleObj.appendTo(ele);
      }
      this.add(innerEle, CLS_TEMPLATE);
      var firstChild = innerEle.firstElementChild;
      if (!isNullOrUndefined(firstChild)) {
        firstChild.setAttribute("tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
        firstChild.setAttribute("data-tabindex", isNullOrUndefined(firstChild.getAttribute("tabIndex")) ? "-1" : this.getDataTabindex(firstChild));
      }
      this.tbarEle.push(innerEle);
    };
    Toolbar2.prototype.buttonRendering = function(item, innerEle) {
      var dom = this.createElement("button", { className: CLS_TBARBTN });
      dom.setAttribute("type", "button");
      var textStr = item.text;
      var iconCss;
      var iconPos;
      if (item.id) {
        dom.id = item.id;
      } else {
        dom.id = getUniqueID("e-tbr-btn");
      }
      var btnTxt = this.createElement("span", { className: "e-tbar-btn-text" });
      if (textStr) {
        btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;
        dom.appendChild(btnTxt);
        dom.classList.add("e-tbtn-txt");
      } else {
        this.add(innerEle, "e-tbtn-align");
      }
      if (item.prefixIcon || item.suffixIcon) {
        if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
          iconCss = item.prefixIcon + " e-icons";
          iconPos = "Left";
        } else {
          iconCss = item.suffixIcon + " e-icons";
          iconPos = "Right";
        }
      }
      var btnObj = new Button({ iconCss, iconPosition: iconPos });
      btnObj.createElement = this.createElement;
      btnObj.appendTo(dom);
      if (item.width) {
        setStyleAttribute(dom, { "width": formatUnit(item.width) });
      }
      return dom;
    };
    Toolbar2.prototype.renderSubComponent = function(item, index) {
      var dom;
      var innerEle = this.createElement("div", { className: CLS_ITEM });
      var tempDom = this.createElement("div", {
        innerHTML: this.enableHtmlSanitizer && !isNullOrUndefined(item.tooltipText) ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText
      });
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      if (item.htmlAttributes) {
        this.setAttr(item.htmlAttributes, innerEle);
      }
      if (item.tooltipText) {
        innerEle.setAttribute("title", tempDom.textContent);
      }
      if (item.cssClass) {
        innerEle.className = innerEle.className + " " + item.cssClass;
      }
      if (item.template) {
        this.templateRender(item.template, innerEle, item, index);
      } else {
        switch (item.type) {
          case "Button":
            dom = this.buttonRendering(item, innerEle);
            dom.setAttribute("tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("data-tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("aria-label", item.text || item.tooltipText);
            dom.setAttribute("aria-disabled", "false");
            innerEle.appendChild(dom);
            innerEle.addEventListener("click", this.itemClick.bind(this));
            break;
          case "Separator":
            this.add(innerEle, CLS_SEPARATOR);
            break;
        }
      }
      if (item.showTextOn) {
        var sTxt = item.showTextOn;
        if (sTxt === "Toolbar") {
          this.add(innerEle, CLS_POPUPTEXT);
          this.add(innerEle, "e-tbtn-align");
        } else if (sTxt === "Overflow") {
          this.add(innerEle, CLS_TBARTEXT);
        }
      }
      if (item.overflow) {
        var overflow = item.overflow;
        if (overflow === "Show") {
          this.add(innerEle, CLS_TBAROVERFLOW);
        } else if (overflow === "Hide") {
          if (!innerEle.classList.contains(CLS_SEPARATOR)) {
            this.add(innerEle, CLS_POPOVERFLOW);
          }
        }
      }
      if (item.overflow !== "Show" && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
        this.add(innerEle, CLS_POPPRI);
        this.popupPriCount++;
      }
      if (item.disabled) {
        this.add(innerEle, CLS_DISABLE3);
      }
      if (item.visible === false) {
        this.add(innerEle, CLS_HIDDEN);
      }
      return innerEle;
    };
    Toolbar2.prototype.getDataTabindex = function(ele) {
      return isNullOrUndefined(ele.getAttribute("data-tabindex")) ? "-1" : ele.getAttribute("data-tabindex");
    };
    Toolbar2.prototype.itemClick = function(e) {
      this.activeEleSwitch(e.currentTarget);
    };
    Toolbar2.prototype.activeEleSwitch = function(ele) {
      this.activeEleRemove(ele.firstElementChild);
      this.activeEle.focus();
    };
    Toolbar2.prototype.activeEleRemove = function(curEle) {
      if (!isNullOrUndefined(this.activeEle)) {
        this.activeEle.setAttribute("tabindex", this.getDataTabindex(this.activeEle));
      }
      this.activeEle = curEle;
      if (this.getDataTabindex(this.activeEle) === "-1") {
        if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
          this.updateTabIndex("-1");
          curEle.removeAttribute("tabindex");
        } else {
          var tabIndex = parseInt(this.getDataTabindex(this.activeEle)) + 1;
          this.activeEle.setAttribute("tabindex", tabIndex.toString());
        }
      }
    };
    Toolbar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toolbar2.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar2.prototype.itemsRerender = function(newProp) {
      this.items = this.tbarItemsCol;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      this.destroyMode();
      this.destroyItems();
      this.items = newProp;
      this.tbarItemsCol = this.items;
      this.renderItems();
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.resize = function() {
      var ele = this.element;
      this.tbResize = true;
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.overflowMode === "Popup") {
        this.popObj.hide();
      }
      var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
      if (!checkOverflow) {
        this.destroyScroll();
        var multirowele = ele.querySelector("." + CLS_ITEMS);
        if (!isNullOrUndefined(multirowele)) {
          this.remove(multirowele, CLS_MULTIROWPOS);
          if (this.tbarAlign) {
            this.add(multirowele, CLS_TBARPOS);
          }
        }
      }
      if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
        return;
      }
      if (this.offsetWid > ele.offsetWidth || checkOverflow) {
        this.renderOverflowMode();
      }
      if (this.popObj) {
        if (this.overflowMode === "Extended") {
          var eleStyles = window.getComputedStyle(this.element);
          this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
        }
        if (this.tbarAlign) {
          this.removePositioning();
        }
        this.popupRefresh(this.popObj.element, false);
        if (this.tbarAlign) {
          this.refreshPositioning();
        }
      }
      if (this.element.querySelector("." + CLS_HSCROLLBAR2)) {
        this.scrollStep = this.element.querySelector("." + CLS_HSCROLLBAR2).offsetWidth;
      }
      this.offsetWid = ele.offsetWidth;
      this.tbResize = false;
      this.separator();
    };
    Toolbar2.prototype.orientationChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.resize();
      }, 500);
    };
    Toolbar2.prototype.extendedOpen = function() {
      var sib = this.element.querySelector("." + CLS_EXTENDABLECLASS);
      if (this.overflowMode === "Extended" && sib) {
        this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
      }
    };
    Toolbar2.prototype.updateHideEleTabIndex = function(ele, isHidden, isElement, eleIndex, innerItems) {
      if (isElement) {
        eleIndex = innerItems.indexOf(ele);
      }
      var nextEle = innerItems[++eleIndex];
      while (nextEle) {
        var skipEle = this.eleContains(nextEle);
        if (!skipEle) {
          var dataTabIndex = nextEle.firstElementChild.getAttribute("data-tabindex");
          if (isHidden && dataTabIndex === "-1") {
            nextEle.firstElementChild.setAttribute("tabindex", "0");
          } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute("tabindex")) {
            nextEle.firstElementChild.setAttribute("tabindex", dataTabIndex);
          }
          break;
        }
        nextEle = innerItems[++eleIndex];
      }
    };
    Toolbar2.prototype.clearToolbarTemplate = function(templateEle) {
      if (this.registeredTemplate && this.registeredTemplate["template"]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["template"].length; index++) {
          var registeredItem = registeredTemplates["template"][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], [registeredTemplates["template"][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + CLS_ITEM);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate(["template"], index);
            break;
          }
        }
      }
    };
    Toolbar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var tEle = this.element;
      var wid = tEle.offsetWidth;
      this.extendedOpen();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProb = Object.keys(newProp.items);
              for (var i = 0; i < changedProb.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];
                var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])["" + property];
                if (this.tbarAlign || property === "align") {
                  this.refresh();
                  this.trigger("created");
                  break;
                }
                var popupPriCheck = property === "showAlwaysInPopup" && !newProperty;
                var booleanCheck = property === "overflow" && this.popupPriCount !== 0;
                if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {
                  --this.popupPriCount;
                }
                if (isNullOrUndefined(this.scrollModule)) {
                  this.destroyMode();
                }
                var itemCol = [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, tEle));
                if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {
                  this.clearToolbarTemplate(itemCol[parseInt(index.toString(), 10)]);
                }
                detach(itemCol[parseInt(index.toString(), 10)]);
                this.tbarEle.splice(index, 1);
                this.addItems([this.items[parseInt(index.toString(), 10)]], index);
                this.items.splice(index, 1);
                if (this.items[parseInt(index.toString(), 10)].template) {
                  this.tbarEle.splice(this.items.length, 1);
                }
              }
            } else {
              this.itemsRerender(newProp.items);
            }
            break;
          case "width":
            setStyleAttribute(tEle, { "width": formatUnit(newProp.width) });
            this.refreshOverflow();
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "overflowMode":
            this.destroyMode();
            this.renderOverflowMode();
            if (this.enableRtl) {
              this.add(tEle, CLS_RTL3);
            }
            this.refreshOverflow();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(tEle, CLS_RTL3);
            } else {
              this.remove(tEle, CLS_RTL3);
            }
            if (!isNullOrUndefined(this.scrollModule)) {
              if (newProp.enableRtl) {
                this.add(this.scrollModule.element, CLS_RTL3);
              } else {
                this.remove(this.scrollModule.element, CLS_RTL3);
              }
            }
            if (!isNullOrUndefined(this.popObj)) {
              if (newProp.enableRtl) {
                this.add(this.popObj.element, CLS_RTL3);
              } else {
                this.remove(this.popObj.element, CLS_RTL3);
              }
            }
            if (this.tbarAlign) {
              this.itemPositioning();
            }
            break;
          case "scrollStep":
            if (this.scrollModule) {
              this.scrollModule.scrollStep = this.scrollStep;
            }
            break;
          case "enableCollision":
            if (this.popObj) {
              this.popObj.collision = { Y: this.enableCollision ? "flip" : "none" };
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "allowKeyboard":
            this.unwireKeyboardEvent();
            if (newProp.allowKeyboard) {
              this.wireKeyboardEvent();
            }
            break;
        }
      }
    };
    Toolbar2.prototype.hideItem = function(index, value) {
      var isElement = typeof index === "object" ? true : false;
      var eleIndex = index;
      var ele;
      if (!isElement && isNullOrUndefined(eleIndex)) {
        return;
      }
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (isElement) {
        ele = index;
      } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {
        var innerItems_1 = [].slice.call(selectAll("." + CLS_ITEM, this.element));
        ele = innerItems_1[parseInt(eleIndex.toString(), 10)];
      }
      if (ele) {
        if (value) {
          ele.classList.add(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            if (isNullOrUndefined(ele.firstElementChild.getAttribute("tabindex")) || ele.firstElementChild.getAttribute("tabindex") !== "-1") {
              this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
            }
          }
        } else {
          ele.classList.remove(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
          }
        }
        this.refreshOverflow();
      }
    };
    __decorate9([
      Collection([], Item)
    ], Toolbar2.prototype, "items", void 0);
    __decorate9([
      Property("auto")
    ], Toolbar2.prototype, "width", void 0);
    __decorate9([
      Property("auto")
    ], Toolbar2.prototype, "height", void 0);
    __decorate9([
      Property("")
    ], Toolbar2.prototype, "cssClass", void 0);
    __decorate9([
      Property("Scrollable")
    ], Toolbar2.prototype, "overflowMode", void 0);
    __decorate9([
      Property()
    ], Toolbar2.prototype, "scrollStep", void 0);
    __decorate9([
      Property(true)
    ], Toolbar2.prototype, "enableCollision", void 0);
    __decorate9([
      Property(true)
    ], Toolbar2.prototype, "enableHtmlSanitizer", void 0);
    __decorate9([
      Property(true)
    ], Toolbar2.prototype, "allowKeyboard", void 0);
    __decorate9([
      Event()
    ], Toolbar2.prototype, "clicked", void 0);
    __decorate9([
      Event()
    ], Toolbar2.prototype, "created", void 0);
    __decorate9([
      Event()
    ], Toolbar2.prototype, "destroyed", void 0);
    __decorate9([
      Event()
    ], Toolbar2.prototype, "beforeCreate", void 0);
    Toolbar2 = __decorate9([
      NotifyPropertyChanges
    ], Toolbar2);
    return Toolbar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ACRDN_ROOT = "e-acrdn-root";
var CLS_ROOT3 = "e-accordion";
var CLS_ITEM2 = "e-acrdn-item";
var CLS_ITEMFOCUS = "e-item-focus";
var CLS_ITEMHIDE = "e-hide";
var CLS_HEADER = "e-acrdn-header";
var CLS_HEADERICN = "e-acrdn-header-icon";
var CLS_HEADERCTN = "e-acrdn-header-content";
var CLS_CONTENT = "e-acrdn-panel";
var CLS_CTENT = "e-acrdn-content";
var CLS_TOOGLEICN = "e-toggle-icon";
var CLS_COLLAPSEICN = "e-tgl-collapse-icon e-icons";
var CLS_EXPANDICN = "e-expand-icon";
var CLS_RTL4 = "e-rtl";
var CLS_CTNHIDE = "e-content-hide";
var CLS_SLCT = "e-select";
var CLS_SLCTED = "e-selected";
var CLS_ACTIVE = "e-active";
var CLS_ANIMATE = "e-animate";
var CLS_DISABLE4 = "e-overlay";
var CLS_TOGANIMATE = "e-toggle-animation";
var CLS_NEST = "e-nested";
var CLS_EXPANDSTATE = "e-expand-state";
var CLS_CONTAINER = "e-accordion-container";
var AccordionActionSettings = (
  /** @class */
  function(_super) {
    __extends10(AccordionActionSettings2, _super);
    function AccordionActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Property("SlideDown")
    ], AccordionActionSettings2.prototype, "effect", void 0);
    __decorate10([
      Property(400)
    ], AccordionActionSettings2.prototype, "duration", void 0);
    __decorate10([
      Property("linear")
    ], AccordionActionSettings2.prototype, "easing", void 0);
    return AccordionActionSettings2;
  }(ChildProperty)
);
var AccordionAnimationSettings = (
  /** @class */
  function(_super) {
    __extends10(AccordionAnimationSettings2, _super);
    function AccordionAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "collapse", void 0);
    __decorate10([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "expand", void 0);
    return AccordionAnimationSettings2;
  }(ChildProperty)
);
var AccordionItem = (
  /** @class */
  function(_super) {
    __extends10(AccordionItem2, _super);
    function AccordionItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Property(null)
    ], AccordionItem2.prototype, "content", void 0);
    __decorate10([
      Property(null)
    ], AccordionItem2.prototype, "header", void 0);
    __decorate10([
      Property(null)
    ], AccordionItem2.prototype, "cssClass", void 0);
    __decorate10([
      Property(null)
    ], AccordionItem2.prototype, "iconCss", void 0);
    __decorate10([
      Property(false)
    ], AccordionItem2.prototype, "expanded", void 0);
    __decorate10([
      Property(true)
    ], AccordionItem2.prototype, "visible", void 0);
    __decorate10([
      Property(false)
    ], AccordionItem2.prototype, "disabled", void 0);
    __decorate10([
      Property()
    ], AccordionItem2.prototype, "id", void 0);
    return AccordionItem2;
  }(ChildProperty)
);
var Accordion = (
  /** @class */
  function(_super) {
    __extends10(Accordion2, _super);
    function Accordion2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.keyConfigs = {
        moveUp: "uparrow",
        moveDown: "downarrow",
        enter: "enter",
        space: "space",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Accordion2.prototype.destroy = function() {
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      var ele = this.element;
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.isDestroy = true;
      this.restoreContent(null);
      [].slice.call(ele.children).forEach(function(el) {
        ele.removeChild(el);
      });
      if (this.trgtEle) {
        this.trgtEle = null;
        while (this.ctrlTem.firstElementChild) {
          ele.appendChild(this.ctrlTem.firstElementChild);
        }
        this.ctrlTem = null;
      }
      ele.classList.remove(CLS_ACRDN_ROOT);
      ele.removeAttribute("style");
      this.element.removeAttribute("data-ripple");
      if (!this.isNested && isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Accordion2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT);
      this.isNested = false;
      this.templateEle = [];
      if (!this.isDestroy) {
        this.isDestroy = false;
      }
      if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {
        if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT3)) {
          nested.classList.add(CLS_NEST);
          this.isNested = true;
        }
      } else {
        this.element.classList.add(CLS_ACRDN_ROOT);
      }
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL4);
      }
    };
    Accordion2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Accordion2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Accordion2.prototype.render = function() {
      this.initializeHeaderTemplate();
      this.initializeItemTemplate();
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };
    Accordion2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      setStyleAttribute(this.element, { "width": width, "height": height });
      if (isNullOrUndefined(this.initExpand)) {
        this.initExpand = [];
      }
      if (this.expandedIndices.length > 0) {
        this.initExpand = this.expandedIndices;
      }
    };
    Accordion2.prototype.renderControl = function() {
      this.trgtEle = this.element.children.length > 0 ? select("div", this.element) : null;
      this.renderItems();
      this.initItemExpand();
    };
    Accordion2.prototype.wireFocusEvents = function() {
      var acrdItem = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2));
      for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {
        var item = acrdItem_1[_i];
        var headerEle = item.querySelector("." + CLS_HEADER);
        if (item.childElementCount > 0 && headerEle) {
          EventHandler.clearEvents(headerEle);
          EventHandler.add(headerEle, "focus", this.focusIn, this);
          EventHandler.add(headerEle, "blur", this.focusOut, this);
        }
      }
    };
    Accordion2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
    };
    Accordion2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      if (!this.isNested && !this.isDestroy) {
        this.removeRippleEffect = rippleEffect(this.element, { selector: "." + CLS_HEADER });
      }
      if (!this.isNested) {
        this.keyModule = new KeyboardEvents(this.element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigs,
          eventName: "keydown"
        });
      }
    };
    Accordion2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Accordion2.prototype.initializeHeaderTemplate = function() {
      if (this.headerTemplate) {
        this.headerTemplateFn = this.templateParser(this.headerTemplate);
      }
    };
    Accordion2.prototype.initializeItemTemplate = function() {
      if (this.itemTemplate) {
        this.itemTemplateFn = this.templateParser(this.itemTemplate);
      }
    };
    Accordion2.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Accordion2.prototype.getItemTemplate = function() {
      return this.itemTemplateFn;
    };
    Accordion2.prototype.focusIn = function(e) {
      e.target.parentElement.classList.add(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.focusOut = function(e) {
      e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.ctrlTemplate = function() {
      this.ctrlTem = this.element.cloneNode(true);
      var innerEles;
      var rootEle = select("." + CLS_CONTAINER, this.element);
      if (rootEle) {
        innerEles = rootEle.children;
      } else {
        innerEles = this.element.children;
      }
      var items = [];
      [].slice.call(innerEles).forEach(function(el) {
        items.push({
          header: el.childElementCount > 0 && el.children[0] ? el.children[0] : "",
          content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ""
        });
        el.parentNode.removeChild(el);
      });
      if (rootEle) {
        this.element.removeChild(rootEle);
      }
      this.setProperties({ items }, true);
    };
    Accordion2.prototype.toggleIconGenerate = function() {
      var tglIcon = this.createElement("div", { className: CLS_TOOGLEICN });
      var hdrColIcon = this.createElement("span", { className: CLS_COLLAPSEICN });
      tglIcon.appendChild(hdrColIcon);
      return tglIcon;
    };
    Accordion2.prototype.initItemExpand = function() {
      var len = this.initExpand.length;
      if (len === 0) {
        return;
      }
      if (this.expandMode === "Single") {
        this.expandItem(true, this.initExpand[len - 1]);
      } else {
        for (var i = 0; i < len; i++) {
          this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.renderItems = function() {
      var _this = this;
      var ele = this.element;
      var innerItem;
      var innerDataSourceItem;
      if (!isNullOrUndefined(this.trgtEle)) {
        this.ctrlTemplate();
      }
      if (this.dataSource.length > 0) {
        this.dataSource.forEach(function(item, index) {
          innerDataSourceItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerDataSourceItem);
          if (innerDataSourceItem.childElementCount > 0) {
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          }
        });
      } else {
        var items = this.items;
        if (ele && items.length > 0) {
          items.forEach(function(item, index) {
            innerItem = _this.renderInnerItem(item, index);
            ele.appendChild(innerItem);
            if (innerItem.childElementCount > 0) {
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
            }
          });
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      var items = this.getItems();
      var eventArgs = {};
      var tglIcon;
      var acrdEle = closest(trgt, "." + CLS_ROOT3);
      if (acrdEle !== this.element) {
        return;
      }
      trgt.classList.add("e-target");
      var acrdnItem = closest(trgt, "." + CLS_ITEM2);
      var acrdnHdr = closest(trgt, "." + CLS_HEADER);
      var acrdnCtn = closest(trgt, "." + CLS_CONTENT);
      if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {
        acrdnHdr = acrdnItem.children[0];
        acrdnCtn = acrdnItem.children[1];
      }
      if (acrdnHdr) {
        tglIcon = select("." + CLS_TOOGLEICN, acrdnHdr);
      }
      var acrdnCtnItem;
      if (acrdnHdr) {
        acrdnCtnItem = closest(acrdnHdr, "." + CLS_ITEM2);
      } else if (acrdnCtn) {
        acrdnCtnItem = closest(acrdnCtn, "." + CLS_ITEM2);
      }
      var index = this.getIndexByItem(acrdnItem);
      if (acrdnCtnItem) {
        eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
      }
      eventArgs.originalEvent = e;
      var ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;
      if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select("." + CLS_HEADER + " ." + CLS_TOOGLEICN, acrdnCtnItem)))) {
        acrdnItem.appendChild(this.contentRendering(index));
        this.ariaAttrUpdate(acrdnItem);
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      } else {
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.afterContentRender = function(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
      var _this = this;
      var acrdActive = [];
      this.trigger("clicked", eventArgs);
      var cntclkCheck = acrdnCtn && !isNullOrUndefined(select(".e-target", acrdnCtn));
      var inlineAcrdnSel = "." + CLS_CONTENT + " ." + CLS_ROOT3;
      var inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));
      var nestContCheck = acrdnCtn && isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) || !(closest(trgt, "." + CLS_ROOT3) === this.element);
      cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
      trgt.classList.remove("e-target");
      if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
        return;
      }
      var acrdcontainer = this.element.querySelector("." + CLS_CONTAINER);
      var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
      [].slice.call(acrdnchild).forEach(function(el2) {
        if (el2.classList.contains(CLS_ACTIVE)) {
          acrdActive.push(el2);
        }
      });
      var acrdAniEle = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2 + " [" + CLS_ANIMATE + "]"));
      if (acrdAniEle.length > 0) {
        for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
          var el = acrdAniEle_1[_i];
          acrdActive.push(el.parentElement);
        }
      }
      var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute("e-animate") === "true";
      var sameHeader = false;
      if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {
        var acrdnCtn_1 = select("." + CLS_CONTENT, acrdnItem);
        var acrdnRoot = closest(acrdnItem, "." + CLS_ACRDN_ROOT);
        var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
        if (isNullOrUndefined(acrdnCtn_1)) {
          return;
        }
        sameHeader = expandState === acrdnItem;
        if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
          this.collapse(acrdnCtn_1);
        } else {
          if (acrdActive.length > 0 && this.expandMode === "Single" && !sameContentCheck) {
            acrdActive.forEach(function(el2) {
              _this.collapse(select("." + CLS_CONTENT, el2));
              el2.classList.remove(CLS_EXPANDSTATE);
            });
          }
          this.expand(acrdnCtn_1);
        }
        if (!isNullOrUndefined(expandState) && !sameHeader) {
          expandState.classList.remove(CLS_EXPANDSTATE);
        }
      }
    };
    Accordion2.prototype.eleMoveFocus = function(action, root, trgt) {
      var clst;
      var clstItem = closest(trgt, "." + CLS_ITEM2);
      if (trgt === root) {
        clst = (action === "moveUp" ? trgt.lastElementChild : trgt).querySelector("." + CLS_HEADER);
      } else if (trgt.classList.contains(CLS_HEADER)) {
        clstItem = action === "moveUp" ? clstItem.previousElementSibling : clstItem.nextElementSibling;
        if (clstItem) {
          clst = select("." + CLS_HEADER, clstItem);
        }
      }
      if (clst) {
        clst.focus();
      }
    };
    Accordion2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      var header = closest(e.target, CLS_HEADER);
      if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT3) && !trgt.classList.contains(CLS_HEADER)) {
        return;
      }
      var clst;
      var root = this.element;
      var content;
      switch (e.action) {
        case "moveUp":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "moveDown":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "space":
        case "enter":
          content = trgt.nextElementSibling;
          if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {
            if (content.getAttribute("e-animate") !== "true") {
              trgt.click();
            }
          } else {
            trgt.click();
          }
          e.preventDefault();
          break;
        case "home":
        case "end":
          clst = e.action === "home" ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
          clst.focus();
          e.preventDefault();
          break;
      }
    };
    Accordion2.prototype.headerEleGenerate = function() {
      var header = this.createElement("div", { className: CLS_HEADER, id: getUniqueID("acrdn_header") });
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-disabled": "false",
        "aria-expanded": "false"
      };
      attributes(header, ariaAttr);
      return header;
    };
    Accordion2.prototype.renderInnerItem = function(item, index) {
      var innerEle = this.createElement("div", {
        className: CLS_ITEM2,
        id: item.id || getUniqueID("acrdn_item")
      });
      if (this.headerTemplate) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        append(this.getHeaderTemplate()(item, this, "headerTemplate", this.element.id + "_headerTemplate", false), hdrEle);
        innerEle.appendChild(ctnEle);
        ctnEle.appendChild(this.toggleIconGenerate());
        this.add(innerEle, CLS_SLCT);
        return innerEle;
      }
      if (item.header && this.angularnativeCondiCheck(item, "header")) {
        if (this.enableHtmlSanitizer && typeof item.header === "string") {
          item.header = SanitizeHtmlHelper.sanitize(item.header);
        }
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index));
        innerEle.appendChild(ctnEle);
      }
      var hdr = select("." + CLS_HEADER, innerEle);
      if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {
        if (this.initExpand.indexOf(index) === -1) {
          this.initExpand.push(index);
        }
      }
      if (item.cssClass) {
        addClass([innerEle], item.cssClass.split(" "));
      }
      if (item.disabled) {
        addClass([innerEle], CLS_DISABLE4);
      }
      if (item.visible === false) {
        addClass([innerEle], CLS_ITEMHIDE);
      }
      if (item.iconCss) {
        var hdrIcnEle = this.createElement("div", { className: CLS_HEADERICN });
        var icon = this.createElement("span", { className: item.iconCss + " e-icons" });
        hdrIcnEle.appendChild(icon);
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          hdr.appendChild(hdrIcnEle);
          innerEle.appendChild(hdr);
        } else {
          hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
        }
      }
      if (item.content && this.angularnativeCondiCheck(item, "content")) {
        var hdrIcon = this.toggleIconGenerate();
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          innerEle.appendChild(hdr);
        }
        hdr.appendChild(hdrIcon);
        this.add(innerEle, CLS_SLCT);
      }
      return innerEle;
    };
    Accordion2.prototype.angularnativeCondiCheck = function(item, prop) {
      var property = prop === "content" ? item.content : item.header;
      var content = property;
      if (this.isAngular && !isNullOrUndefined(content.elementRef)) {
        var data = content.elementRef.nativeElement.data;
        if (isNullOrUndefined(data) || data === "" || data.indexOf("bindings=") === -1) {
          return true;
        }
        var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace("bindings=", ""));
        if (!isNullOrUndefined(parseddata) && parseddata["ng-reflect-ng-if"] === "false") {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    };
    Accordion2.prototype.fetchElement = function(ele, value, index) {
      var templateFn;
      var temString;
      try {
        if (document.querySelectorAll(value).length && value !== "Button") {
          var eleVal = document.querySelector(value);
          temString = eleVal.outerHTML.trim();
          ele.appendChild(eleVal);
          eleVal.style.display = "";
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        if (typeof value === "string") {
          ele.innerHTML = SanitizeHtmlHelper.sanitize(value);
        } else if (value instanceof HTMLElement) {
          ele.appendChild(value);
          if (this.trgtEle) {
            ele.firstElementChild.style.display = "";
          }
        } else {
          templateFn = compile(value);
        }
      }
      var tempArray;
      if (!isNullOrUndefined(templateFn)) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        var templateProps = void 0;
        var templateName = void 0;
        if (ele.classList.contains(CLS_HEADERCTN)) {
          templateProps = this.element.id + index + "_header";
          templateName = "header";
        } else if (ele.classList.contains(CLS_CTENT)) {
          templateProps = this.element.id + index + "_content";
          templateName = "content";
        }
        tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);
      }
      if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {
        [].slice.call(tempArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (ele.childElementCount === 0) {
        ele.innerHTML = SanitizeHtmlHelper.sanitize(value);
      }
      if (!isNullOrUndefined(temString)) {
        if (this.templateEle.indexOf(value) === -1) {
          this.templateEle.push(value);
        }
      }
      return ele;
    };
    Accordion2.prototype.ariaAttrUpdate = function(itemEle) {
      var header = select("." + CLS_HEADER, itemEle);
      var content = select("." + CLS_CONTENT, itemEle);
      header.setAttribute("aria-controls", content.id);
      content.setAttribute("aria-labelledby", header.id);
      content.setAttribute("role", "region");
    };
    Accordion2.prototype.contentRendering = function(index) {
      var itemcnt = this.createElement("div", { className: CLS_CONTENT + " " + CLS_CTNHIDE, id: getUniqueID("acrdn_panel") });
      attributes(itemcnt, { "aria-hidden": "true" });
      var ctn = this.createElement("div", { className: CLS_CTENT });
      if (this.dataSource.length > 0) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, "itemTemplate", this.element.id + "_itemTemplate", false), ctn);
        itemcnt.appendChild(ctn);
      } else {
        if (this.enableHtmlSanitizer && typeof this.items[parseInt(index.toString(), 10)].content) {
          this.items[parseInt(index.toString(), 10)].content = SanitizeHtmlHelper.sanitize(this.items[parseInt(index.toString(), 10)].content);
        }
        itemcnt.appendChild(this.fetchElement(ctn, this.items[parseInt(index.toString(), 10)].content, index));
      }
      return itemcnt;
    };
    Accordion2.prototype.expand = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute("e-animate") !== "true" || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var acrdnRoot = closest(trgtItemEle, "." + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
      var animation = {
        name: this.animation.expand.effect,
        duration: this.animation.expand.duration,
        timingFunction: this.animation.expand.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: true
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          icon.classList.add(CLS_TOGANIMATE);
          _this.expandedItemsPush(trgtItemEle);
          if (!isNullOrUndefined(expandState)) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }
          trgtItemEle.classList.add(CLS_EXPANDSTATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.expandProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.expandProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.expandAnimation = function(ef, icn, trgt, trgtItemEle, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideDown";
        animate.name = "SlideDown";
      }
      var height;
      this.lastActiveItemId = trgtItemEle.id;
      if (ef === "SlideDown") {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
          trgt.style.position = "absolute";
          height = trgtItemEle.offsetHeight;
          trgt.style.maxHeight = trgt.offsetHeight + "px";
          trgtItemEle.style.maxHeight = "";
        };
        animate.progress = function() {
          trgtItemEle.style.minHeight = height + trgt.offsetHeight + "px";
        };
        animate.end = function() {
          setStyleAttribute(trgt, { "position": "", "maxHeight": "" });
          trgtItemEle.style.minHeight = "";
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      } else {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
        };
        animate.end = function() {
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.expandProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(trgt, CLS_CTNHIDE);
      this.add(trgtItemEle, CLS_SLCTED);
      this.add(icon, CLS_EXPANDICN);
      if (progress === "end") {
        this.add(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "false");
        attributes(trgt.previousElementSibling, { "aria-expanded": "true" });
        icon.classList.remove(CLS_TOGANIMATE);
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.expandedItemsPush = function(item) {
      var index = this.getIndexByItem(item);
      if (this.expandedIndices.indexOf(index) === -1) {
        var temp = [].slice.call(this.expandedIndices);
        temp.push(index);
        this.setProperties({ expandedIndices: temp }, true);
      }
    };
    Accordion2.prototype.getIndexByItem = function(item) {
      var itemEle = this.getItemElements();
      return [].slice.call(itemEle).indexOf(item);
    };
    Accordion2.prototype.getItemElements = function() {
      var itemEle = [];
      var itemCollection = this.element.children;
      [].slice.call(itemCollection).forEach(function(el) {
        if (el.classList.contains(CLS_ITEM2)) {
          itemEle.push(el);
        }
      });
      return itemEle;
    };
    Accordion2.prototype.expandedItemsPop = function(item) {
      var index = this.getIndexByItem(item);
      var temp = [].slice.call(this.expandedIndices);
      temp.splice(temp.indexOf(index), 1);
      this.setProperties({ expandedIndices: temp }, true);
    };
    Accordion2.prototype.collapse = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var animation = {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: false
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          _this.expandedItemsPop(trgtItemEle);
          trgtItemEle.classList.remove(CLS_EXPANDSTATE);
          icon.classList.add(CLS_TOGANIMATE);
          if (animation.name === "None" && animationMode !== "Enable" || animationMode === "Disable") {
            _this.collapseProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.collapseProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.collapseAnimation = function(ef, trgt, trgtItEl, icn, animate, args) {
      var _this = this;
      if (ef === "None" && animationMode === "Enable") {
        ef = "SlideUp";
        animate.name = "SlideUp";
      }
      var height;
      var trgtHeight;
      var itemHeight;
      var remain;
      this.lastActiveItemId = trgtItEl.id;
      if (ef === "SlideUp") {
        animate.begin = function() {
          itemHeight = trgtItEl.offsetHeight;
          trgtItEl.style.minHeight = itemHeight + "px";
          trgt.style.position = "absolute";
          height = trgtItEl.offsetHeight;
          trgtHeight = trgt.offsetHeight;
          trgt.style.maxHeight = trgtHeight + "px";
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.progress = function() {
          remain = height - (trgtHeight - trgt.offsetHeight);
          if (remain < itemHeight) {
            trgtItEl.style.minHeight = remain + "px";
          }
        };
        animate.end = function() {
          trgt.style.display = "none";
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
          trgtItEl.style.minHeight = "";
          setStyleAttribute(trgt, { "position": "", "maxHeight": "", "display": "" });
        };
      } else {
        animate.begin = function() {
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.end = function() {
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.collapseProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(icon, CLS_EXPANDICN);
      this.remove(trgtItemEle, CLS_SLCTED);
      if (progress === "end") {
        this.add(trgt, CLS_CTNHIDE);
        icon.classList.remove(CLS_TOGANIMATE);
        this.remove(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "true");
        attributes(trgt.previousElementSibling, { "aria-expanded": "false" });
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.getModuleName = function() {
      return "accordion";
    };
    Accordion2.prototype.getItems = function() {
      var items;
      if (this.itemTemplate && this.headerTemplate) {
        items = this.dataSource;
      } else {
        items = this.items;
      }
      return items;
    };
    Accordion2.prototype.addItem = function(item, index) {
      var _this = this;
      var ele = this.element;
      var itemEle = this.getItemElements();
      var items = this.getItems();
      if (isNullOrUndefined(index)) {
        index = items.length;
      }
      if (ele.childElementCount >= index) {
        var addItems = item instanceof Array ? item : [item];
        addItems.forEach(function(addItem, i) {
          var itemIndex = index + i;
          items.splice(itemIndex, 0, addItem);
          var innerItemEle = _this.renderInnerItem(addItem, itemIndex);
          if (ele.childElementCount === itemIndex) {
            ele.appendChild(innerItemEle);
          } else {
            ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);
          }
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          _this.expandedIndices = [];
          _this.expandedItemRefresh();
          if (addItem && addItem.expanded) {
            _this.expandItem(true, itemIndex);
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.expandedItemRefresh = function() {
      var _this = this;
      var itemEle = this.getItemElements();
      [].slice.call(itemEle).forEach(function(el) {
        if (el.classList.contains(CLS_SLCTED)) {
          _this.expandedItemsPush(el);
        }
      });
    };
    Accordion2.prototype.removeItem = function(index) {
      if (this.isReact || this.isAngular) {
        var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        this.clearAccordionTemplate(header, this.dataSource.length > 0 ? "headerTemplate" : "header", CLS_HEADERCTN);
        this.clearAccordionTemplate(content, this.dataSource.length > 0 ? "itemTemplate" : "content", CLS_CTENT);
      }
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      var items = this.getItems();
      if (isNullOrUndefined(ele)) {
        return;
      }
      this.restoreContent(index);
      detach(ele);
      items.splice(index, 1);
      this.expandedIndices = [];
      this.expandedItemRefresh();
    };
    Accordion2.prototype.select = function(index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele) || isNullOrUndefined(select("." + CLS_HEADER, ele))) {
        return;
      }
      ele.children[0].focus();
    };
    Accordion2.prototype.hideItem = function(index, isHidden) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      if (isNullOrUndefined(isHidden)) {
        isHidden = true;
      }
      if (isHidden) {
        this.add(ele, CLS_ITEMHIDE);
      } else {
        this.remove(ele, CLS_ITEMHIDE);
      }
    };
    Accordion2.prototype.enableItem = function(index, isEnable) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      var eleHeader = ele.firstElementChild;
      if (isEnable) {
        this.remove(ele, CLS_DISABLE4);
        attributes(eleHeader, { "tabindex": "0", "aria-disabled": "false" });
        eleHeader.focus();
      } else {
        if (ele.classList.contains(CLS_ACTIVE)) {
          this.expandItem(false, index);
          this.eleMoveFocus("movedown", this.element, eleHeader);
        }
        this.add(ele, CLS_DISABLE4);
        eleHeader.setAttribute("aria-disabled", "true");
        eleHeader.removeAttribute("tabindex");
      }
    };
    Accordion2.prototype.expandItem = function(isExpand, index) {
      var _this = this;
      var itemEle = this.getItemElements();
      if (isNullOrUndefined(index)) {
        if (this.expandMode === "Single" && isExpand) {
          var ele = itemEle[itemEle.length - 1];
          this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
        } else {
          var item = select("#" + this.lastActiveItemId, this.element);
          [].slice.call(itemEle).forEach(function(el) {
            _this.itemExpand(isExpand, el, _this.getIndexByItem(el));
            el.classList.remove(CLS_EXPANDSTATE);
          });
          var expandedItem = select("." + CLS_EXPANDSTATE, this.element);
          if (expandedItem) {
            expandedItem.classList.remove(CLS_EXPANDSTATE);
          }
          if (item) {
            item.classList.add(CLS_EXPANDSTATE);
          }
        }
      } else {
        var ele = itemEle[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
          return;
        } else {
          if (this.expandMode === "Single") {
            this.expandItem(false);
          }
          this.itemExpand(isExpand, ele, index);
        }
      }
    };
    Accordion2.prototype.itemExpand = function(isExpand, ele, index) {
      var ctn = ele.children[1];
      if (ele.classList.contains(CLS_DISABLE4)) {
        return;
      }
      if (isNullOrUndefined(ctn) && isExpand) {
        ctn = this.contentRendering(index);
        ele.appendChild(ctn);
        this.ariaAttrUpdate(ele);
        this.expand(ctn);
      } else if (!isNullOrUndefined(ctn)) {
        if (isExpand) {
          this.expand(ctn);
        } else {
          this.collapse(ctn);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.destroyItems = function() {
      this.restoreContent(null);
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2)).forEach(function(el) {
        detach(el);
      });
    };
    Accordion2.prototype.restoreContent = function(index) {
      var ctnElePos;
      if (isNullOrUndefined(index)) {
        ctnElePos = this.element;
      } else {
        ctnElePos = this.element.querySelectorAll("." + CLS_ITEM2)[parseInt(index.toString(), 10)];
      }
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {
          document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Accordion2.prototype.updateItem = function(item, index) {
      if (!isNullOrUndefined(item)) {
        var items = this.getItems();
        var itemObj = items[parseInt(index.toString(), 10)];
        items.splice(index, 1);
        this.restoreContent(index);
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        if (this.isReact || this.isAngular) {
          this.clearAccordionTemplate(header, "header", CLS_HEADERCTN);
          this.clearAccordionTemplate(content, "content", CLS_CTENT);
        }
        detach(item);
        this.addItem(itemObj, index);
      }
    };
    Accordion2.prototype.setTemplate = function(template, toElement, index) {
      this.fetchElement(toElement, template, index);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clearAccordionTemplate = function(templateEle, templateName, className) {
      if (this.registeredTemplate && this.registeredTemplate["" + templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["" + templateName].length; index++) {
          var registeredItem = registeredTemplates["" + templateName][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle || isNullOrUndefined(registeredItem.parentNode)) {
            this.clearTemplate([templateName], [registeredTemplates["" + templateName][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Accordion2.prototype.getPersistData = function() {
      var keyEntity = ["expandedIndices"];
      return this.addOnPersist(keyEntity);
    };
    Accordion2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var acrdn = this.element;
      var isRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);
              for (var j = 0; j < changedProp.length; j++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);
                for (var k = 0; k < property.length; k++) {
                  var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
                  var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var newVal = Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var temp = property[parseInt(k.toString(), 10)];
                  var content = select("." + CLS_CTENT, item);
                  if (temp === "header" || temp === "iconCss" || temp === "expanded" || temp === "content" && oldVal === "") {
                    this.updateItem(item, index);
                  }
                  if (property[parseInt(k.toString(), 10)] === "cssClass" && !isNullOrUndefined(item)) {
                    if (oldVal) {
                      removeClass([item], oldVal.split(" "));
                    }
                    if (newVal) {
                      addClass([item], newVal.split(" "));
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "visible" && !isNullOrUndefined(item)) {
                    if (Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]] === false) {
                      item.classList.add(CLS_ITEMHIDE);
                    } else {
                      item.classList.remove(CLS_ITEMHIDE);
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "disabled" && !isNullOrUndefined(item)) {
                    this.enableItem(index, !newVal);
                  }
                  if (property.indexOf("header") < 0 && property[parseInt(k.toString(), 10)] === "content" && !isNullOrUndefined(item) && item.children.length === 2) {
                    if (typeof newVal === "function") {
                      if (this.isAngular || this.isReact) {
                        this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);
                      }
                      var activeContent = item.querySelector("." + CLS_CTENT);
                      activeContent.innerHTML = "";
                      this.setTemplate(newVal, activeContent, index);
                    } else {
                      if (item.classList.contains(CLS_SLCTED)) {
                        this.expandItem(false, index);
                      }
                      detach(item.querySelector("." + CLS_CONTENT));
                    }
                  }
                }
              }
            } else {
              isRefresh = true;
            }
            break;
          case "dataSource":
          case "expandedIndices":
            if (this.expandedIndices === null) {
              this.expandedIndices = [];
            }
            isRefresh = true;
            break;
          case "headerTemplate":
            this.initializeHeaderTemplate();
            isRefresh = true;
            break;
          case "itemTemplate":
            this.initializeItemTemplate();
            isRefresh = true;
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(acrdn, CLS_RTL4);
            } else {
              this.remove(acrdn, CLS_RTL4);
            }
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "expandMode":
            if (newProp.expandMode === "Single" && this.expandedIndices.length > 1) {
              this.expandItem(false);
            }
            break;
        }
      }
      if (isRefresh) {
        this.initExpand = [];
        if (this.expandedIndices.length > 0) {
          this.initExpand = this.expandedIndices;
        }
        this.destroyItems();
        this.renderItems();
        this.initItemExpand();
      }
    };
    __decorate10([
      Collection([], AccordionItem)
    ], Accordion2.prototype, "items", void 0);
    __decorate10([
      Property([])
    ], Accordion2.prototype, "dataSource", void 0);
    __decorate10([
      Property()
    ], Accordion2.prototype, "itemTemplate", void 0);
    __decorate10([
      Property()
    ], Accordion2.prototype, "headerTemplate", void 0);
    __decorate10([
      Property("100%")
    ], Accordion2.prototype, "width", void 0);
    __decorate10([
      Property("auto")
    ], Accordion2.prototype, "height", void 0);
    __decorate10([
      Property([])
    ], Accordion2.prototype, "expandedIndices", void 0);
    __decorate10([
      Property("Multiple")
    ], Accordion2.prototype, "expandMode", void 0);
    __decorate10([
      Property(false)
    ], Accordion2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([
      Complex({}, AccordionAnimationSettings)
    ], Accordion2.prototype, "animation", void 0);
    __decorate10([
      Event()
    ], Accordion2.prototype, "clicked", void 0);
    __decorate10([
      Event()
    ], Accordion2.prototype, "expanding", void 0);
    __decorate10([
      Event()
    ], Accordion2.prototype, "expanded", void 0);
    __decorate10([
      Event()
    ], Accordion2.prototype, "created", void 0);
    __decorate10([
      Event()
    ], Accordion2.prototype, "destroyed", void 0);
    Accordion2 = __decorate10([
      NotifyPropertyChanges
    ], Accordion2);
    return Accordion2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ContextMenu = (
  /** @class */
  function(_super) {
    __extends11(ContextMenu2, _super);
    function ContextMenu2(options, element) {
      return _super.call(this, options, element) || this;
    }
    ContextMenu2.prototype.preRender = function() {
      this.isMenu = false;
      this.element.id = this.element.id || getUniqueID("ej2-contextmenu");
      _super.prototype.preRender.call(this);
    };
    ContextMenu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      this.element.style.zIndex = getZindexPartial(this.element).toString();
    };
    ContextMenu2.prototype.open = function(top, left, target) {
      _super.prototype.openMenu.call(this, null, null, top, left, null, target);
    };
    ContextMenu2.prototype.close = function() {
      _super.prototype.closeMenu.call(this);
    };
    ContextMenu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "filter":
            this.close();
            this.filter = newProp.filter;
            break;
          case "target":
            this.unWireEvents(oldProp.target);
            this.wireEvents();
            break;
        }
      }
    };
    ContextMenu2.prototype.getModuleName = function() {
      return "contextmenu";
    };
    __decorate11([
      Property("")
    ], ContextMenu2.prototype, "target", void 0);
    __decorate11([
      Property("")
    ], ContextMenu2.prototype, "filter", void 0);
    __decorate11([
      Collection([], MenuItem)
    ], ContextMenu2.prototype, "items", void 0);
    ContextMenu2 = __decorate11([
      NotifyPropertyChanges
    ], ContextMenu2);
    return ContextMenu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/menu/menu.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VMENU = "e-vertical";
var SCROLLABLE = "e-scrollable";
var HAMBURGER = "e-hamburger";
var Menu = (
  /** @class */
  function(_super) {
    __extends12(Menu2, _super);
    function Menu2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.tempItems = [];
      return _this;
    }
    Menu2.prototype.getModuleName = function() {
      return "menu";
    };
    Menu2.prototype.preRender = function() {
      this.isMenu = true;
      this.element.id = this.element.id || getUniqueID("ej2-menu");
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.template = document.querySelector(this.template).innerHTML.trim();
            this.clearChanges();
          }
        } catch (e) {
        }
        this.updateMenuItems(this.items);
      } else {
        this.updateMenuItems(this.items);
      }
      _super.prototype.preRender.call(this);
    };
    Menu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      if (this.orientation === "Vertical") {
        this.element.classList.add(VMENU);
        if (this.hamburgerMode && !this.target) {
          this.element.previousElementSibling.classList.add(VMENU);
        }
        this.element.setAttribute("aria-orientation", "vertical");
      } else {
        if (Browser.isDevice && !this.enableScrolling) {
          this.element.parentElement.classList.add(SCROLLABLE);
        }
      }
      if (this.hamburgerMode) {
        this.element.parentElement.classList.add(HAMBURGER);
        if (this.orientation === "Horizontal") {
          this.element.classList.add("e-hide-menu");
        }
      }
    };
    Menu2.prototype.updateMenuItems = function(items) {
      this.tempItems = items;
      this.items = [];
      this.tempItems.map(this.createMenuItems, this);
      this.setProperties({ items: this.items }, true);
      this.tempItems = [];
    };
    Menu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "orientation":
            if (newProp.orientation === "Vertical") {
              this.element.classList.add(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.remove("e-hide-menu");
              }
              this.element.setAttribute("aria-orientation", "vertical");
            } else {
              this.element.classList.remove(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.remove(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
              this.element.removeAttribute("aria-orientation");
            }
            break;
          case "items":
            if (!Object.keys(oldProp.items).length) {
              this.updateMenuItems(newProp.items);
            }
            break;
          case "hamburgerMode":
            if (!this.element.previousElementSibling) {
              _super.prototype.createHeaderContainer.call(this);
            }
            if (newProp.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);
              [].slice.call(this.element.getElementsByClassName("e-blankicon")).forEach(function(li) {
                li.style[_this.enableRtl ? "paddingRight" : "paddingLeft"] = "";
              });
            } else {
              this.element.parentElement.classList.remove(HAMBURGER);
              if (this.orientation === "Vertical") {
                this.setBlankIconStyle(this.element);
              }
            }
            if (this.orientation === "Vertical") {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }
              this.element.classList.remove("e-hide-menu");
            } else {
              if (this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              } else {
                this.element.previousElementSibling.classList.remove(VMENU);
              }
              this.element.classList[newProp.hamburgerMode ? "add" : "remove"]("e-hide-menu");
            }
            break;
          case "title":
            if (this.hamburgerMode && this.element.previousElementSibling) {
              newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;
              this.element.previousElementSibling.querySelector(".e-menu-title").innerHTML = newProp.title;
            }
            break;
          case "target":
            if (this.hamburgerMode) {
              this.unWireEvents(oldProp.target);
              this.wireEvents();
              if (this.orientation === "Horizontal") {
                if (!newProp.target) {
                  if (!this.element.previousElementSibling) {
                    _super.prototype.createHeaderContainer.call(this);
                  }
                  this.element.previousElementSibling.classList.remove(VMENU);
                } else {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
            }
            break;
        }
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
    };
    Menu2.prototype.createMenuItems = function(item) {
      var idx;
      var i;
      var items = this.items;
      var pIdField = this.getField("parentId");
      if (item["" + pIdField]) {
        idx = this.getIndex(item["" + pIdField].toString(), true);
        for (i = 0; i < idx.length; i++) {
          if (!items[idx[i]].items) {
            items[idx[i]].items = [];
          }
          items = items[idx[i]].items;
        }
        items.push(item);
      } else {
        this.items.push(item);
      }
    };
    Menu2.prototype.open = function() {
      _super.prototype.openHamburgerMenu.call(this);
    };
    Menu2.prototype.close = function() {
      _super.prototype.closeHamburgerMenu.call(this);
    };
    __decorate12([
      Property("Horizontal")
    ], Menu2.prototype, "orientation", void 0);
    __decorate12([
      Property("")
    ], Menu2.prototype, "target", void 0);
    __decorate12([
      Property(null)
    ], Menu2.prototype, "template", void 0);
    __decorate12([
      Property(false)
    ], Menu2.prototype, "enableScrolling", void 0);
    __decorate12([
      Property(false)
    ], Menu2.prototype, "hamburgerMode", void 0);
    __decorate12([
      Property("Menu")
    ], Menu2.prototype, "title", void 0);
    __decorate12([
      Property(false)
    ], Menu2.prototype, "enableHtmlSanitizer", void 0);
    __decorate12([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], Menu2.prototype, "fields", void 0);
    Menu2 = __decorate12([
      NotifyPropertyChanges
    ], Menu2);
    return Menu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-navigations/src/tab/tab.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_TAB = "e-tab";
var CLS_HEADER2 = "e-tab-header";
var CLS_BLA_TEM = "blazor-template";
var CLS_CONTENT2 = "e-content";
var CLS_NEST2 = "e-nested";
var CLS_ITEMS2 = "e-items";
var CLS_ITEM3 = "e-item";
var CLS_TEMPLATE2 = "e-template";
var CLS_RTL5 = "e-rtl";
var CLS_ACTIVE2 = "e-active";
var CLS_DISABLE5 = "e-disable";
var CLS_HIDDEN2 = "e-hidden";
var CLS_FOCUS = "e-focused";
var CLS_ICONS = "e-icons";
var CLS_ICON = "e-icon";
var CLS_ICON_TAB = "e-icon-tab";
var CLS_ICON_CLOSE = "e-close-icon";
var CLS_CLOSE_SHOW = "e-close-show";
var CLS_TEXT = "e-tab-text";
var CLS_INDICATOR = "e-indicator";
var CLS_WRAP = "e-tab-wrap";
var CLS_TEXT_WRAP = "e-text-wrap";
var CLS_TAB_ICON = "e-tab-icon";
var CLS_TB_ITEMS = "e-toolbar-items";
var CLS_TB_ITEM = "e-toolbar-item";
var CLS_TB_POP = "e-toolbar-pop";
var CLS_TB_POPUP = "e-toolbar-popup";
var CLS_HOR_NAV = "e-hor-nav";
var CLS_POPUP_OPEN = "e-popup-open";
var CLS_POPUP_CLOSE = "e-popup-close";
var CLS_PROGRESS = "e-progress";
var CLS_IGNORE = "e-ignore";
var CLS_OVERLAY3 = "e-overlay";
var CLS_HSCRCNT = "e-hscroll-content";
var CLS_VSCRCNT = "e-vscroll-content";
var CLS_VTAB = "e-vertical-tab";
var CLS_VERTICAL2 = "e-vertical";
var CLS_VLEFT = "e-vertical-left";
var CLS_VRIGHT = "e-vertical-right";
var CLS_HBOTTOM = "e-horizontal-bottom";
var CLS_FILL = "e-fill-mode";
var TABITEMPREFIX = "tabitem_";
var CLS_REORDER_ACTIVE_ITEM = "e-reorder-active-item";
var TabActionSettings = (
  /** @class */
  function(_super) {
    __extends13(TabActionSettings2, _super);
    function TabActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("SlideLeftIn")
    ], TabActionSettings2.prototype, "effect", void 0);
    __decorate13([
      Property(600)
    ], TabActionSettings2.prototype, "duration", void 0);
    __decorate13([
      Property("ease")
    ], TabActionSettings2.prototype, "easing", void 0);
    return TabActionSettings2;
  }(ChildProperty)
);
var TabAnimationSettings = (
  /** @class */
  function(_super) {
    __extends13(TabAnimationSettings2, _super);
    function TabAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Complex({ effect: "SlideLeftIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "previous", void 0);
    __decorate13([
      Complex({ effect: "SlideRightIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "next", void 0);
    return TabAnimationSettings2;
  }(ChildProperty)
);
var Header = (
  /** @class */
  function(_super) {
    __extends13(Header2, _super);
    function Header2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("")
    ], Header2.prototype, "text", void 0);
    __decorate13([
      Property("")
    ], Header2.prototype, "iconCss", void 0);
    __decorate13([
      Property("left")
    ], Header2.prototype, "iconPosition", void 0);
    return Header2;
  }(ChildProperty)
);
var TabItem = (
  /** @class */
  function(_super) {
    __extends13(TabItem2, _super);
    function TabItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Complex({}, Header)
    ], TabItem2.prototype, "header", void 0);
    __decorate13([
      Property(null)
    ], TabItem2.prototype, "headerTemplate", void 0);
    __decorate13([
      Property("")
    ], TabItem2.prototype, "content", void 0);
    __decorate13([
      Property("")
    ], TabItem2.prototype, "cssClass", void 0);
    __decorate13([
      Property(false)
    ], TabItem2.prototype, "disabled", void 0);
    __decorate13([
      Property(true)
    ], TabItem2.prototype, "visible", void 0);
    __decorate13([
      Property()
    ], TabItem2.prototype, "id", void 0);
    __decorate13([
      Property(-1)
    ], TabItem2.prototype, "tabIndex", void 0);
    return TabItem2;
  }(ChildProperty)
);
var Tab = (
  /** @class */
  function(_super) {
    __extends13(Tab2, _super);
    function Tab2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.show = {};
      _this.hide = {};
      _this.maxHeight = 0;
      _this.title = "Close";
      _this.isInteracted = false;
      _this.lastIndex = 0;
      _this.isAdd = false;
      _this.isIconAlone = false;
      _this.draggableItems = [];
      _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);
      _this.keyConfigs = {
        tab: "tab",
        home: "home",
        end: "end",
        enter: "enter",
        space: "space",
        delete: "delete",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      return _this;
    }
    Tab2.prototype.destroy = function() {
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      if (!isNullOrUndefined(this.tbObj)) {
        this.tbObj.destroy();
        this.tbObj = null;
      }
      this.unWireEvents();
      this.element.removeAttribute("aria-disabled");
      this.expTemplateContent();
      if (!this.isTemplate) {
        while (this.element.firstElementChild) {
          remove(this.element.firstElementChild);
        }
      } else {
        var cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        this.element.classList.remove(CLS_TEMPLATE2);
        if (!isNullOrUndefined(cntEle)) {
          cntEle.innerHTML = this.cnt;
        }
      }
      if (this.btnCls) {
        this.btnCls = null;
      }
      this.hdrEle = null;
      this.cntEle = null;
      this.tbItems = null;
      this.tbItem = null;
      this.tbPop = null;
      this.prevItem = null;
      this.popEle = null;
      this.bdrLine = null;
      this.content = null;
      this.dragItem = null;
      this.cloneElement = null;
      this.draggingItems = [];
      if (this.draggableItems && this.draggableItems.length > 0) {
        for (var i = 0; i < this.draggableItems.length; i++) {
          this.draggableItems[i].destroy();
          this.draggableItems[i] = null;
        }
        this.draggableItems = [];
      }
      _super.prototype.destroy.call(this);
      this.trigger("destroyed");
    };
    Tab2.prototype.refresh = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      _super.prototype.refresh.call(this);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT2);
      this.prevIndex = 0;
      this.isNested = false;
      this.isPopup = false;
      this.initRender = true;
      this.isSwiped = false;
      this.itemIndexArray = [];
      this.templateEle = [];
      if (this.allowDragAndDrop) {
        this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : "#" + this.element.id + " " + ("." + CLS_HEADER2);
      }
      if (!isNullOrUndefined(nested)) {
        nested.parentElement.classList.add(CLS_NEST2);
        this.isNested = true;
      }
      var name = Browser.info.name;
      var css = name === "msie" ? "e-ie" : name === "edge" ? "e-edge" : name === "safari" ? "e-safari" : "";
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      this.setCssClass(this.element, this.cssClass, true);
      attributes(this.element, { "aria-disabled": "false" });
      this.setCssClass(this.element, css, true);
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.render = function() {
      var _this = this;
      this.btnCls = this.createElement("span", { className: CLS_ICONS + " " + CLS_ICON_CLOSE, attrs: { title: this.title } });
      this.tabId = this.element.id.length > 0 ? "-" + this.element.id : getRandomId();
      this.renderContainer();
      this.wireEvents();
      this.initRender = false;
      if (this.isReact && this.portals && this.portals.length > 0) {
        this.renderReactTemplates(function() {
          if (!isNullOrUndefined(_this.tbObj)) {
            _this.tbObj.refreshOverflow();
          }
          _this.refreshActiveBorder();
        });
      }
    };
    Tab2.prototype.renderContainer = function() {
      var ele = this.element;
      this.items.forEach(function(item, index) {
        if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {
          item.setProperties({ id: TABITEMPREFIX + index.toString() }, true);
        }
      });
      if (this.items.length > 0 && ele.children.length === 0) {
        ele.appendChild(this.createElement("div", { className: CLS_CONTENT2 }));
        this.setOrientation(this.headerPlacement, this.createElement("div", { className: CLS_HEADER2 }));
        this.isTemplate = false;
      } else if (this.element.children.length > 0) {
        this.isTemplate = true;
        ele.classList.add(CLS_TEMPLATE2);
        var header = ele.querySelector("." + CLS_HEADER2);
        if (header && this.headerPlacement === "Bottom") {
          this.setOrientation(this.headerPlacement, header);
        }
      }
      if (!isNullOrUndefined(select("." + CLS_HEADER2, this.element)) && !isNullOrUndefined(select("." + CLS_CONTENT2, this.element))) {
        this.renderHeader();
        this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
        if (!isNullOrUndefined(this.tbItems)) {
          rippleEffect(this.tbItems, { selector: ".e-tab-wrap" });
        }
        this.renderContent();
        if (selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
          this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
          this.bdrLine = this.createElement("div", { className: CLS_INDICATOR + " " + CLS_HIDDEN2 + " " + CLS_IGNORE });
          var scrCnt = select("." + this.scrCntClass, this.tbItems);
          if (!isNullOrUndefined(scrCnt)) {
            scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
          } else {
            this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
          }
          this.setContentHeight(true);
          this.select(this.selectedItem);
        }
        this.setRTL(this.enableRtl);
      }
    };
    Tab2.prototype.renderHeader = function() {
      var _this = this;
      var hdrPlace = this.headerPlacement;
      var tabItems = [];
      this.hdrEle = this.getTabHeader();
      this.addVerticalClass();
      if (!this.isTemplate) {
        tabItems = this.parseObject(this.items, 0);
      } else {
        if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER2)) {
          this.setProperties({ headerPlacement: "Bottom" }, true);
        }
        var count = this.hdrEle.children.length;
        var hdrItems = [];
        for (var i = 0; i < count; i++) {
          hdrItems.push(this.hdrEle.children.item(i));
        }
        if (count > 0) {
          var tabItems_1 = this.createElement("div", { className: CLS_ITEMS2 });
          this.hdrEle.appendChild(tabItems_1);
          hdrItems.forEach(function(item, index) {
            _this.lastIndex = index;
            var attr = {
              className: CLS_ITEM3,
              id: CLS_ITEM3 + _this.tabId + "_" + index
            };
            var txt = _this.createElement("span", {
              className: CLS_TEXT,
              attrs: { "role": "presentation" }
            }).outerHTML;
            var cont = _this.createElement("div", {
              className: CLS_TEXT_WRAP,
              innerHTML: txt + _this.btnCls.outerHTML
            }).outerHTML;
            var wrap = _this.createElement("div", {
              className: CLS_WRAP,
              innerHTML: cont,
              attrs: { role: "tab", tabIndex: "-1", "aria-selected": "false", "aria-controls": CLS_CONTENT2 + _this.tabId + "_" + index, "aria-disabled": "false" }
            });
            wrap.querySelector("." + CLS_TEXT).appendChild(item);
            tabItems_1.appendChild(_this.createElement("div", attr));
            selectAll("." + CLS_ITEM3, tabItems_1)[index].appendChild(wrap);
          });
        }
      }
      this.tbObj = new Toolbar({
        width: hdrPlace === "Left" || hdrPlace === "Right" ? "auto" : "100%",
        height: hdrPlace === "Left" || hdrPlace === "Right" ? "100%" : "auto",
        overflowMode: this.overflowMode,
        items: tabItems.length !== 0 ? tabItems : [],
        clicked: this.clickHandler.bind(this),
        scrollStep: this.scrollStep,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        cssClass: this.cssClass
      });
      this.tbObj.isStringTemplate = true;
      this.tbObj.createElement = this.createElement;
      this.tbObj.appendTo(this.hdrEle);
      attributes(this.hdrEle, { role: "tablist" });
      if (!isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.hdrEle.setAttribute("aria-label", this.element.getAttribute("aria-label"));
        this.element.removeAttribute("aria-label");
      } else if (!isNullOrUndefined(this.element.getAttribute("aria-labelledby"))) {
        this.hdrEle.setAttribute("aria-labelledby", this.element.getAttribute("aria-labelledby"));
        this.element.removeAttribute("aria-labelledby");
      }
      this.setCloseButton(this.showCloseButton);
      var toolbarHeader = this.tbObj.element.querySelector("." + CLS_TB_ITEMS);
      if (!isNullOrUndefined(toolbarHeader)) {
        if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === "") {
          toolbarHeader.id = this.element.id + "_tab_header_items";
        }
      }
    };
    Tab2.prototype.renderContent = function() {
      this.cntEle = select("." + CLS_CONTENT2, this.element);
      var hdrItem = selectAll("." + CLS_TB_ITEM, this.element);
      if (this.isTemplate) {
        this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : "";
        var contents = this.cntEle.children;
        for (var i = 0; i < hdrItem.length; i++) {
          if (contents.length - 1 >= i) {
            addClass([contents.item(i)], CLS_ITEM3);
            attributes(contents.item(i), { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + i });
            contents.item(i).id = CLS_CONTENT2 + this.tabId + "_" + i;
          }
        }
      }
    };
    Tab2.prototype.reRenderItems = function() {
      this.renderContainer();
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
    };
    Tab2.prototype.parseObject = function(items, index) {
      var _this = this;
      var tbItems = Array.prototype.slice.call(selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element));
      var maxId = this.lastIndex;
      if (!this.isReplace && tbItems.length > 0) {
        var idList_1 = [];
        tbItems.forEach(function(item) {
          idList_1.push(_this.getIndexFromEle(item.id));
        });
        maxId = Math.max.apply(Math, idList_1);
      }
      var tItems = [];
      var txtWrapEle;
      var spliceArray = [];
      var i = 0;
      items.forEach(function(item, i2) {
        var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
        var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
        if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === "")) {
          spliceArray.push(i2);
          return;
        }
        var txt = item.headerTemplate || item.header.text;
        if (typeof txt === "string" && _this.enableHtmlSanitizer) {
          txt = SanitizeHtmlHelper.sanitize(txt);
        }
        var itemIndex;
        if (_this.isReplace && !isNullOrUndefined(_this.tbId) && _this.tbId !== "") {
          itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf("_") + 1), 10);
          _this.tbId = "";
        } else {
          itemIndex = index + i2;
        }
        _this.lastIndex = tbItems.length === 0 ? i2 : _this.isReplace ? itemIndex : maxId + 1 + i2;
        var disabled = item.disabled ? " " + CLS_DISABLE5 + " " + CLS_OVERLAY3 : "";
        var hidden = item.visible === false ? " " + CLS_HIDDEN2 : "";
        txtWrapEle = _this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
        var tHtml = txt instanceof Object ? txt.outerHTML : txt;
        var txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== "";
        if (!isNullOrUndefined(txt.tagName)) {
          txtWrapEle.appendChild(txt);
        } else {
          _this.headerTextCompile(txtWrapEle, txt, i2);
        }
        var tEle;
        var icon = _this.createElement("span", {
          className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
        });
        var tCont = _this.createElement("div", { className: CLS_TEXT_WRAP });
        tCont.appendChild(txtWrapEle);
        if (txt !== "" && txt !== void 0 && css !== "") {
          if (pos === "left" || pos === "top") {
            tCont.insertBefore(icon, tCont.firstElementChild);
          } else {
            tCont.appendChild(icon);
          }
          tEle = txtWrapEle;
          _this.isIconAlone = false;
        } else {
          tEle = css === "" ? txtWrapEle : icon;
          if (tEle === icon) {
            detach(txtWrapEle);
            tCont.appendChild(icon);
            _this.isIconAlone = true;
          }
        }
        var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
        var wrapAttrs = item.disabled ? {} : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "false", "aria-disabled": "false" };
        tCont.appendChild(_this.btnCls.cloneNode(true));
        var wrap = _this.createElement("div", { className: CLS_WRAP, attrs: wrapAttrs });
        wrap.appendChild(tCont);
        if (_this.itemIndexArray instanceof Array) {
          _this.itemIndexArray.splice(index + i2, 0, CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex);
        }
        var attrObj = {
          id: CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex,
          "data-id": item.id
        };
        var tItem = { htmlAttributes: attrObj, template: wrap };
        tItem.cssClass = (item.cssClass !== void 0 ? item.cssClass : " ") + " " + disabled + " " + hidden + " " + (css !== "" ? "e-i" + pos : "") + " " + (!txtEmpty ? CLS_ICON : "");
        if (pos === "top" || pos === "bottom") {
          _this.element.classList.add("e-vertical-icon");
        }
        tItems.push(tItem);
        i2++;
      });
      if (!this.isAdd) {
        spliceArray.forEach(function(spliceItemIndex) {
          _this.items.splice(spliceItemIndex, 1);
        });
      }
      if (this.isIconAlone) {
        this.element.classList.add(CLS_ICON_TAB);
      } else {
        this.element.classList.remove(CLS_ICON_TAB);
      }
      return tItems;
    };
    Tab2.prototype.removeActiveClass = function() {
      var tabHeader = this.getTabHeader();
      if (tabHeader) {
        var tabItems = selectAll("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, tabHeader);
        [].slice.call(tabItems).forEach(function(node) {
          return node.classList.remove(CLS_ACTIVE2);
        });
        [].slice.call(tabItems).forEach(function(node) {
          return node.firstElementChild.setAttribute("aria-selected", "false");
        });
      }
    };
    Tab2.prototype.checkPopupOverflow = function(ele) {
      this.tbPop = select("." + CLS_TB_POP, this.element);
      var popIcon = select(".e-hor-nav", this.element);
      var tbrItems = select("." + CLS_TB_ITEMS, this.element);
      var lastChild = tbrItems.lastChild;
      var isOverflow = false;
      if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
        isOverflow = true;
      } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
        isOverflow = true;
      }
      if (isOverflow) {
        ele.classList.add(CLS_TB_POPUP);
        this.tbPop.insertBefore(ele, selectAll("." + CLS_TB_POPUP, this.tbPop)[0]);
      }
      return true;
    };
    Tab2.prototype.popupHandler = function(target) {
      var ripEle = target.querySelector(".e-ripple-element");
      if (!isNullOrUndefined(ripEle)) {
        ripEle.outerHTML = "";
        target.querySelector("." + CLS_WRAP).classList.remove("e-ripple");
      }
      this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
      var lastChild = this.tbItem[this.tbItem.length - 1];
      if (this.tbItem.length !== 0) {
        target.classList.remove(CLS_TB_POPUP);
        target.removeAttribute("style");
        this.tbItems.appendChild(target);
        this.actEleId = target.id;
        if (this.checkPopupOverflow(lastChild)) {
          var prevEle = this.tbItems.lastChild.previousElementSibling;
          this.checkPopupOverflow(prevEle);
        }
        this.isPopup = true;
      }
      return selectAll("." + CLS_TB_ITEM, this.tbItems).length - 1;
    };
    Tab2.prototype.setCloseButton = function(val) {
      var trg = select("." + CLS_HEADER2, this.element);
      if (val === true) {
        trg.classList.add(CLS_CLOSE_SHOW);
      } else {
        trg.classList.remove(CLS_CLOSE_SHOW);
      }
      this.tbObj.refreshOverflow();
      this.refreshActiveTabBorder();
    };
    Tab2.prototype.prevCtnAnimation = function(prev, current) {
      var animation;
      var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL5);
      if (this.isPopup || prev <= current) {
        if (this.animation.previous.effect === "SlideLeftIn") {
          animation = {
            name: "SlideLeftOut",
            duration: this.animation.previous.duration,
            timingFunction: this.animation.previous.easing
          };
        } else {
          animation = null;
        }
      } else {
        if (this.animation.next.effect === "SlideRightIn") {
          animation = {
            name: "SlideRightOut",
            duration: this.animation.next.duration,
            timingFunction: this.animation.next.easing
          };
        } else {
          animation = null;
        }
      }
      return animation;
    };
    Tab2.prototype.triggerPrevAnimation = function(oldCnt, prevIndex) {
      var _this = this;
      var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
      if (!isNullOrUndefined(animateObj)) {
        animateObj.begin = function() {
          setStyleAttribute(oldCnt, { "position": "absolute" });
          oldCnt.classList.add(CLS_PROGRESS);
          oldCnt.classList.add("e-view");
        };
        animateObj.end = function() {
          oldCnt.style.display = "none";
          oldCnt.classList.remove(CLS_ACTIVE2);
          oldCnt.classList.remove(CLS_PROGRESS);
          oldCnt.classList.remove("e-view");
          setStyleAttribute(oldCnt, { "display": "", "position": "" });
          if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
            detach(oldCnt);
          }
        };
        new Animation(animateObj).animate(oldCnt);
      } else {
        oldCnt.classList.remove(CLS_ACTIVE2);
      }
    };
    Tab2.prototype.triggerAnimation = function(id, value) {
      var _this = this;
      var prevIndex = this.prevIndex;
      var oldCnt;
      var itemCollection = [].slice.call(this.element.querySelector("." + CLS_CONTENT2).children);
      itemCollection.forEach(function(item) {
        if (item.id === _this.prevActiveEle) {
          oldCnt = item;
        }
      });
      var prevEle = this.tbItem[prevIndex];
      var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));
      if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {
        var idNo = this.extIndex(prevEle.id);
        oldCnt = this.getTrgContent(this.cntEle, idNo);
      }
      if (!isNullOrUndefined(newCnt)) {
        this.prevActiveEle = newCnt.id;
      }
      var isPrevent = isNullOrUndefined(this.animation) || isNullOrUndefined(this.animation.next.effect) || isNullOrUndefined(this.animation.previous.effect) || this.animation.previous.effect === "None" || this.animation.next.effect === "None";
      if (this.initRender || value === false || isPrevent) {
        if (oldCnt && oldCnt !== newCnt) {
          oldCnt.classList.remove(CLS_ACTIVE2);
        }
        return;
      }
      var cnt = select("." + CLS_CONTENT2, this.element);
      var animateObj;
      if (this.prevIndex > this.selectedItem && !this.isPopup) {
        var openEff = this.animation.previous.effect;
        animateObj = {
          name: openEff === "None" ? "" : openEff !== "SlideLeftIn" ? openEff : "SlideLeftIn",
          duration: this.animation.previous.duration === 0 && animationMode === "Enable" ? 600 : this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
        var clsEff = this.animation.next.effect;
        animateObj = {
          name: clsEff === "None" ? "" : clsEff !== "SlideRightIn" ? clsEff : "SlideRightIn",
          duration: this.animation.next.duration === 0 && animationMode === "Enable" ? 600 : this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      }
      animateObj.progress = function() {
        cnt.classList.add(CLS_PROGRESS);
        _this.setActiveBorder();
      };
      animateObj.end = function() {
        cnt.classList.remove(CLS_PROGRESS);
        newCnt.classList.add(CLS_ACTIVE2);
      };
      if (!this.initRender && !isNullOrUndefined(oldCnt)) {
        this.triggerPrevAnimation(oldCnt, prevIndex);
      }
      this.isPopup = false;
      if (animateObj.name === "") {
        newCnt.classList.add(CLS_ACTIVE2);
      } else {
        new Animation(animateObj).animate(newCnt);
      }
    };
    Tab2.prototype.keyPressed = function(trg) {
      var trgParent = closest(trg, "." + CLS_HEADER2 + " ." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (!isNullOrUndefined(this.popEle) && trg.classList.contains("e-hor-nav")) {
        this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
      } else if (trg.classList.contains("e-scroll-nav")) {
        trg.click();
      } else {
        if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE2) === false) {
          this.selectTab(trgIndex, null, true);
          if (!isNullOrUndefined(this.popEle)) {
            this.popObj.hide(this.hide);
          }
        }
      }
    };
    Tab2.prototype.getTabHeader = function() {
      if (isNullOrUndefined(this.element)) {
        return void 0;
      }
      var headers = [].slice.call(this.element.children).filter(function(e) {
        return e.classList.contains(CLS_HEADER2);
      });
      if (headers.length > 0) {
        return headers[0];
      } else {
        var wrap = [].slice.call(this.element.children).filter(function(e) {
          return !e.classList.contains(CLS_BLA_TEM);
        })[0];
        if (!wrap) {
          return void 0;
        }
        return [].slice.call(wrap.children).filter(function(e) {
          return e.classList.contains(CLS_HEADER2);
        })[0];
      }
    };
    Tab2.prototype.getEleIndex = function(item) {
      return Array.prototype.indexOf.call(selectAll("." + CLS_TB_ITEM, this.getTabHeader()), item);
    };
    Tab2.prototype.extIndex = function(id) {
      return id.replace(CLS_ITEM3 + this.tabId + "_", "");
    };
    Tab2.prototype.expTemplateContent = function() {
      var _this = this;
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(_this.element.querySelector(eleStr))) {
          document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Tab2.prototype.templateCompile = function(ele, cnt, index) {
      var tempEle = this.createElement("div");
      this.compileElement(tempEle, cnt, "content", index);
      if (tempEle.childNodes.length !== 0) {
        ele.appendChild(tempEle);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.compileElement = function(ele, val, prop, index) {
      var templateFn;
      if (typeof val === "string") {
        val = val.trim();
        if (this.isVue) {
          templateFn = compile(SanitizeHtmlHelper.sanitize(val));
        } else {
          ele.innerHTML = SanitizeHtmlHelper.sanitize(val);
        }
      } else {
        templateFn = compile(val);
      }
      var templateFUN;
      if (!isNullOrUndefined(templateFn)) {
        templateFUN = templateFn({}, this, prop);
      }
      if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function(el) {
          ele.appendChild(el);
        });
      }
    };
    Tab2.prototype.headerTextCompile = function(element, text, index) {
      this.compileElement(element, text, "headerTemplate", index);
    };
    Tab2.prototype.getContent = function(ele, cnt, callType, index) {
      var eleStr;
      cnt = isNullOrUndefined(cnt) ? "" : cnt;
      if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
        if (typeof cnt === "string" && this.enableHtmlSanitizer) {
          cnt = SanitizeHtmlHelper.sanitize(cnt);
        }
        if (cnt[0] === "." || cnt[0] === "#") {
          if (document.querySelectorAll(cnt).length) {
            var eleVal = document.querySelector(cnt);
            eleStr = eleVal.outerHTML.trim();
            if (callType === "clone") {
              ele.appendChild(eleVal.cloneNode(true));
            } else {
              ele.appendChild(eleVal);
              eleVal.style.display = "";
            }
          } else {
            this.templateCompile(ele, cnt, index);
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        ele.appendChild(cnt);
      }
      if (!isNullOrUndefined(eleStr)) {
        if (this.templateEle.indexOf(cnt.toString()) === -1) {
          this.templateEle.push(cnt.toString());
        }
      }
    };
    Tab2.prototype.getTrgContent = function(cntEle, no) {
      var ele;
      if (this.element.classList.contains(CLS_NEST2)) {
        ele = select("." + CLS_NEST2 + "> ." + CLS_CONTENT2 + " > #" + CLS_CONTENT2 + this.tabId + "_" + no, this.element);
      } else {
        ele = this.findEle(cntEle.children, CLS_CONTENT2 + this.tabId + "_" + no);
      }
      return ele;
    };
    Tab2.prototype.findEle = function(items, key) {
      var ele;
      for (var i = 0; i < items.length; i++) {
        if (items[i].id === key) {
          ele = items[i];
          break;
        }
      }
      return ele;
    };
    Tab2.prototype.isVertical = function() {
      var isVertical = this.headerPlacement === "Left" || this.headerPlacement === "Right" ? true : false;
      this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
      return isVertical;
    };
    Tab2.prototype.addVerticalClass = function() {
      if (this.isVertical()) {
        var tbPos = this.headerPlacement === "Left" ? CLS_VLEFT : CLS_VRIGHT;
        addClass([this.hdrEle], [CLS_VERTICAL2, tbPos]);
        if (!this.element.classList.contains(CLS_NEST2)) {
          addClass([this.element], [CLS_VTAB, tbPos]);
        } else {
          addClass([this.hdrEle], [CLS_VTAB, tbPos]);
        }
      }
      if (this.headerPlacement === "Bottom") {
        addClass([this.hdrEle], [CLS_HBOTTOM]);
      }
    };
    Tab2.prototype.updatePopAnimationConfig = function() {
      this.show = { name: this.isVertical() ? "FadeIn" : "SlideDown", duration: 100 };
      this.hide = { name: this.isVertical() ? "FadeOut" : "SlideUp", duration: 100 };
    };
    Tab2.prototype.changeOrientation = function(place) {
      this.setOrientation(place, this.hdrEle);
      var activeTab = this.hdrEle.querySelector("." + CLS_ACTIVE2);
      var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL2) ? true : false;
      removeClass([this.element], [CLS_VTAB]);
      removeClass([this.hdrEle], [CLS_VERTICAL2, CLS_VLEFT, CLS_VRIGHT]);
      if (isVertical !== this.isVertical()) {
        this.changeToolbarOrientation();
        if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {
          this.popupHandler(activeTab);
        }
      }
      this.addVerticalClass();
      this.setActiveBorder();
      this.focusItem();
    };
    Tab2.prototype.focusItem = function() {
      var curActItem = select(" #" + CLS_ITEM3 + this.tabId + "_" + this.selectedItem, this.hdrEle);
      if (!isNullOrUndefined(curActItem)) {
        curActItem.firstElementChild.focus();
      }
    };
    Tab2.prototype.changeToolbarOrientation = function() {
      this.tbObj.setProperties({ height: this.isVertical() ? "100%" : "auto", width: this.isVertical() ? "auto" : "100%" }, true);
      this.tbObj.changeOrientation();
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.setOrientation = function(place, ele) {
      var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
      var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector("." + CLS_CONTENT2));
      if (place === "Bottom" && contentPos > headerPos) {
        this.element.appendChild(ele);
      } else {
        removeClass([ele], [CLS_HBOTTOM]);
        this.element.insertBefore(ele, select("." + CLS_CONTENT2, this.element));
      }
    };
    Tab2.prototype.setCssClass = function(ele, cls, val) {
      if (cls === "") {
        return;
      }
      var list = cls.split(" ");
      for (var i = 0; i < list.length; i++) {
        if (val) {
          ele.classList.add(list[i]);
        } else {
          ele.classList.remove(list[i]);
        }
      }
    };
    Tab2.prototype.setContentHeight = function(val) {
      if (this.element.classList.contains(CLS_FILL)) {
        removeClass([this.element], [CLS_FILL]);
      }
      if (isNullOrUndefined(this.cntEle)) {
        return;
      }
      var hdrEle = this.getTabHeader();
      if (this.heightAdjustMode === "None") {
        if (this.height === "auto") {
          return;
        } else {
          if (!this.isVertical()) {
            setStyleAttribute(this.cntEle, { "height": this.element.clientHeight - hdrEle.offsetHeight + "px" });
          }
        }
      } else if (this.heightAdjustMode === "Fill") {
        addClass([this.element], [CLS_FILL]);
        setStyleAttribute(this.element, { "height": "100%" });
        this.cntEle.style.height = "calc(100% - " + this.hdrEle.offsetHeight + "px)";
      } else if (this.heightAdjustMode === "Auto") {
        if (this.isTemplate === true) {
          var cnt = selectAll("." + CLS_CONTENT2 + " > ." + CLS_ITEM3, this.element);
          for (var i = 0; i < cnt.length; i++) {
            cnt[i].setAttribute("style", "display:block; visibility: visible");
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
            cnt[i].style.removeProperty("display");
            cnt[i].style.removeProperty("visibility");
          }
        } else {
          this.cntEle = select("." + CLS_CONTENT2, this.element);
          if (val === true) {
            this.cntEle.appendChild(this.createElement("div", {
              id: CLS_CONTENT2 + this.tabId + "_0",
              className: CLS_ITEM3 + " " + CLS_ACTIVE2,
              attrs: { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_0" }
            }));
          }
          var ele = this.cntEle.children.item(0);
          for (var i = 0; i < this.items.length; i++) {
            this.getContent(ele, this.items[i].content, "clone", i);
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));
            while (ele.firstChild) {
              ele.removeChild(ele.firstChild);
            }
          }
          if (this.isReact) {
            this.clearTemplate(["content"]);
          }
          this.templateEle = [];
          this.getContent(ele, this.items[0].content, "render", 0);
          if (this.prevIndex !== this.selectedItem) {
            ele.classList.remove(CLS_ACTIVE2);
          }
        }
        setStyleAttribute(this.cntEle, { "height": this.maxHeight + "px" });
      } else {
        setStyleAttribute(this.cntEle, { "height": "auto" });
      }
    };
    Tab2.prototype.getHeight = function(ele) {
      var cs = window.getComputedStyle(ele);
      return ele.offsetHeight + parseFloat(cs.getPropertyValue("padding-top")) + parseFloat(cs.getPropertyValue("padding-bottom")) + parseFloat(cs.getPropertyValue("margin-top")) + parseFloat(cs.getPropertyValue("margin-bottom"));
    };
    Tab2.prototype.setActiveBorder = function() {
      var trgHdrEle = this.getTabHeader();
      var trg = select("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, trgHdrEle);
      if (isNullOrUndefined(trg)) {
        return;
      }
      if (!this.reorderActiveTab) {
        if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN2)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {
          trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);
        }
      } else if (trgHdrEle) {
        trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);
      }
      var root = closest(trg, "." + CLS_TAB);
      if (this.element !== root) {
        return;
      }
      this.tbItems = select("." + CLS_TB_ITEMS, trgHdrEle);
      var bar = select("." + CLS_INDICATOR, trgHdrEle);
      var scrollCnt = select("." + CLS_TB_ITEMS + " ." + this.scrCntClass, trgHdrEle);
      if (this.isVertical()) {
        setStyleAttribute(bar, { "left": "", "right": "" });
        var tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;
        if (tbHeight !== 0) {
          setStyleAttribute(bar, { "top": trg.offsetTop + "px", "height": trg.offsetHeight + "px" });
        } else {
          setStyleAttribute(bar, { "top": 0, "height": 0 });
        }
      } else {
        if (this.overflowMode === "MultiRow") {
          var top_1 = this.headerPlacement === "Bottom" ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;
          setStyleAttribute(bar, { "top": top_1 + "px", "height": "" });
        } else {
          setStyleAttribute(bar, { "top": "", "height": "" });
        }
        var tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;
        if (tbWidth !== 0) {
          setStyleAttribute(bar, { "left": trg.offsetLeft + "px", "right": tbWidth - (trg.offsetLeft + trg.offsetWidth) + "px" });
        } else {
          setStyleAttribute(bar, { "left": "auto", "right": "auto" });
        }
      }
      if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {
        this.bdrLine.classList.remove(CLS_HIDDEN2);
      }
    };
    Tab2.prototype.setActive = function(value, skipDataBind, isInteracted) {
      if (skipDataBind === void 0) {
        skipDataBind = false;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
      var trg = this.tbItem[value];
      if (value < 0 || isNaN(value) || this.tbItem.length === 0 || !isNullOrUndefined(trg) && trg.classList.contains(CLS_DISABLE5)) {
        return;
      }
      if (value >= 0 && !skipDataBind) {
        this.allowServerDataBinding = false;
        this.setProperties({ selectedItem: value }, true);
        this.allowServerDataBinding = true;
        if (!this.initRender) {
          this.serverDataBind();
        }
      }
      if (trg.classList.contains(CLS_ACTIVE2)) {
        this.setActiveBorder();
        return;
      }
      if (!this.isTemplate) {
        attributes(trg.firstElementChild, { "aria-controls": CLS_CONTENT2 + this.tabId + "_" + value });
      }
      var id = trg.id;
      this.removeActiveClass();
      trg.classList.add(CLS_ACTIVE2);
      trg.firstElementChild.setAttribute("aria-selected", "true");
      var no = Number(this.extIndex(id));
      if (isNullOrUndefined(this.prevActiveEle)) {
        this.prevActiveEle = CLS_CONTENT2 + this.tabId + "_" + no;
      }
      if (this.isTemplate) {
        if (select("." + CLS_CONTENT2, this.element).children.length > 0) {
          var trg_1 = this.findEle(select("." + CLS_CONTENT2, this.element).children, CLS_CONTENT2 + this.tabId + "_" + no);
          if (!isNullOrUndefined(trg_1)) {
            trg_1.classList.add(CLS_ACTIVE2);
          }
          this.triggerAnimation(id, this.enableAnimation);
        }
      } else {
        this.cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));
        if (isNullOrUndefined(item)) {
          this.cntEle.appendChild(this.createElement("div", {
            id: CLS_CONTENT2 + this.tabId + "_" + this.extIndex(id),
            className: CLS_ITEM3 + " " + CLS_ACTIVE2,
            attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + this.extIndex(id) }
          }));
          var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
          var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
          this.getContent(eleTrg, this.items[itemIndex].content, "render", itemIndex);
        } else {
          item.classList.add(CLS_ACTIVE2);
        }
        this.triggerAnimation(id, this.enableAnimation);
      }
      this.setActiveBorder();
      this.refreshItemVisibility(trg);
      if (!this.initRender && !skipDataBind) {
        var eventArg = {
          previousItem: this.prevItem,
          previousIndex: this.prevIndex,
          selectedItem: trg,
          selectedIndex: value,
          selectedContent: select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content),
          isSwiped: this.isSwiped,
          isInteracted,
          preventFocus: false
        };
        this.trigger("selected", eventArg, function(selectEventArgs) {
          if (!selectEventArgs.preventFocus) {
            trg.firstElementChild.focus();
          }
        });
      }
    };
    Tab2.prototype.setItems = function(items) {
      this.isReplace = true;
      this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
      this.tbObj.items = this.parseObject(items, 0);
      this.tbObj.dataBind();
      this.isReplace = false;
    };
    Tab2.prototype.setRTL = function(value) {
      this.tbObj.enableRtl = value;
      this.tbObj.dataBind();
      this.setCssClass(this.element, CLS_RTL5, value);
      this.refreshActiveBorder();
    };
    Tab2.prototype.refreshActiveBorder = function() {
      if (!isNullOrUndefined(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN2);
      }
      this.setActiveBorder();
    };
    Tab2.prototype.showPopup = function(config) {
      var tbPop = select(".e-popup.e-toolbar-pop", this.hdrEle);
      if (tbPop && tbPop.classList.contains("e-popup-close")) {
        var tbPopObj = tbPop && tbPop.ej2_instances[0];
        tbPopObj.position.X = this.headerPlacement === "Left" ? "left" : "right";
        tbPopObj.dataBind();
        tbPopObj.show(config);
      }
    };
    Tab2.prototype.bindDraggable = function() {
      var _this = this;
      if (this.allowDragAndDrop) {
        var tabHeader = this.element.querySelector("." + CLS_HEADER2);
        if (tabHeader) {
          var items = Array.prototype.slice.call(tabHeader.querySelectorAll("." + CLS_TB_ITEM));
          items.forEach(function(element) {
            _this.initializeDrag(element);
          });
        }
      }
    };
    Tab2.prototype.wireEvents = function() {
      this.bindDraggable();
      window.addEventListener("resize", this.resizeContext);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "keydown", this.spaceKeyDown, this);
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
      this.tabKeyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: { openPopup: "shift+f10", tab: "tab", shiftTab: "shift+tab" },
        eventName: "keydown"
      });
    };
    Tab2.prototype.unWireEvents = function() {
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
      if (!isNullOrUndefined(this.tabKeyModule)) {
        this.tabKeyModule.destroy();
      }
      if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      window.removeEventListener("resize", this.resizeContext);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "keydown", this.spaceKeyDown);
      this.element.classList.remove(CLS_RTL5);
      this.element.classList.remove(CLS_FOCUS);
    };
    Tab2.prototype.clickHandler = function(args) {
      this.element.classList.remove(CLS_FOCUS);
      var trg = args.originalEvent.target;
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (trg.classList.contains(CLS_ICON_CLOSE)) {
        this.removeTab(trgIndex);
      } else if (this.isVertical() && closest(trg, "." + CLS_HOR_NAV)) {
        this.showPopup(this.show);
      } else {
        this.isPopup = false;
        if (!isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {
          this.selectTab(trgIndex, args.originalEvent, true);
        }
      }
    };
    Tab2.prototype.swipeHandler = function(e) {
      if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {
        return;
      }
      if (this.isNested) {
        this.element.setAttribute("data-swipe", "true");
      }
      var nestedTab = this.element.querySelector('[data-swipe="true"]');
      if (nestedTab) {
        nestedTab.removeAttribute("data-swipe");
        return;
      }
      this.isSwiped = true;
      if (e.swipeDirection === "Right" && this.selectedItem !== 0) {
        for (var k = this.selectedItem - 1; k >= 0; k--) {
          if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(k, null, true);
            break;
          }
        }
      } else if (e.swipeDirection === "Left" && this.selectedItem !== selectAll("." + CLS_TB_ITEM, this.element).length - 1) {
        for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
          if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(i, null, true);
            break;
          }
        }
      }
      this.isSwiped = false;
    };
    Tab2.prototype.spaceKeyDown = function(e) {
      if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
        var clstHead = closest(e.target, "." + CLS_HEADER2);
        if (!isNullOrUndefined(clstHead)) {
          e.preventDefault();
        }
      }
    };
    Tab2.prototype.keyHandler = function(e) {
      if (this.element.classList.contains(CLS_DISABLE5)) {
        return;
      }
      this.element.classList.add(CLS_FOCUS);
      var trg = e.target;
      var tabHeader = this.getTabHeader();
      var actEle = select("." + CLS_ACTIVE2, tabHeader);
      this.popEle = select("." + CLS_TB_POP, tabHeader);
      if (!isNullOrUndefined(this.popEle)) {
        this.popObj = this.popEle.ej2_instances[0];
      }
      var item = closest(document.activeElement, "." + CLS_TB_ITEM);
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      switch (e.action) {
        case "space":
        case "enter":
          if (trg.parentElement.classList.contains(CLS_DISABLE5)) {
            return;
          }
          if (e.action === "enter" && trg.classList.contains("e-hor-nav")) {
            this.showPopup(this.show);
            break;
          }
          this.keyPressed(trg);
          break;
        case "tab":
        case "shiftTab":
          if (trg.classList.contains(CLS_WRAP) && closest(trg, "." + CLS_TB_ITEM).classList.contains(CLS_ACTIVE2) === false) {
            trg.setAttribute("tabindex", trg.getAttribute("data-tabindex"));
          }
          if (this.popObj && isVisible(this.popObj.element)) {
            this.popObj.hide(this.hide);
          }
          if (!isNullOrUndefined(actEle) && actEle.children.item(0).getAttribute("tabindex") === "-1") {
            actEle.children.item(0).setAttribute("tabindex", "0");
          }
          break;
        case "moveLeft":
        case "moveRight":
          if (!isNullOrUndefined(item)) {
            this.refreshItemVisibility(item);
          }
          break;
        case "openPopup":
          e.preventDefault();
          if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
            this.popObj.show(this.show);
          }
          break;
        case "delete":
          if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {
            var nxtSib = trgParent.nextSibling;
            if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
              nxtSib.firstElementChild.focus();
            }
            this.removeTab(this.getEleIndex(trgParent));
          }
          this.setActiveBorder();
          break;
      }
    };
    Tab2.prototype.refreshItemVisibility = function(target) {
      var scrCnt = select("." + this.scrCntClass, this.tbItems);
      if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {
        var scrBar = select(".e-hscroll-bar", this.tbItems);
        var scrStart = scrBar.scrollLeft;
        var scrEnd = scrStart + scrBar.offsetWidth;
        var eleStart = target.offsetLeft;
        var eleWidth = target.offsetWidth;
        var eleEnd = target.offsetLeft + target.offsetWidth;
        if (scrStart < eleStart && scrEnd < eleEnd) {
          var eleViewRange = scrEnd - eleStart;
          scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
        } else {
          if (scrStart > eleStart && scrEnd > eleEnd) {
            var eleViewRange = eleEnd - scrStart;
            scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
          }
        }
      } else {
        return;
      }
    };
    Tab2.prototype.getIndexFromEle = function(id) {
      return parseInt(id.substring(id.lastIndexOf("_") + 1), 10);
    };
    Tab2.prototype.hoverHandler = function(e) {
      var trg = e.target;
      if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
        trg.setAttribute("title", new L10n("tab", { closeButtonTitle: this.title }, this.locale).getConstant("closeButtonTitle"));
      }
    };
    Tab2.prototype.evalOnPropertyChangeItems = function(newProp, oldProp) {
      var _this = this;
      if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
        var changedProp = Object.keys(newProp.items);
        for (var i = 0; i < changedProp.length; i++) {
          var index = parseInt(Object.keys(newProp.items)[i], 10);
          var properties = Object.keys(newProp.items[index]);
          for (var j = 0; j < properties.length; j++) {
            var oldVal = Object(oldProp.items[index])[properties[j]];
            var newVal = Object(newProp.items[index])[properties[j]];
            var hdr = this.element.querySelectorAll("." + CLS_TB_ITEM)[index];
            var itemIndex = void 0;
            if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== "") {
              itemIndex = this.getIndexFromEle(hdr.id);
            } else {
              itemIndex = index;
            }
            var hdrItem = select("." + CLS_TB_ITEMS + " #" + CLS_ITEM3 + this.tabId + "_" + itemIndex, this.element);
            var cntItem = select("." + CLS_CONTENT2 + " #" + CLS_CONTENT2 + this.tabId + "_" + itemIndex, this.element);
            if (properties[j] === "header" || properties[j] === "headerTemplate") {
              var icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? "" : this.items[index].header.iconCss;
              var textVal = this.items[index].headerTemplate || this.items[index].header.text;
              if (properties[j] === "headerTemplate") {
                this.clearTabTemplate(hdrItem, properties[j], CLS_TB_ITEM);
              }
              if (textVal === "" && icon === "") {
                this.removeTab(index);
              } else {
                this.tbId = hdr.id;
                var arr = [];
                arr.push(this.items[index]);
                this.items.splice(index, 1);
                this.itemIndexArray.splice(index, 1);
                this.tbObj.items.splice(index, 1);
                var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN2);
                detach(hdrItem);
                this.isReplace = true;
                this.addTab(arr, index);
                if (isHiddenEle) {
                  this.hideTab(index);
                }
                this.isReplace = false;
              }
            }
            if (properties[j] === "content" && !isNullOrUndefined(cntItem)) {
              var strVal = typeof newVal === "string" || isNullOrUndefined(newVal.innerHTML);
              if (strVal && (newVal[0] === "." || newVal[0] === "#") && newVal.length) {
                var eleVal = document.querySelector(newVal);
                cntItem.appendChild(eleVal);
                eleVal.style.display = "";
              } else if (newVal === "" && oldVal[0] === "#") {
                document.body.appendChild(this.element.querySelector(oldVal)).style.display = "none";
                cntItem.innerHTML = newVal;
              } else if (this.isAngular || this.isReact) {
                this.clearTabTemplate(cntItem, properties[j], CLS_ITEM3);
                cntItem.innerHTML = "";
                this.templateCompile(cntItem, newVal, index);
              } else if (typeof newVal !== "function") {
                cntItem.innerHTML = newVal;
              }
            }
            if (properties[j] === "cssClass") {
              if (!isNullOrUndefined(hdrItem)) {
                hdrItem.classList.remove(oldVal);
                hdrItem.classList.add(newVal);
              }
              if (!isNullOrUndefined(cntItem)) {
                cntItem.classList.remove(oldVal);
                cntItem.classList.add(newVal);
              }
            }
            if (properties[j] === "disabled") {
              this.enableTab(index, newVal === true ? false : true);
            }
            if (properties[j] === "visible") {
              this.hideTab(index, newVal === true ? false : true);
            }
          }
        }
        if (this.isReact && this.portals && this.portals.length > 0) {
          this.renderReactTemplates(function() {
            _this.refreshActiveTabBorder();
          });
        }
      } else {
        this.lastIndex = 0;
        if (isNullOrUndefined(this.tbObj)) {
          this.reRenderItems();
        } else {
          if (this.isReact || this.isAngular) {
            this.clearTemplate();
          }
          this.setItems(newProp.items);
          if (this.templateEle.length > 0) {
            this.expTemplateContent();
          }
          this.templateEle = [];
          var selectElement = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
          while (selectElement.firstElementChild) {
            detach(selectElement.firstElementChild);
          }
          this.select(this.selectedItem);
          this.draggableItems = [];
          this.bindDraggable();
        }
      }
    };
    Tab2.prototype.clearTabTemplate = function(templateEle, templateName, className) {
      if (!this.clearTemplates) {
        return;
      }
      if (this.registeredTemplate && this.registeredTemplate[templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates[templateName].length; index++) {
          var registeredItem = registeredTemplates[templateName][index].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], [registeredTemplates[templateName][index]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[index];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Tab2.prototype.initializeDrag = function(target) {
      var _this = this;
      var dragObj = new Draggable(target, {
        dragArea: this.dragArea,
        dragTarget: "." + CLS_TB_ITEM,
        clone: true,
        helper: this.helper.bind(this),
        dragStart: this.itemDragStart.bind(this),
        drag: function(e) {
          var dragIndex = _this.getEleIndex(_this.dragItem);
          var dropIndex;
          var dropItem;
          var dragArgs = {
            draggedItem: _this.dragItem,
            event: e.event,
            target: e.target,
            droppedItem: e.target.closest("." + CLS_TB_ITEM),
            clonedElement: _this.cloneElement,
            index: dragIndex
          };
          if (!isNullOrUndefined(e.target.closest("." + CLS_TAB)) && !e.target.closest("." + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== "." + CLS_HEADER2) {
            _this.trigger("dragging", dragArgs);
          } else {
            if (!e.target.closest(_this.dragArea) && _this.overflowMode !== "Popup") {
              document.body.style.cursor = "not-allowed";
              addClass([_this.cloneElement], CLS_HIDDEN2);
              if (_this.dragItem.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.dragItem], CLS_HIDDEN2);
              }
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
            } else {
              document.body.style.cursor = "";
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
              if (_this.cloneElement.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.cloneElement], CLS_HIDDEN2);
              }
            }
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              var scrollRightNavEle = _this.element.querySelector(".e-scroll-right-nav");
              var scrollLeftNavEle = _this.element.querySelector(".e-scroll-left-nav");
              var hscrollBar = _this.element.querySelector(".e-hscroll-bar");
              if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                hscrollBar.scrollLeft -= 10;
              }
              if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {
                hscrollBar.scrollLeft += 10;
              }
            }
            _this.cloneElement.style.pointerEvents = "none";
            dropItem = closest(e.target, "." + CLS_TB_ITEM + ".e-draggable");
            var scrollContentWidth = 0;
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              scrollContentWidth = _this.element.querySelector(".e-hscroll-content").offsetWidth;
            }
            if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest("." + CLS_TAB).isSameNode(_this.dragItem.closest("." + CLS_TAB))) {
              dropIndex = _this.getEleIndex(dropItem);
              if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
              if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
            }
            _this.droppedIndex = _this.getEleIndex(_this.dragItem);
            _this.trigger("dragging", dragArgs);
          }
        },
        dragStop: this.itemDragStop.bind(this)
      });
      this.draggableItems.push(dragObj);
    };
    Tab2.prototype.helper = function(e) {
      this.cloneElement = this.createElement("div");
      if (e.element) {
        this.cloneElement = e.element.cloneNode(true);
        addClass([this.cloneElement], "e-tab-clone-element");
        if (this.element.querySelector("." + CLS_HEADER2).classList.contains(CLS_CLOSE_SHOW)) {
          addClass([this.cloneElement], CLS_CLOSE_SHOW);
        }
        removeClass([this.cloneElement.querySelector("." + CLS_WRAP)], "e-ripple");
        if (!isNullOrUndefined(this.cloneElement.querySelector(".e-ripple-element"))) {
          remove(this.cloneElement.querySelector(".e-ripple-element"));
        }
        document.body.appendChild(this.cloneElement);
      }
      return this.cloneElement;
    };
    Tab2.prototype.itemDragStart = function(e) {
      var _this = this;
      this.draggingItems = this.items.map(function(x) {
        return x;
      });
      this.dragItem = e.element;
      var dragArgs = {
        draggedItem: e.element,
        event: e.event,
        target: e.target,
        droppedItem: null,
        index: this.getEleIndex(this.dragItem),
        clonedElement: this.cloneElement,
        cancel: false
      };
      this.trigger("onDragStart", dragArgs, function(tabItemDragArgs) {
        if (tabItemDragArgs.cancel) {
          var dragObj = e.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          detach(_this.cloneElement);
        } else {
          _this.removeActiveClass();
          addClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
          _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
        }
      });
    };
    Tab2.prototype.dragAction = function(dropItem, dragsIndex, dropIndex) {
      if (this.items.length > 0) {
        var item = this.draggingItems[dragsIndex];
        this.draggingItems.splice(dragsIndex, 1);
        this.draggingItems.splice(dropIndex, 0, item);
      }
      if (this.overflowMode === "MultiRow") {
        dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
      }
      if (dragsIndex > dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          } else {
            var lastEle = dropItem.parentElement.lastChild;
            if (dropItem.isSameNode(lastEle)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
        }
      }
      if (dragsIndex < dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
        }
      }
    };
    Tab2.prototype.itemDragStop = function(e) {
      var _this = this;
      detach(this.cloneElement);
      this.cloneElement = null;
      this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
      document.body.style.cursor = "";
      var dragStopArgs = {
        draggedItem: this.dragItem,
        event: e.event,
        target: e.target,
        droppedItem: this.tbItem[this.droppedIndex],
        clonedElement: null,
        index: this.droppedIndex,
        cancel: false
      };
      this.trigger("dragged", dragStopArgs, function(tabItemDropArgs) {
        if (tabItemDropArgs.cancel) {
          _this.refresh();
        } else {
          if (_this.items.length > 0 && _this.draggingItems.length > 0) {
            _this.items = _this.draggingItems;
            _this.selectedItem = _this.droppedIndex;
            _this.refresh();
          } else {
            _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "";
            removeClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
            _this.selectTab(_this.droppedIndex, null, true);
          }
        }
      });
      this.dragItem = null;
    };
    Tab2.prototype.enableTab = function(index, value) {
      var tbItems = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(tbItems)) {
        return;
      }
      if (value === true) {
        tbItems.classList.remove(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.setAttribute("tabindex", tbItems.firstElementChild.getAttribute("data-tabindex"));
      } else {
        tbItems.classList.add(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.removeAttribute("tabindex");
        if (tbItems.classList.contains(CLS_ACTIVE2)) {
          this.select(index + 1);
        }
      }
      if (!isNullOrUndefined(this.items[index])) {
        this.items[index].disabled = !value;
        this.dataBind();
      }
      tbItems.firstElementChild.setAttribute("aria-disabled", value === true ? "false" : "true");
    };
    Tab2.prototype.addTab = function(items, index) {
      var _this = this;
      var addArgs = { addedItems: items, cancel: false };
      if (!this.isReplace) {
        this.trigger("adding", addArgs, function(tabAddingArgs) {
          if (!tabAddingArgs.cancel) {
            _this.addingTabContent(items, index);
          }
        });
      } else {
        this.addingTabContent(items, index);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.addingTabContent = function(items, index) {
      var _this = this;
      var lastEleIndex = 0;
      this.hdrEle = select("." + CLS_HEADER2, this.element);
      if (isNullOrUndefined(this.hdrEle)) {
        this.items = items;
        this.reRenderItems();
        this.bindDraggable();
      } else {
        var itemsCount = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element).length;
        if (itemsCount !== 0) {
          lastEleIndex = this.lastIndex + 1;
        }
        if (isNullOrUndefined(index)) {
          index = itemsCount - 1;
        }
        if (itemsCount < index || index < 0 || isNaN(index)) {
          return;
        }
        if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {
          this.hdrEle.style.display = "";
        }
        if (!isNullOrUndefined(this.bdrLine)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
        this.isAdd = true;
        var tabItems_2 = this.parseObject(items, index);
        this.isAdd = false;
        var i_1 = 0;
        var textValue_1;
        items.forEach(function(item, place) {
          textValue_1 = item.headerTemplate || item.header.text;
          if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue_1) || textValue_1.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {
            if (tabItems_2[place]) {
              if (isNullOrUndefined(item.id)) {
                item.id = CLS_ITEM3 + _this.tabId + "_" + TABITEMPREFIX + (lastEleIndex + place).toString();
              }
              tabItems_2[place].htmlAttributes["data-id"] = item.id;
            }
            _this.items.splice(index + i_1, 0, item);
            i_1++;
          }
          if (_this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {
            var no = lastEleIndex + place;
            var ele = _this.createElement("div", {
              id: CLS_CONTENT2 + _this.tabId + "_" + no,
              className: CLS_ITEM3,
              attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + "_" + no }
            });
            _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);
            var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());
            _this.getContent(eleTrg, item.content, "render", index);
          }
        });
        this.tbObj.addItems(tabItems_2, index);
        if (!this.isReplace) {
          this.trigger("added", { addedItems: items });
        }
        if (this.selectedItem === index) {
          this.select(index);
        } else {
          this.setActiveBorder();
          this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
        }
        this.bindDraggable();
      }
    };
    Tab2.prototype.removeTab = function(index) {
      var _this = this;
      var trg = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(trg)) {
        return;
      }
      var removeArgs = { removedItem: trg, removedIndex: index, cancel: false };
      this.trigger("removing", removeArgs, function(tabRemovingArgs) {
        if (!tabRemovingArgs.cancel) {
          var header = select("#" + CLS_ITEM3 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_TB_ITEMS, _this.element));
          if (!isNullOrUndefined(header)) {
            _this.clearTabTemplate(header, "headerTemplate", CLS_TB_ITEM);
          }
          _this.tbObj.removeItems(index);
          if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {
            index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);
          }
          var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);
          _this.items.splice(targetEleIndex, 1);
          _this.itemIndexArray.splice(targetEleIndex, 1);
          _this.refreshActiveBorder();
          var cntTrg = select("#" + CLS_CONTENT2 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_CONTENT2, _this.element));
          if (!isNullOrUndefined(cntTrg)) {
            _this.clearTabTemplate(cntTrg, "content", CLS_ITEM3);
            detach(cntTrg);
          }
          _this.trigger("removed", tabRemovingArgs);
          if (_this.draggableItems && _this.draggableItems.length > 0) {
            _this.draggableItems[index].destroy();
            _this.draggableItems[index] = null;
            _this.draggableItems.splice(index, 1);
          }
          if (trg.classList.contains(CLS_ACTIVE2)) {
            index = index > selectAll("." + CLS_TB_ITEM + ":not(." + CLS_TB_POPUP + ")", _this.element).length - 1 ? index - 1 : index;
            _this.enableAnimation = false;
            _this.selectedItem = index;
            _this.select(index);
          } else if (index !== _this.selectedItem) {
            if (index < _this.selectedItem) {
              index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);
              _this.setProperties({ selectedItem: index > -1 ? index : _this.selectedItem }, true);
              _this.prevIndex = _this.selectedItem;
            }
            _this.tbItem = selectAll("." + CLS_TB_ITEM, _this.getTabHeader());
          }
          if (selectAll("." + CLS_TB_ITEM, _this.element).length === 0) {
            _this.hdrEle.style.display = "none";
          }
          _this.enableAnimation = true;
        }
      });
    };
    Tab2.prototype.hideTab = function(index, value) {
      var items;
      var item = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(item)) {
        return;
      }
      if (isNullOrUndefined(value)) {
        value = true;
      }
      this.bdrLine.classList.add(CLS_HIDDEN2);
      if (value === true) {
        item.classList.add(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        if (items.length !== 0 && item.classList.contains(CLS_ACTIVE2)) {
          if (index !== 0) {
            for (var i = index - 1; i >= 0; i--) {
              if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
                this.select(i);
                break;
              } else if (i === 0) {
                for (var k = index + 1; k < this.tbItem.length; k++) {
                  if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                    this.select(k);
                    break;
                  }
                }
              }
            }
          } else {
            for (var k = index + 1; k < this.tbItem.length; k++) {
              if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                this.select(k);
                break;
              }
            }
          }
        } else if (items.length === 0) {
          this.element.classList.add(CLS_HIDDEN2);
        }
      } else {
        this.element.classList.remove(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        item.classList.remove(CLS_HIDDEN2);
        if (items.length === 0) {
          this.select(index);
        }
      }
      this.setActiveBorder();
      if (!isNullOrUndefined(item.firstElementChild)) {
        item.firstElementChild.setAttribute("aria-hidden", "" + value);
      }
      if (this.overflowMode === "Popup" && this.tbObj) {
        this.tbObj.refreshOverflow();
      }
    };
    Tab2.prototype.selectTab = function(args, event2, isInteracted) {
      if (event2 === void 0) {
        event2 = null;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.isInteracted = isInteracted;
      this.select(args, event2);
    };
    Tab2.prototype.select = function(args, event2) {
      var _this = this;
      var tabHeader = this.getTabHeader();
      this.tbItems = select("." + CLS_TB_ITEMS, tabHeader);
      this.tbItem = selectAll("." + CLS_TB_ITEM, tabHeader);
      this.content = select("." + CLS_CONTENT2, this.element);
      this.prevItem = this.tbItem[this.prevIndex];
      if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
        this.selectedItem = 0;
      } else {
        this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
      }
      var trg = this.tbItem[args];
      if (isNullOrUndefined(trg)) {
        this.selectedID = "0";
      } else {
        this.selectingID = this.extIndex(trg.id);
      }
      if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE5)) {
        this.prevItem.children.item(0).setAttribute("tabindex", this.prevItem.firstElementChild.getAttribute("tabindex"));
      }
      var eventArg = {
        event: event2,
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: this.tbItem[this.selectedItem],
        selectedIndex: this.selectedItem,
        selectedContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectedID, this.content) : null,
        selectingItem: trg,
        selectingIndex: args,
        selectingContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content) : null,
        isSwiped: this.isSwiped,
        isInteracted: this.isInteracted,
        cancel: false
      };
      if (!this.initRender) {
        this.trigger("selecting", eventArg, function(selectArgs) {
          if (!selectArgs.cancel) {
            _this.selectingContent(args, _this.isInteracted);
          }
        });
      } else {
        this.selectingContent(args, this.isInteracted);
      }
      this.isInteracted = false;
    };
    Tab2.prototype.selectingContent = function(args, isInteracted) {
      if (typeof args === "number") {
        if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE5) || this.tbItem[args].classList.contains(CLS_HIDDEN2))) {
          for (var i = args + 1; i < this.items.length; i++) {
            if (this.items[i].disabled === false && this.items[i].visible === true) {
              args = i;
              break;
            } else {
              args = 0;
            }
          }
        }
        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
          this.prevIndex = this.selectedItem;
          this.prevItem = this.tbItem[this.prevIndex];
          if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {
            this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);
            if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {
              this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
              var item = this.items[args];
              this.items.splice(args, 1);
              this.items.splice(this.tbItem.length - 1, 0, item);
              var itemId = this.itemIndexArray[args];
              this.itemIndexArray.splice(args, 1);
              this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);
            }
          } else {
            this.setActive(args, null, isInteracted);
          }
        } else {
          this.setActive(0, null, isInteracted);
        }
      } else if (args instanceof HTMLElement) {
        this.setActive(this.getEleIndex(args), null, isInteracted);
      }
    };
    Tab2.prototype.getItemIndex = function(tabItemId) {
      var tabIndex;
      for (var i = 0; i < this.tbItem.length; i++) {
        var value = this.tbItem[i].getAttribute("data-id");
        if (tabItemId === value) {
          tabIndex = i;
          break;
        }
      }
      return tabIndex;
    };
    Tab2.prototype.disable = function(value) {
      this.setCssClass(this.element, CLS_DISABLE5, value);
      this.element.setAttribute("aria-disabled", "" + value);
    };
    Tab2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedItem", "actEleId"]);
    };
    Tab2.prototype.getModuleName = function() {
      return "tab";
    };
    Tab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, { width: formatUnit(newProp.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { height: formatUnit(newProp.height) });
            this.setContentHeight(false);
            break;
          case "cssClass":
            var headerEle = this.element.querySelector("." + CLS_HEADER2);
            if (oldProp.cssClass !== "" && !isNullOrUndefined(oldProp.cssClass)) {
              this.setCssClass(this.element, oldProp.cssClass, false);
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, oldProp.cssClass, false);
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            } else {
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            }
            break;
          case "items":
            this.evalOnPropertyChangeItems(newProp, oldProp);
            break;
          case "showCloseButton":
            this.setCloseButton(newProp.showCloseButton);
            break;
          case "reorderActiveTab":
            this.refreshActiveTabBorder();
            break;
          case "selectedItem":
            this.selectedItem = oldProp.selectedItem;
            this.select(newProp.selectedItem);
            break;
          case "headerPlacement":
            this.changeOrientation(newProp.headerPlacement);
            break;
          case "enableRtl":
            this.setRTL(newProp.enableRtl);
            break;
          case "overflowMode":
            this.tbObj.overflowMode = newProp.overflowMode;
            this.tbObj.dataBind();
            this.refreshActiveTabBorder();
            break;
          case "heightAdjustMode":
            this.setContentHeight(false);
            this.select(this.selectedItem);
            break;
          case "scrollStep":
            if (this.tbObj) {
              this.tbObj.scrollStep = this.scrollStep;
            }
            break;
          case "allowDragAndDrop":
            this.bindDraggable();
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.draggableItems.forEach(function(item) {
                item.dragArea = _this.dragArea;
              });
              this.refresh();
            }
            break;
        }
      }
    };
    Tab2.prototype.refreshActiveTab = function() {
      if (this.isReact && this.isTemplate) {
        this.clearTemplate();
      }
      if (!this.isTemplate) {
        if (this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2)) {
          detach(this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).children[0]);
          detach(this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0]);
          var item = this.items[this.selectedItem];
          var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
          var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
          var text = item.headerTemplate || item.header.text;
          var txtWrap = this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
          if (!isNullOrUndefined(text.tagName)) {
            txtWrap.appendChild(text);
          } else {
            this.headerTextCompile(txtWrap, text, this.selectedItem);
          }
          var tEle = void 0;
          var icon = this.createElement("span", {
            className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
          });
          var tConts = this.createElement("div", { className: CLS_TEXT_WRAP });
          tConts.appendChild(txtWrap);
          if (text !== "" && text !== void 0 && css !== "") {
            if (pos === "left" || pos === "top") {
              tConts.insertBefore(icon, tConts.firstElementChild);
            } else {
              tConts.appendChild(icon);
            }
            tEle = txtWrap;
            this.isIconAlone = false;
          } else {
            tEle = css === "" ? txtWrap : icon;
            if (tEle === icon) {
              detach(txtWrap);
              tConts.appendChild(icon);
              this.isIconAlone = true;
            }
          }
          var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
          var wrapAtt = item.disabled ? {} : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "true", "aria-disabled": "false" };
          tConts.appendChild(this.btnCls.cloneNode(true));
          var wraper = this.createElement("div", { className: CLS_WRAP, attrs: wrapAtt });
          wraper.appendChild(tConts);
          if (pos === "top" || pos === "bottom") {
            this.element.classList.add("e-vertical-icon");
          }
          this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wraper);
          var crElem = this.createElement("div");
          var cnt = item.content;
          var eleStr = void 0;
          if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
            if (typeof cnt === "string" && this.enableHtmlSanitizer) {
              cnt = SanitizeHtmlHelper.sanitize(cnt);
            }
            if (cnt[0] === "." || cnt[0] === "#") {
              if (document.querySelectorAll(cnt).length) {
                var eleVal = document.querySelector(cnt);
                eleStr = eleVal.outerHTML.trim();
                crElem.appendChild(eleVal);
                eleVal.style.display = "";
              } else {
                this.compileElement(crElem, cnt, "content", this.selectedItem);
              }
            } else {
              this.compileElement(crElem, cnt, "content", this.selectedItem);
            }
          } else {
            crElem.appendChild(cnt);
          }
          if (!isNullOrUndefined(eleStr)) {
            if (this.templateEle.indexOf(cnt.toString()) === -1) {
              this.templateEle.push(cnt.toString());
            }
          }
          this.element.querySelector("." + CLS_ITEM3 + "." + CLS_ACTIVE2).appendChild(crElem);
        }
      } else {
        var tabItems = this.element.querySelector("." + CLS_TB_ITEMS);
        var element = this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2);
        var index = this.getIndexFromEle(element.id);
        var header = element.innerText;
        var detachContent = this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0];
        var mainContents = detachContent.innerHTML;
        detach(element);
        detach(detachContent);
        var attr = {
          className: CLS_TB_ITEM + " " + CLS_TEMPLATE2 + " " + CLS_ACTIVE2,
          id: CLS_ITEM3 + this.tabId + "_" + index
        };
        var txtString = this.createElement("span", {
          className: CLS_TEXT,
          innerHTML: header,
          attrs: { "role": "presentation" }
        }).outerHTML;
        var conte = this.createElement("div", {
          className: CLS_TEXT_WRAP,
          innerHTML: txtString + this.btnCls.outerHTML
        }).outerHTML;
        var tabIndex = element.firstElementChild.getAttribute("data-tabindex");
        var wrap = this.createElement("div", {
          className: CLS_WRAP,
          innerHTML: conte,
          attrs: { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-controls": CLS_CONTENT2 + this.tabId + "_" + index, "aria-selected": "true", "aria-disabled": "false" }
        });
        tabItems.insertBefore(this.createElement("div", attr), tabItems.children[index + 1]);
        this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wrap);
        var crElem = this.createElement("div", { innerHTML: mainContents });
        this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).appendChild(crElem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.refreshActiveTabBorder = function() {
      var activeEle = select("." + CLS_TB_ITEM + "." + CLS_TB_POPUP + "." + CLS_ACTIVE2, this.element);
      if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {
        this.select(this.getEleIndex(activeEle));
      }
      this.refreshActiveBorder();
    };
    __decorate13([
      Collection([], TabItem)
    ], Tab2.prototype, "items", void 0);
    __decorate13([
      Property("100%")
    ], Tab2.prototype, "width", void 0);
    __decorate13([
      Property("auto")
    ], Tab2.prototype, "height", void 0);
    __decorate13([
      Property("")
    ], Tab2.prototype, "cssClass", void 0);
    __decorate13([
      Property(0)
    ], Tab2.prototype, "selectedItem", void 0);
    __decorate13([
      Property("Top")
    ], Tab2.prototype, "headerPlacement", void 0);
    __decorate13([
      Property("Content")
    ], Tab2.prototype, "heightAdjustMode", void 0);
    __decorate13([
      Property("Scrollable")
    ], Tab2.prototype, "overflowMode", void 0);
    __decorate13([
      Property("Dynamic")
    ], Tab2.prototype, "loadOn", void 0);
    __decorate13([
      Property(false)
    ], Tab2.prototype, "enablePersistence", void 0);
    __decorate13([
      Property(false)
    ], Tab2.prototype, "enableHtmlSanitizer", void 0);
    __decorate13([
      Property(false)
    ], Tab2.prototype, "showCloseButton", void 0);
    __decorate13([
      Property(true)
    ], Tab2.prototype, "reorderActiveTab", void 0);
    __decorate13([
      Property()
    ], Tab2.prototype, "scrollStep", void 0);
    __decorate13([
      Property()
    ], Tab2.prototype, "dragArea", void 0);
    __decorate13([
      Property(false)
    ], Tab2.prototype, "allowDragAndDrop", void 0);
    __decorate13([
      Property(true)
    ], Tab2.prototype, "clearTemplates", void 0);
    __decorate13([
      Complex({}, TabAnimationSettings)
    ], Tab2.prototype, "animation", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "created", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "adding", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "added", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "selecting", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "selected", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "removing", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "removed", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "onDragStart", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "dragging", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "dragged", void 0);
    __decorate13([
      Event()
    ], Tab2.prototype, "destroyed", void 0);
    Tab2 = __decorate13([
      NotifyPropertyChanges
    ], Tab2);
    return Tab2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT2 = "e-treeview";
var CONTROL = "e-control";
var COLLAPSIBLE = "e-icon-collapsible";
var EXPANDABLE = "e-icon-expandable";
var LISTITEM = "e-list-item";
var LISTTEXT = "e-list-text";
var LISTWRAP = "e-text-wrap";
var IELISTWRAP = "e-ie-wrap";
var PARENTITEM = "e-list-parent";
var HOVER = "e-hover";
var ACTIVE = "e-active";
var LOAD = "e-icons-spinner";
var PROCESS = "e-process";
var ICON2 = "e-icons";
var TEXTWRAP = "e-text-content";
var INPUT = "e-input";
var INPUTGROUP = "e-input-group";
var TREEINPUT = "e-tree-input";
var EDITING = "e-editing";
var RTL4 = "e-rtl";
var INTERACTION = "e-interaction";
var DRAGITEM = "e-drag-item";
var DROPPABLE = "e-droppable";
var DRAGGING = "e-dragging";
var SIBLING = "e-sibling";
var DROPIN = "e-drop-in";
var DROPNEXT = "e-drop-next";
var DROPOUT = "e-drop-out";
var NODROP = "e-no-drop";
var FULLROWWRAP = "e-fullrow-wrap";
var FULLROW = "e-fullrow";
var SELECTED2 = "e-selected";
var EXPANDED = "e-expanded";
var NODECOLLAPSED = "e-node-collapsed";
var DISABLE = "e-disable";
var DROPCOUNT = "e-drop-count";
var CHECK = "e-check";
var INDETERMINATE = "e-stop";
var CHECKBOXWRAP = "e-checkbox-wrapper";
var CHECKBOXFRAME = "e-frame";
var CHECKBOXRIPPLE = "e-ripple-container";
var RIPPLE = "e-ripple";
var RIPPLEELMENT = "e-ripple-element";
var FOCUS = "e-node-focus";
var IMAGE = "e-list-img";
var BIGGER = "e-bigger";
var SMALL = "e-small";
var CHILD = "e-has-child";
var ITEM_ANIMATION_ACTIVE = "e-animation-active";
var DISABLED2 = "e-disabled";
var PREVENTSELECT = "e-prevent";
var treeAriaAttr = {
  treeRole: "group",
  itemRole: "treeitem",
  listRole: "group",
  itemText: "",
  wrapperRole: ""
};
var FieldsSettings = (
  /** @class */
  function(_super) {
    __extends14(FieldsSettings2, _super);
    function FieldsSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property("child")
    ], FieldsSettings2.prototype, "child", void 0);
    __decorate14([
      Property([])
    ], FieldsSettings2.prototype, "dataSource", void 0);
    __decorate14([
      Property("expanded")
    ], FieldsSettings2.prototype, "expanded", void 0);
    __decorate14([
      Property("hasChildren")
    ], FieldsSettings2.prototype, "hasChildren", void 0);
    __decorate14([
      Property("htmlAttributes")
    ], FieldsSettings2.prototype, "htmlAttributes", void 0);
    __decorate14([
      Property("iconCss")
    ], FieldsSettings2.prototype, "iconCss", void 0);
    __decorate14([
      Property("id")
    ], FieldsSettings2.prototype, "id", void 0);
    __decorate14([
      Property("imageUrl")
    ], FieldsSettings2.prototype, "imageUrl", void 0);
    __decorate14([
      Property("isChecked")
    ], FieldsSettings2.prototype, "isChecked", void 0);
    __decorate14([
      Property("parentID")
    ], FieldsSettings2.prototype, "parentID", void 0);
    __decorate14([
      Property(null)
    ], FieldsSettings2.prototype, "query", void 0);
    __decorate14([
      Property("selectable")
    ], FieldsSettings2.prototype, "selectable", void 0);
    __decorate14([
      Property("selected")
    ], FieldsSettings2.prototype, "selected", void 0);
    __decorate14([
      Property(null)
    ], FieldsSettings2.prototype, "tableName", void 0);
    __decorate14([
      Property("text")
    ], FieldsSettings2.prototype, "text", void 0);
    __decorate14([
      Property("tooltip")
    ], FieldsSettings2.prototype, "tooltip", void 0);
    __decorate14([
      Property("navigateUrl")
    ], FieldsSettings2.prototype, "navigateUrl", void 0);
    return FieldsSettings2;
  }(ChildProperty)
);
var ActionSettings = (
  /** @class */
  function(_super) {
    __extends14(ActionSettings2, _super);
    function ActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property("SlideDown")
    ], ActionSettings2.prototype, "effect", void 0);
    __decorate14([
      Property(400)
    ], ActionSettings2.prototype, "duration", void 0);
    __decorate14([
      Property("linear")
    ], ActionSettings2.prototype, "easing", void 0);
    return ActionSettings2;
  }(ChildProperty)
);
var NodeAnimationSettings = (
  /** @class */
  function(_super) {
    __extends14(NodeAnimationSettings2, _super);
    function NodeAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "collapse", void 0);
    __decorate14([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "expand", void 0);
    return NodeAnimationSettings2;
  }(ChildProperty)
);
var TreeView = (
  /** @class */
  function(_super) {
    __extends14(TreeView2, _super);
    function TreeView2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isRefreshed = false;
      _this.preventExpand = false;
      _this.checkedElement = [];
      _this.disableNode = [];
      _this.validArr = [];
      _this.validNodes = [];
      _this.expandChildren = [];
      _this.isFieldChange = false;
      _this.changeDataSource = false;
      _this.hasTemplate = false;
      _this.isFirstRender = false;
      _this.isNodeDropped = false;
      _this.isInteracted = false;
      _this.isRightClick = false;
      _this.mouseDownStatus = false;
      return _this;
    }
    TreeView_1 = TreeView2;
    TreeView2.prototype.getModuleName = function() {
      return "treeview";
    };
    TreeView2.prototype.preRender = function() {
      var _this = this;
      this.checkActionNodes = [];
      this.parentNodeCheck = [];
      this.dragStartAction = false;
      this.isAnimate = false;
      this.keyConfigs = {
        escape: "escape",
        end: "end",
        enter: "enter",
        f2: "f2",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        ctrlA: "ctrl+A",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        shiftSpace: "shift+space",
        ctrlSpace: "ctrl+space"
      };
      this.listBaseOption = {
        expandCollapse: true,
        showIcon: true,
        expandIconClass: EXPANDABLE,
        ariaAttributes: treeAriaAttr,
        expandIconPosition: "Left",
        itemCreated: function(e) {
          _this.beforeNodeCreate(e);
        },
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        itemNavigable: this.fullRowNavigable
      };
      this.updateListProp(this.fields);
      this.aniObj = new Animation({});
      this.treeList = [];
      this.isLoaded = false;
      this.isInitalExpand = false;
      this.expandChildren = [];
      this.index = 0;
      this.setTouchClass();
      if (isNullOrUndefined(this.selectedNodes)) {
        this.setProperties({ selectedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.checkedNodes)) {
        this.setProperties({ checkedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.expandedNodes)) {
        this.setProperties({ expandedNodes: [] }, true);
      } else {
        this.isInitalExpand = true;
      }
    };
    TreeView2.prototype.getPersistData = function() {
      var keyEntity = ["selectedNodes", "checkedNodes", "expandedNodes"];
      return this.addOnPersist(keyEntity);
    };
    TreeView2.prototype.render = function() {
      this.initialRender = true;
      this.initialize();
      this.setDataBinding(false);
      this.setDisabledMode();
      this.setExpandOnType();
      if (!this.disabled) {
        this.setRipple();
      }
      this.wireEditingEvents(this.allowEditing);
      this.setDragAndDrop(this.allowDragAndDrop);
      if (!this.disabled) {
        this.wireEvents();
      }
      this.initialRender = false;
      this.renderComplete();
    };
    TreeView2.prototype.initialize = function() {
      this.element.setAttribute("role", "tree");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
      this.setCssClass(null, this.cssClass);
      this.setEnableRtl();
      this.setFullRow(this.fullRowSelect);
      this.setTextWrap();
      this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
    };
    TreeView2.prototype.setDisabledMode = function() {
      if (this.disabled) {
        this.element.classList.add(DISABLED2);
        this.element.setAttribute("aria-disabled", "true");
      } else {
        this.element.classList.remove(DISABLED2);
        this.element.setAttribute("aria-disabled", "false");
      }
    };
    TreeView2.prototype.setEnableRtl = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL4);
    };
    TreeView2.prototype.setRipple = function() {
      var tempStr = "." + FULLROW + ",." + TEXTWRAP;
      var rippleModel = {
        selector: tempStr,
        ignore: "." + TEXTWRAP + " > ." + ICON2 + ",." + INPUTGROUP + ",." + INPUT + ", ." + CHECKBOXWRAP
      };
      this.rippleFn = rippleEffect(this.element, rippleModel);
      var iconModel = {
        selector: "." + TEXTWRAP + " > ." + ICON2,
        isCenterRipple: true
      };
      this.rippleIconFn = rippleEffect(this.element, iconModel);
    };
    TreeView2.prototype.setFullRow = function(isEnabled) {
      (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);
    };
    TreeView2.prototype.setMultiSelect = function(isEnabled) {
      if (isEnabled) {
        this.element.setAttribute("aria-multiselectable", "true");
      } else {
        this.element.setAttribute("aria-multiselectable", "false");
      }
    };
    TreeView2.prototype.templateComplier = function(template) {
      if (template) {
        this.hasTemplate = true;
        var e = void 0;
        this.element.classList.add(INTERACTION);
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e2) {
          return compile(template);
        }
      }
      this.element.classList.remove(INTERACTION);
      return void 0;
    };
    TreeView2.prototype.setDataBinding = function(changeDataSource) {
      var _this = this;
      this.treeList.push("false");
      if (this.fields.dataSource instanceof DataManager) {
        this.isOffline = this.fields.dataSource.dataSource.offline;
        if (this.fields.dataSource.ready) {
          this.fields.dataSource.ready.then(function(e) {
            _this.isOffline = _this.fields.dataSource.dataSource.offline;
            if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {
              _this.treeList.pop();
              _this.treeData = e.result;
              _this.isNumberTypeId = _this.getType();
              _this.setRootData();
              _this.renderItems(true);
              if (_this.treeList.length === 0 && !_this.isLoaded) {
                _this.finalize();
              }
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        } else {
          this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function(e) {
            _this.treeList.pop();
            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();
            _this.setRootData();
            if (changeDataSource) {
              _this.changeDataSource = true;
            }
            _this.renderItems(true);
            _this.changeDataSource = false;
            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        this.treeList.pop();
        if (isNullOrUndefined(this.fields.dataSource)) {
          this.rootData = this.treeData = [];
        } else {
          this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
          this.setRootData();
        }
        this.isNumberTypeId = this.getType();
        this.renderItems(false);
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.getQuery = function(mapper, value) {
      if (value === void 0) {
        value = null;
      }
      var columns = [];
      var query;
      if (!mapper.query) {
        query = new Query();
        var prop = this.getActualProperties(mapper);
        for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
          var col = _a[_i];
          if (col !== "dataSource" && col !== "tableName" && col !== "child" && !!mapper[col] && col !== "url" && columns.indexOf(mapper[col]) === -1) {
            columns.push(mapper[col]);
          }
        }
        query.select(columns);
        if (prop.hasOwnProperty("tableName")) {
          query.from(mapper.tableName);
        }
      } else {
        query = mapper.query.clone();
      }
      ListBase.addSorting(this.sortOrder, mapper.text, query);
      if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {
        query.where(mapper.parentID, "equal", this.isNumberTypeId ? parseFloat(value) : value);
      }
      return query;
    };
    TreeView2.prototype.getType = function() {
      return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === "number" ? true : false : false;
    };
    TreeView2.prototype.setRootData = function() {
      this.dataType = this.getDataType(this.treeData, this.fields);
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        var rootItems = this.getChildNodes(this.treeData, void 0, true);
        if (isNullOrUndefined(rootItems)) {
          this.rootData = [];
        } else {
          this.rootData = rootItems;
        }
      } else {
        this.rootData = this.treeData;
      }
    };
    TreeView2.prototype.isChildObject = function() {
      if (typeof this.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    TreeView2.prototype.renderItems = function(isSorted) {
      this.listBaseOption.ariaAttributes.level = 1;
      var sortedData = this.getSortedData(this.rootData);
      this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
      this.element.appendChild(this.ulElement);
      var rootNodes = this.ulElement.querySelectorAll(".e-list-item");
      if (this.loadOnDemand === false) {
        var i = 0;
        while (i < rootNodes.length) {
          this.renderChildNodes(rootNodes[i], true, null, true);
          i++;
        }
      }
      var parentEle = selectAll("." + PARENTITEM, this.element);
      if (parentEle.length === 1 && (rootNodes && rootNodes.length !== 0) || this.loadOnDemand) {
        this.finalizeNode(this.element);
      }
      this.parentNodeCheck = [];
      this.parentCheckData = [];
      this.updateCheckedStateFromDS();
      if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateCheckedStateFromDS = function(id) {
      this.validNodes = [];
      if (this.treeData && this.showCheckBox) {
        if (this.dataType === 1) {
          var mapper = this.fields;
          var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < resultData.length; i++) {
            var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
            var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;
            if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
              this.checkedNodes.push(resultId);
            }
            if (resultData[i][this.fields.hasChildren]) {
              var id_1 = resultData[i][this.fields.id];
              var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", id_1, false));
              for (var child = 0; child < childData.length; child++) {
                var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;
                if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                  this.checkedNodes.push(childId);
                }
              }
            }
          }
          for (var i = 0; i < this.checkedNodes.length; i++) {
            var mapper_1 = this.fields;
            var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, "equal", this.checkedNodes[i], true));
            if (checkState[0] && this.autoCheck) {
              this.getCheckedNodeDetails(mapper_1, checkState);
              this.checkIndeterminateState(checkState[0]);
            }
            if (checkState.length > 0) {
              var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
            var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, "equal", this.checkedNodes[i], true));
            for (var index = 0; index < checkedData.length; index++) {
              var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                this.checkedNodes.push(checkedId);
              }
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
          }
        } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
          for (var index = 0; index < this.treeData.length; index++) {
            var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : "";
            if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
              this.checkedNodes.push(fieldId);
            }
            if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {
              this.validNodes.push(fieldId);
            }
            var childItems = getValue(this.fields.child.toString(), this.treeData[index]);
            if (childItems) {
              this.updateChildCheckState(childItems, this.treeData[index]);
            }
          }
          this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;
        }
        this.setProperties({ checkedNodes: this.validNodes }, true);
      }
    };
    TreeView2.prototype.getCheckedNodeDetails = function(mapper, checkNodes) {
      var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
      var count = 0;
      var element = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
      var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');
      if (!element && !parentEle) {
        var len = this.parentNodeCheck.length;
        if (this.parentNodeCheck.indexOf(id) === -1) {
          this.parentNodeCheck.push(id);
        }
        var childNodes = this.getChildNodes(this.treeData, id);
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
          if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
            this.checkedNodes.push(id);
          }
        }
        var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", id, true));
        this.getCheckedNodeDetails(mapper, preElement);
      } else if (parentEle) {
        var check = select("." + CHECK, parentEle);
        if (!check) {
          this.changeState(parentEle, "indeterminate", null, true, true);
        }
      }
    };
    TreeView2.prototype.updateParentCheckState = function() {
      var indeterminate = selectAll("." + INDETERMINATE, this.element);
      var childCheckedElement;
      for (var i = 0; i < indeterminate.length; i++) {
        var node = closest(indeterminate[i], "." + LISTITEM);
        var nodeId = node.getAttribute("data-uid").toString();
        if (this.dataType === 1) {
          childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, "equal", nodeId, true));
        } else {
          childCheckedElement = this.getChildNodes(this.treeData, nodeId);
        }
        var count = 0;
        if (childCheckedElement) {
          for (var j = 0; j < childCheckedElement.length; j++) {
            var childId = childCheckedElement[j][this.fields.id].toString();
            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }
          if (count === childCheckedElement.length) {
            var nodeCheck = node.getAttribute("data-uid");
            if (this.checkedNodes.indexOf(nodeCheck) === -1) {
              this.checkedNodes.push(nodeCheck);
            }
            this.changeState(node, "check", null, true, true);
          } else if (count === 0 && this.checkedNodes.length === 0) {
            this.changeState(node, "uncheck", null, true, true);
          }
        }
      }
    };
    TreeView2.prototype.checkIndeterminateState = function(data) {
      var element;
      if (this.dataType === 1) {
        element = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
      } else {
        element = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
      }
      if (element) {
        var ariaChecked = element.getAttribute("aria-checked");
        if (ariaChecked !== "true") {
          this.changeState(element, "indeterminate", null, true, true);
        }
      } else if (this.dataType === 2) {
        var len = this.parentNodeCheck.length;
        if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
          this.parentNodeCheck.push(data[this.fields.id].toString());
        }
      }
    };
    TreeView2.prototype.updateChildCheckState = function(childItems, treeData) {
      var count = 0;
      var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : "";
        if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }
        if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {
          this.validNodes.push(checkedChild);
        }
        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);
        if (subChildItems && subChildItems.length) {
          if (this.parentCheckData.indexOf(treeData) === -1)
            this.parentCheckData.push(treeData);
          this.updateChildCheckState(subChildItems, childItems[index]);
        }
        if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
          this.checkedNodes.push(checkedParent);
        }
      }
      if (count !== 0 && this.autoCheck) {
        this.checkIndeterminateState(treeData);
        for (var len = 0; len < this.parentCheckData.length; len++) {
          if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {
            this.checkIndeterminateState(this.parentCheckData[len]);
          }
        }
      }
      this.parentCheckData = [];
    };
    TreeView2.prototype.beforeNodeCreate = function(e) {
      if (this.showCheckBox) {
        var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });
        var icon = select("div." + ICON2, e.item);
        var id = e.item.getAttribute("data-uid");
        e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        var checkValue = getValue(e.fields.isChecked, e.curData);
        if (this.checkedNodes.indexOf(id) > -1) {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === "true") {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
          e.item.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else {
          e.item.setAttribute("aria-checked", "false");
        }
        var frame = select("." + CHECKBOXFRAME, checkboxEle);
        EventHandler.add(frame, "mousedown", this.frameMouseHandler, this);
        EventHandler.add(frame, "mouseup", this.frameMouseHandler, this);
      }
      if (this.fullRowSelect) {
        this.createFullRow(e.item);
      }
      if (this.allowMultiSelection && !e.item.classList.contains(SELECTED2)) {
        e.item.setAttribute("aria-selected", "false");
      }
      var fields = e.fields;
      this.addActionClass(e, fields.selected, SELECTED2);
      this.addActionClass(e, fields.expanded, EXPANDED);
      e.item.setAttribute("tabindex", "-1");
      EventHandler.add(e.item, "focus", this.focusIn, this);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        var textEle = e.item.querySelector("." + LISTTEXT);
        var dataId = e.item.getAttribute("data-uid");
        textEle.innerHTML = "";
        this.renderNodeTemplate(e.curData, textEle, dataId);
      }
      var eventArgs = {
        node: e.item,
        nodeData: e.curData,
        text: e.text
      };
      if (!this.isRefreshed) {
        this.trigger("drawNode", eventArgs);
        if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {
          e.item.classList.add(PREVENTSELECT);
          e.item.firstElementChild.setAttribute("style", "cursor: not-allowed");
        }
      }
    };
    TreeView2.prototype.frameMouseHandler = function(e) {
      var rippleSpan = select("." + CHECKBOXRIPPLE, e.target.parentElement);
      rippleMouseHandler(e, rippleSpan);
    };
    TreeView2.prototype.addActionClass = function(e, action, cssClass2) {
      var data = e.curData;
      var actionValue = getValue(action, data);
      if (!isNullOrUndefined(actionValue) && actionValue.toString() !== "false") {
        e.item.classList.add(cssClass2);
      }
    };
    TreeView2.prototype.getDataType = function(ds, mapper) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (this.isOffline) {
            if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[i])) && !isNullOrUndefined(getValue(mapper.parentID, ds[i]))) {
              return 1;
            }
          } else if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      for (var i = 0, len = ds.length; i < len; i++) {
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, ds[i]))) {
          return 2;
        }
        if (this.isChildObject()) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) {
          return 1;
        }
      }
      return 1;
    };
    TreeView2.prototype.getGroupedData = function(dataSource, groupBy) {
      var cusQuery = new Query().group(groupBy);
      var ds = ListBase.getDataSource(dataSource, cusQuery);
      var grpItem = [];
      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[j].items;
        grpItem.push(itemObj);
      }
      return grpItem;
    };
    TreeView2.prototype.getSortedData = function(list) {
      if (list && this.sortOrder !== "None") {
        list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));
      }
      return list;
    };
    TreeView2.prototype.finalizeNode = function(element) {
      var _this = this;
      var iNodes = selectAll("." + IMAGE, element);
      for (var k = 0; k < iNodes.length; k++) {
        iNodes[k].setAttribute("alt", IMAGE);
      }
      if (this.isLoaded) {
        var sNodes = selectAll("." + SELECTED2, element);
        for (var i = 0; i < sNodes.length; i++) {
          this.selectNode(sNodes[i], null);
          break;
        }
        removeClass(sNodes, SELECTED2);
      }
      var cNodes = selectAll("." + LISTITEM + ":not(." + EXPANDED + ")", element);
      for (var j = 0; j < cNodes.length; j++) {
        var icon = select("div." + ICON2, cNodes[j]);
        if (icon && icon.classList.contains(EXPANDABLE)) {
          this.disableExpandAttr(cNodes[j]);
        }
      }
      var eNodes = selectAll("." + EXPANDED, element);
      if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
        this.isInitalExpand = this.treeData.filter(function(e) {
          return e[_this.fields.expanded] == true;
        }).length > 0 ? true : this.isInitalExpand;
      }
      if (!this.isInitalExpand) {
        for (var i = 0; i < eNodes.length; i++) {
          this.renderChildNodes(eNodes[i]);
        }
      }
      removeClass(eNodes, EXPANDED);
      this.updateList();
      if (this.isLoaded) {
        this.updateCheckedProp();
      }
    };
    TreeView2.prototype.updateCheckedProp = function() {
      if (this.showCheckBox) {
        var nodes = [].concat([], this.checkedNodes);
        this.setProperties({ checkedNodes: nodes }, true);
      }
    };
    TreeView2.prototype.ensureIndeterminate = function() {
      if (this.autoCheck) {
        var liElement = selectAll("li", this.element);
        var ulElement = void 0;
        for (var i = 0; i < liElement.length; i++) {
          if (liElement[i].classList.contains(LISTITEM)) {
            ulElement = select("." + PARENTITEM, liElement[i]);
            if (ulElement) {
              this.ensureParentCheckState(liElement[i]);
            } else {
              this.ensureChildCheckState(liElement[i]);
            }
          }
        }
      } else {
        var indeterminate = selectAll("." + INDETERMINATE, this.element);
        for (var i = 0; i < indeterminate.length; i++) {
          indeterminate[i].classList.remove(INDETERMINATE);
        }
      }
    };
    TreeView2.prototype.ensureParentCheckState = function(element) {
      if (!isNullOrUndefined(element)) {
        if (element.classList.contains(ROOT2)) {
          return;
        }
        var ulElement = element;
        if (element.classList.contains(LISTITEM)) {
          ulElement = select("." + PARENTITEM, element);
        }
        var checkedNodes = selectAll("." + CHECK, ulElement);
        var indeterminateNodes = selectAll("." + INDETERMINATE, ulElement);
        var nodes = selectAll("." + LISTITEM, ulElement);
        var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];
        if (nodes.length === checkedNodes.length) {
          this.changeState(checkBoxEle, "check", null, true, true);
        } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
          this.changeState(checkBoxEle, "indeterminate", null, true, true);
        } else if (checkedNodes.length === 0) {
          this.changeState(checkBoxEle, "uncheck", null, true, true);
        }
        var parentUL = closest(element, "." + PARENTITEM);
        if (!isNullOrUndefined(parentUL)) {
          var currentParent = closest(parentUL, "." + LISTITEM);
          this.ensureParentCheckState(currentParent);
        }
      }
    };
    TreeView2.prototype.ensureChildCheckState = function(element, e) {
      if (!isNullOrUndefined(element)) {
        var childElement = select("." + PARENTITEM, element);
        var checkBoxes = void 0;
        if (!isNullOrUndefined(childElement)) {
          checkBoxes = selectAll("." + CHECKBOXWRAP, childElement);
          var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
          var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);
          var childCheck = childElement.querySelectorAll("li");
          var expandState = childElement.parentElement.getAttribute("aria-expanded");
          var checkedState = void 0;
          for (var index = 0; index < checkBoxes.length; index++) {
            var childId = childCheck[index].getAttribute("data-uid");
            if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {
              checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? "check" : "uncheck";
              if (this.ele !== -1) {
                checkedState = isChecked ? "check" : "uncheck";
              }
              if (checkedState === "uncheck" && (!isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1)) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                checkedState = "indeterminate";
              }
            } else {
              var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
              if (isChecked) {
                checkedState = "check";
              } else if (isNodeChecked && !this.isLoaded) {
                checkedState = "check";
              } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                checkedState = "check";
              } else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else {
                checkedState = "uncheck";
              }
            }
            this.changeState(checkBoxes[index], checkedState, e, true, true);
          }
        }
        if (this.autoCheck && this.isLoaded) {
          this.updateParentCheckState();
        }
      }
    };
    TreeView2.prototype.doCheckBoxAction = function(nodes, doCheck) {
      var li = selectAll("." + LISTITEM, this.element);
      if (!isNullOrUndefined(nodes)) {
        for (var len = nodes.length - 1; len >= 0; len--) {
          var liEle = this.getElement(nodes[len]);
          if (isNullOrUndefined(liEle)) {
            var node = void 0;
            node = nodes[len - (nodes.length - 1)] ? nodes[len - (nodes.length - 1)].toString() : nodes[len] ? nodes[len].toString() : null;
            if (node !== "" && doCheck && node) {
              this.setValidCheckedNode(node);
              this.dynamicCheckState(node, doCheck);
            } else if (this.checkedNodes.indexOf(node) !== -1 && node !== "" && !doCheck) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
              var childItems = this.getChildNodes(this.treeData, node);
              if (childItems) {
                for (var i = 0; i < childItems.length; i++) {
                  var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                    var ele = this.element.querySelector('[data-uid="' + id + '"]');
                    if (ele) {
                      this.changeState(ele, "uncheck", null);
                    }
                  }
                }
                if (this.parentNodeCheck.indexOf(node) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                }
              }
              if (node) {
                this.dynamicCheckState(node, doCheck);
              }
              this.updateField(this.treeData, this.fields, node, "isChecked", null);
            }
            continue;
          }
          var checkBox = select("." + PARENTITEM + " ." + CHECKBOXWRAP, liEle);
          this.validateCheckNode(checkBox, !doCheck, liEle, null);
        }
      } else {
        var checkBoxes = selectAll("." + CHECKBOXWRAP, this.element);
        if (this.loadOnDemand) {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? "check" : "uncheck", null, null, null, doCheck);
          }
        } else {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? "check" : "uncheck");
          }
        }
      }
      if (nodes) {
        for (var j = 0; j < nodes.length - 1; j++) {
          var node = nodes[j] ? nodes[j].toString() : "";
          if (!doCheck) {
            this.updateField(this.treeData, this.fields, node, "isChecked", null);
          }
        }
      }
      if (this.autoCheck) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateFieldChecked = function(checkbox, doCheck) {
      var currLi = closest(checkbox, "." + LISTITEM);
      var id = currLi.getAttribute("data-uid");
      var nodeDetails = this.getNodeData(currLi);
      if (nodeDetails.isChecked === "true" && !doCheck) {
        this.updateField(this.treeData, this.fields, id, "isChecked", null);
      }
    };
    TreeView2.prototype.dynamicCheckState = function(node, doCheck) {
      if (this.dataType === 1) {
        var count = 0;
        var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, "equal", node, true));
        if (resultId[0]) {
          var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
          var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
          var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
          var indeterminate = parentElement ? select("." + INDETERMINATE, parentElement) : null;
          var check = parentElement ? select("." + CHECK, parentElement) : null;
          var element = this.element.querySelector('[data-uid="' + id + '"]');
          var childNodes = this.getChildNodes(this.treeData, parent_1);
          if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
              var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
          }
          if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {
            this.changeState(element, "uncheck", null);
          } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {
            this.changeState(element, "check", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {
            this.changeState(parentElement, "uncheck", null);
          } else if (!element && !parentElement && id === node && this.autoCheck) {
            this.updateIndeterminate(node, doCheck);
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
        var id = void 0;
        var parentElement = void 0;
        var check = void 0;
        for (var i = 0; i < this.treeData.length; i++) {
          id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : "";
          parentElement = this.element.querySelector('[data-uid="' + id + '"]');
          check = parentElement ? select("." + CHECK, parentElement) : null;
          if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
            this.changeState(parentElement, "uncheck", null);
          }
          var subChild = getValue(this.fields.child.toString(), this.treeData[i]);
          if (subChild) {
            this.updateChildIndeterminate(subChild, id, node, doCheck, id);
          }
        }
      }
    };
    TreeView2.prototype.updateIndeterminate = function(node, doCheck) {
      var indeterminateData = this.getTreeData(node);
      var count = 0;
      var parent;
      if (this.dataType === 1) {
        parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
      }
      var childNodes = this.getChildNodes(this.treeData, parent);
      if (childNodes) {
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }
      }
      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
      if (parentElement && doCheck) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
        this.changeState(parentElement, "uncheck", null);
      } else if (!parentElement) {
        if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
        } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
          this.parentNodeCheck.push(parent);
        }
        this.updateIndeterminate(parent, doCheck);
        if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
        }
      }
    };
    TreeView2.prototype.updateChildIndeterminate = function(subChild, parent, node, doCheck, child) {
      var count = 0;
      for (var j = 0; j < subChild.length; j++) {
        var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : "";
        if (this.checkedNodes.indexOf(subId) !== -1) {
          count++;
        }
        var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
        var indeterminate = parentElement ? select("." + INDETERMINATE, parentElement) : null;
        var check = parentElement ? select("." + CHECK, parentElement) : null;
        var element = this.element.querySelector('[data-uid="' + subId + '"]');
        var childElementCheck = element ? select("." + CHECK, element) : null;
        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
          this.changeState(parentElement, "indeterminate", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {
          if (this.autoCheck) {
            this.changeState(parentElement, "uncheck", null);
          } else {
            if (count !== 0) {
              this.changeState(parentElement, "indeterminate", null);
            } else {
              this.changeState(parentElement, "uncheck", null);
            }
          }
        } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {
          this.changeState(element, "uncheck", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
          indeterminate.classList.remove(INDETERMINATE);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {
          this.changeState(parentElement, "uncheck", null);
        } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {
          this.changeState(element, "uncheck", null);
        } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
          var childElement = this.element.querySelector('[data-uid="' + child + '"]');
          if (doCheck && count !== 0) {
            this.changeState(childElement, "indeterminate", null);
          } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
            this.checkedNodes.push(parent);
          } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
          }
          if (this.parentNodeCheck.indexOf(parent) === -1) {
            this.parentNodeCheck.push(parent);
          }
        }
        var innerChild = getValue(this.fields.child.toString(), subChild[j]);
        if (innerChild) {
          this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
        }
      }
    };
    TreeView2.prototype.changeState = function(wrapper, state, e, isPrevent, isAdd, doCheck) {
      var _this = this;
      var eventArgs;
      var currLi = closest(wrapper, "." + LISTITEM);
      if (wrapper === currLi) {
        wrapper = select("." + CHECKBOXWRAP, currLi);
      }
      if (!isPrevent) {
        this.checkActionNodes = [];
        eventArgs = this.getCheckEvent(currLi, state, e);
        this.trigger("nodeChecking", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
          }
        });
      } else {
        this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
      }
    };
    TreeView2.prototype.nodeCheckAction = function(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK)) {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        this.addCheck(currLi);
        ariaState = "true";
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
        removeClass([frameSpan], [CHECK, INDETERMINATE]);
        this.removeCheck(currLi);
        ariaState = "false";
      } else if (state === "indeterminate" && this.autoCheck) {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);
        this.removeCheck(currLi);
        ariaState = "mixed";
      }
      ariaState = state === "check" ? "true" : state === "uncheck" ? "false" : ariaState;
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      if (isAdd) {
        var data = [].concat([], this.checkActionNodes);
        eventArgs = this.getCheckEvent(currLi, state, e);
        if (isUndefined(isPrevent)) {
          eventArgs.data = data;
        }
      }
      if (doCheck !== void 0) {
        this.ensureStateChange(currLi, doCheck);
      }
      if (!isPrevent) {
        if (!isNullOrUndefined(ariaState)) {
          currLi.setAttribute("aria-checked", ariaState);
          eventArgs.data[0].checked = ariaState;
          this.trigger("nodeChecked", eventArgs);
          this.checkActionNodes = [];
        }
      }
    };
    TreeView2.prototype.addCheck = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {
        this.checkedNodes.push(id);
      }
    };
    TreeView2.prototype.removeCheck = function(liEle) {
      var index = this.checkedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.checkedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.getCheckEvent = function(currLi, action, e) {
      this.checkActionNodes.push(this.getNodeData(currLi));
      var nodeData = this.checkActionNodes;
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, data: nodeData };
    };
    TreeView2.prototype.finalize = function() {
      var firstUl = select("." + PARENTITEM, this.element);
      if (!isNullOrUndefined(firstUl)) {
        firstUl.setAttribute("role", treeAriaAttr.treeRole);
        this.setMultiSelect(this.allowMultiSelection);
        var firstNode = select("." + LISTITEM, this.element);
        if (firstNode) {
          firstNode.setAttribute("tabindex", "0");
          this.updateIdAttr(null, firstNode);
        }
        if (this.allowTextWrap) {
          this.updateWrap();
        }
        this.renderReactTemplates();
        this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;
        this.doExpandAction();
      }
    };
    TreeView2.prototype.setTextWrap = function() {
      (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);
      if (Browser.isIE) {
        (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);
      }
    };
    TreeView2.prototype.updateWrap = function(ulEle) {
      if (!this.fullRowSelect) {
        return;
      }
      var liEle = ulEle ? selectAll("." + LISTITEM, ulEle) : this.liList;
      var length = liEle.length;
      for (var i = 0; i < length; i++) {
        this.calculateWrap(liEle[i]);
      }
    };
    TreeView2.prototype.calculateWrap = function(liEle) {
      var element = select("." + FULLROW, liEle);
      if (element && element.nextElementSibling) {
        element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + "px" : "";
      }
    };
    TreeView2.prototype.doExpandAction = function() {
      var _this = this;
      var eUids = this.expandedNodes;
      if (!this.loadOnDemand && this.fields.dataSource instanceof DataManager) {
        this.isInitalExpand = this.treeData.filter(function(e) {
          return e[_this.fields.expanded] == true;
        }).length > 0 ? true : this.isInitalExpand;
      }
      if (this.isInitalExpand && eUids.length > 0) {
        this.setProperties({ expandedNodes: [] }, true);
        if (this.fields.dataSource instanceof DataManager) {
          this.expandGivenNodes(eUids);
        } else {
          for (var i = 0; i < eUids.length; i++) {
            var eNode = select('[data-uid="' + eUids[i] + '"]', this.element);
            if (!isNullOrUndefined(eNode)) {
              var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
              if (!isNullOrUndefined(icon)) {
                this.expandAction(eNode, icon, null);
              }
            } else {
              if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {
                this.expandChildren.push(eUids[i].toString());
              }
              continue;
            }
          }
          this.afterFinalized();
        }
      } else {
        this.afterFinalized();
      }
    };
    TreeView2.prototype.expandGivenNodes = function(arr) {
      var proxy = this;
      this.expandCallback(arr[this.index], function() {
        proxy.index++;
        if (proxy.index < arr.length) {
          proxy.expandGivenNodes(arr);
        } else {
          proxy.afterFinalized();
        }
      });
    };
    TreeView2.prototype.expandCallback = function(eUid, callback) {
      var eNode = select('[data-uid="' + eUid + '"]', this.element);
      if (!isNullOrUndefined(eNode)) {
        var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
        if (!isNullOrUndefined(icon)) {
          this.expandAction(eNode, icon, null, false, callback);
        } else {
          callback();
        }
      } else {
        callback();
      }
    };
    TreeView2.prototype.afterFinalized = function() {
      this.doSelectionAction();
      this.updateCheckedProp();
      this.isAnimate = true;
      this.isInitalExpand = false;
      if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {
        var eventArgs = { data: this.treeData };
        this.trigger("dataBound", eventArgs);
      }
      this.isLoaded = true;
      this.isNodeDropped = false;
    };
    TreeView2.prototype.doSelectionAction = function() {
      var sNodes = selectAll("." + SELECTED2, this.element);
      var sUids = this.selectedNodes;
      if (sUids.length > 0) {
        this.setProperties({ selectedNodes: [] }, true);
        for (var i = 0; i < sUids.length; i++) {
          var sNode = select('[data-uid="' + sUids[i] + '"]', this.element);
          if (sNode && !sNode.classList.contains("e-active")) {
            this.selectNode(sNode, null, true);
          } else {
            this.selectedNodes.push(sUids[i]);
          }
          if (!this.allowMultiSelection) {
            break;
          }
        }
      } else {
        this.selectGivenNodes(sNodes);
      }
      removeClass(sNodes, SELECTED2);
    };
    TreeView2.prototype.selectGivenNodes = function(sNodes) {
      for (var i = 0; i < sNodes.length; i++) {
        if (!sNodes[i].classList.contains("e-disable")) {
          this.selectNode(sNodes[i], null, true);
        }
        if (!this.allowMultiSelection) {
          break;
        }
      }
    };
    TreeView2.prototype.clickHandler = function(event2) {
      var target = Browser.isDevice && !Browser.isIos ? document.elementFromPoint(event2.originalEvent.changedTouches[0].clientX, event2.originalEvent.changedTouches[0].clientY) : event2.originalEvent.target;
      EventHandler.remove(this.element, "contextmenu", this.preventContextMenu);
      if (!target || this.dragStartAction) {
        return;
      } else {
        var classList2 = target.classList;
        var li = closest(target, "." + LISTITEM);
        if (!li || li.classList.contains(PREVENTSELECT) && !(classList2.contains(EXPANDABLE) || classList2.contains(COLLAPSIBLE))) {
          return;
        } else if (event2.originalEvent.which !== 3) {
          var rippleElement = select("." + RIPPLEELMENT, li);
          var rippleIcons = select("." + ICON2, li);
          this.removeHover();
          this.setFocusElement(li);
          if (this.showCheckBox && !li.classList.contains("e-disable")) {
            var checkWrapper = closest(target, "." + CHECKBOXWRAP);
            if (!isNullOrUndefined(checkWrapper)) {
              var checkElement = select("." + CHECKBOXFRAME, checkWrapper);
              this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event2.originalEvent);
              this.triggerClickEvent(event2.originalEvent, li);
              return;
            }
          }
          if (classList2.contains(EXPANDABLE)) {
            this.expandAction(li, target, event2);
          } else if (classList2.contains(COLLAPSIBLE)) {
            this.collapseNode(li, target, event2);
          } else if (rippleElement && rippleIcons) {
            if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {
              this.expandAction(li, rippleIcons, event2);
            } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {
              this.collapseNode(li, rippleIcons, event2);
            } else if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          } else {
            if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event2.originalEvent, false);
            }
          }
        }
        if (event2.originalEvent.which === 3) {
          this.isRightClick = true;
        }
        this.triggerClickEvent(event2.originalEvent, li);
      }
    };
    TreeView2.prototype.nodeCheckedEvent = function(wrapper, isCheck, e) {
      var currLi = closest(wrapper, "." + LISTITEM);
      var eventArgs = this.getCheckEvent(wrapper, isCheck ? "uncheck" : "check", e);
      eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
      this.trigger("nodeChecked", eventArgs);
    };
    TreeView2.prototype.triggerClickEvent = function(e, li) {
      var eventArgs = {
        event: e,
        node: li
      };
      this.trigger("nodeClicked", eventArgs);
    };
    TreeView2.prototype.expandNode = function(currLi, icon, loaded) {
      var _this = this;
      this.renderReactTemplates();
      if (icon.classList.contains(LOAD)) {
        this.hideSpinner(icon);
      }
      if (!this.initialRender) {
        icon.classList.add("interaction");
      }
      if (loaded !== true || loaded === true && currLi.classList.contains("e-expanded")) {
        if (this.preventExpand !== true) {
          removeClass([icon], EXPANDABLE);
          addClass([icon], COLLAPSIBLE);
          var start_1 = 0;
          var end_1 = 0;
          var proxy_1 = this;
          var ul_1 = select("." + PARENTITEM, currLi);
          var liEle_1 = currLi;
          this.setHeight(liEle_1, ul_1);
          var activeElement_1 = select("." + LISTITEM + "." + ACTIVE, currLi);
          if (this.isAnimate && !this.isRefreshed) {
            this.aniObj.animate(ul_1, {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration === 0 && animationMode === "Enable" ? 400 : this.animation.expand.duration,
              timingFunction: this.animation.expand.easing,
              begin: function(args) {
                liEle_1.style.overflow = "hidden";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
                }
                start_1 = liEle_1.offsetHeight;
                end_1 = select("." + TEXTWRAP, currLi).offsetHeight;
              },
              progress: function(args) {
                args.element.style.display = "block";
                proxy_1.animateHeight(args, start_1, end_1);
              },
              end: function(args) {
                args.element.style.display = "block";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
                }
                _this.expandedNode(liEle_1, ul_1, icon);
              }
            });
          } else {
            this.expandedNode(liEle_1, ul_1, icon);
          }
        }
      } else {
        var ul = select("." + PARENTITEM, currLi);
        ul.style.display = "none";
        if (this.fields.dataSource instanceof DataManager === true) {
          this.preventExpand = false;
        }
      }
      if (this.initialRender) {
        icon.classList.add("interaction");
      }
    };
    TreeView2.prototype.expandedNode = function(currLi, ul, icon) {
      ul.style.display = "block";
      currLi.style.display = "block";
      currLi.style.overflow = "";
      currLi.style.height = "";
      removeClass([icon], PROCESS);
      this.addExpand(currLi);
      if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {
        this.updateWrap(currLi);
        this.isFirstRender = false;
      }
      if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, null);
        this.expandArgs.isInteracted = this.isInteracted;
        this.trigger("nodeExpanded", this.expandArgs);
      }
    };
    TreeView2.prototype.addExpand = function(liEle) {
      liEle.setAttribute("aria-expanded", "true");
      removeClass([liEle], NODECOLLAPSED);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {
        this.expandedNodes.push(id);
      }
    };
    TreeView2.prototype.collapseNode = function(currLi, icon, e) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      var colArgs;
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = colArgs.isInteracted;
        this.trigger("nodeCollapsing", colArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeCollapseAction(currLi, icon, observedArgs);
          }
        });
      } else {
        this.nodeCollapseAction(currLi, icon, colArgs);
      }
    };
    TreeView2.prototype.nodeCollapseAction = function(currLi, icon, colArgs) {
      var _this = this;
      removeClass([icon], COLLAPSIBLE);
      addClass([icon], EXPANDABLE);
      var start = 0;
      var end = 0;
      var proxy = this;
      var ul = select("." + PARENTITEM, currLi);
      var liEle = currLi;
      var activeElement = select("." + LISTITEM + "." + ACTIVE, currLi);
      if (this.isAnimate) {
        this.aniObj.animate(ul, {
          name: this.animation.collapse.effect,
          duration: this.animation.collapse.duration === 0 && animationMode === "Enable" ? 400 : this.animation.collapse.duration,
          timingFunction: this.animation.collapse.easing,
          begin: function(args) {
            liEle.style.overflow = "hidden";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
            }
            start = select("." + TEXTWRAP, currLi).offsetHeight;
            end = liEle.offsetHeight;
          },
          progress: function(args) {
            proxy.animateHeight(args, start, end);
          },
          end: function(args) {
            args.element.style.display = "none";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
            }
            _this.collapsedNode(liEle, ul, icon, colArgs);
          }
        });
      } else {
        this.collapsedNode(liEle, ul, icon, colArgs);
      }
    };
    TreeView2.prototype.collapsedNode = function(liEle, ul, icon, colArgs) {
      ul.style.display = "none";
      liEle.style.overflow = "";
      liEle.style.height = "";
      removeClass([icon], PROCESS);
      this.removeExpand(liEle);
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(liEle, null);
        colArgs.isInteracted = this.isInteracted;
        this.trigger("nodeCollapsed", colArgs);
      }
    };
    TreeView2.prototype.removeExpand = function(liEle, toRemove) {
      if (toRemove) {
        liEle.removeAttribute("aria-expanded");
      } else {
        this.disableExpandAttr(liEle);
      }
      var index = this.expandedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.expandedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.disableExpandAttr = function(liEle) {
      liEle.setAttribute("aria-expanded", "false");
      addClass([liEle], NODECOLLAPSED);
    };
    TreeView2.prototype.setHeight = function(currLi, ul) {
      ul.style.display = "block";
      ul.style.visibility = "hidden";
      currLi.style.height = currLi.offsetHeight + "px";
      ul.style.display = "none";
      ul.style.visibility = "";
    };
    TreeView2.prototype.animateHeight = function(args, start, end) {
      var remaining = (args.duration - args.timeStamp) / args.duration;
      var currentHeight = (end - start) * remaining + start;
      args.element.parentElement.style.height = currentHeight + "px";
    };
    TreeView2.prototype.renderChildNodes = function(parentLi, expandChild, callback, loaded) {
      var _this = this;
      var eicon = select("div." + ICON2, parentLi);
      if (isNullOrUndefined(eicon)) {
        return;
      }
      this.showSpinner(eicon);
      var childItems;
      if (this.fields.dataSource instanceof DataManager) {
        var level = this.parents(parentLi, "." + PARENTITEM).length;
        var mapper_2 = this.getChildFields(this.fields, level, 1);
        if (isNullOrUndefined(mapper_2) || isNullOrUndefined(mapper_2.dataSource)) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        }
        this.treeList.push("false");
        if (this.fields.dataSource instanceof DataManager && this.isOffline) {
          this.treeList.pop();
          childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"));
          this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
        } else {
          mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute("data-uid"))).then(function(e) {
            _this.treeList.pop();
            childItems = e.result;
            if (_this.dataType === 1) {
              _this.dataType = 2;
            }
            _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"), false, parseFloat(parentLi.getAttribute("aria-level")) + 1);
        this.currentLoadData = this.getSortedData(childItems);
        if (isNullOrUndefined(childItems) || childItems.length === 0) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        } else {
          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
          parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));
          this.expandNode(parentLi, eicon, loaded);
          this.setSelectionForChildNodes(childItems);
          this.ensureCheckNode(parentLi);
          this.finalizeNode(parentLi);
          this.disableTreeNodes(childItems);
          this.renderSubChild(parentLi, expandChild, loaded);
        }
      }
    };
    TreeView2.prototype.loadChild = function(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
      this.currentLoadData = childItems;
      if (isNullOrUndefined(childItems) || childItems.length === 0) {
        detach(eicon);
        this.removeExpand(parentLi, true);
      } else {
        this.updateListProp(mapper);
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          var id = parentLi.getAttribute("data-uid");
          var nodeData = this.getNodeObject(id);
          setValue("child", childItems, nodeData);
        }
        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
        parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }
      if (callback) {
        callback();
      }
      if (expandChild) {
        this.expandedNodes.push(parentLi.getAttribute("data-uid"));
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.disableTreeNodes = function(childItems) {
      var i = 0;
      while (i < childItems.length) {
        var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
        if (this.disableNode !== void 0 && this.disableNode.indexOf(id) !== -1) {
          this.doDisableAction([id]);
        }
        i++;
      }
    };
    TreeView2.prototype.setSelectionForChildNodes = function(nodes) {
      var i;
      for (i = 0; i < nodes.length; i++) {
        var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;
        if (this.selectedNodes !== void 0 && this.selectedNodes.indexOf(id) !== -1) {
          this.doSelectionAction();
        }
      }
    };
    TreeView2.prototype.ensureCheckNode = function(element) {
      if (this.showCheckBox) {
        this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute("data-uid")) : null;
        if (this.autoCheck) {
          this.ensureChildCheckState(element);
          this.ensureParentCheckState(element);
        }
      }
      this.currentLoadData = null;
    };
    TreeView2.prototype.getFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return mapper;
      } else {
        return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildFields = function(mapper, nodeLevel, dataLevel) {
      var childData;
      if (nodeLevel === dataLevel) {
        return this.getChildMapper(mapper);
      } else {
        return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildMapper = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    TreeView2.prototype.getChildNodes = function(obj, parentId, isRoot, level) {
      var _this = this;
      if (isRoot === void 0) {
        isRoot = false;
      }
      var childNodes;
      if (isNullOrUndefined(obj)) {
        return childNodes;
      } else if (this.dataType === 1) {
        return this.getChildGroup(this.groupedData, parentId, isRoot);
      } else {
        if (typeof this.fields.child === "string") {
          var index = obj.findIndex(function(data) {
            return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
          });
          if (index !== -1) {
            return getValue(this.fields.child, obj[index]);
          }
          if (index === -1) {
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var tempArray = getValue(this.fields.child, obj[i]);
              var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
                return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
              }) : -1;
              if (childIndex !== -1) {
                return getValue(this.fields.child, tempArray[childIndex]);
              } else if (!isNullOrUndefined(tempArray)) {
                childNodes = this.getChildNodes(tempArray, parentId);
                if (childNodes !== void 0) {
                  break;
                }
              }
            }
          }
        } else if (this.isChildObject()) {
          var tempField = !isNullOrUndefined(level) ? this.fields : this.fields.child;
          var i = 1;
          while (i < level) {
            if (!isNullOrUndefined(tempField.child)) {
              tempField = tempField.child;
            } else {
              break;
            }
            i++;
          }
          this.updateListProp(tempField);
          var index = obj.findIndex(function(data) {
            return getValue(_this.fields.id, data) && getValue(_this.fields.id, data).toString() === parentId;
          });
          if (index !== -1) {
            return getValue("child", obj[index]);
          }
          if (index === -1) {
            for (var i_1 = 0, objlen = obj.length; i_1 < objlen; i_1++) {
              var tempArray = getValue("child", obj[i_1]);
              var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
                return getValue(_this.fields.child.id, data) && getValue(_this.fields.child.id, data).toString() === parentId;
              }) : -1;
              if (childIndex !== -1) {
                return getValue("child", tempArray[childIndex]);
              } else if (!isNullOrUndefined(tempArray)) {
                childNodes = this.getChildNodes(tempArray, parentId, false, level);
                if (childNodes !== void 0) {
                  break;
                }
              }
            }
          }
        }
      }
      return childNodes;
    };
    TreeView2.prototype.getChildGroup = function(data, parentId, isRoot) {
      var childNodes;
      if (isNullOrUndefined(data)) {
        return childNodes;
      }
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        if (!isNullOrUndefined(data[i][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) {
          if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {
            return data[i];
          }
        } else if (isRoot) {
          return data[i];
        } else {
          return [];
        }
      }
      return childNodes;
    };
    TreeView2.prototype.renderSubChild = function(element, expandChild, loaded) {
      if (expandChild) {
        var cIcons = selectAll("." + EXPANDABLE, element);
        for (var i = 0, len = cIcons.length; i < len; i++) {
          var icon = cIcons[i];
          if (element.querySelector(".e-icons") !== cIcons[i]) {
            var curLi = closest(icon, "." + LISTITEM);
            this.expandArgs = this.getExpandEvent(curLi, null);
            if (loaded !== true) {
              this.trigger("nodeExpanding", this.expandArgs);
            }
            this.renderChildNodes(curLi, expandChild, null, loaded);
          }
        }
      }
    };
    TreeView2.prototype.toggleSelect = function(li, e, multiSelect) {
      if (!li.classList.contains("e-disable")) {
        if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
          this.unselectNode(li, e);
        } else {
          this.selectNode(li, e, multiSelect);
        }
      }
    };
    TreeView2.prototype.isActive = function(li) {
      return li.classList.contains(ACTIVE) ? true : false;
    };
    TreeView2.prototype.selectNode = function(li, e, multiSelect) {
      var _this = this;
      if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {
        this.setFocusElement(li);
        return;
      }
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {
            _this.nodeSelectAction(li, e, observedArgs, multiSelect);
          }
        });
      } else {
        this.nodeSelectAction(li, e, eventArgs, multiSelect);
      }
    };
    TreeView2.prototype.nodeSelectAction = function(li, e, eventArgs, multiSelect) {
      if (!this.allowMultiSelection || !multiSelect && (!e || e && !(e.ctrlKey || e.metaKey))) {
        this.removeSelectAll();
      }
      if (this.allowMultiSelection && e && e.shiftKey) {
        if (!this.startNode) {
          this.startNode = li;
        }
        var startIndex = this.liList.indexOf(this.startNode);
        var endIndex = this.liList.indexOf(li);
        if (startIndex > endIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex; i <= endIndex; i++) {
          var currNode = this.liList[i];
          if (isVisible(currNode) && !currNode.classList.contains("e-disable")) {
            this.addSelect(currNode);
          }
        }
      } else {
        this.startNode = li;
        this.addSelect(li);
      }
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
        this.isRightClick = false;
      }
      this.isRightClick = false;
    };
    TreeView2.prototype.unselectNode = function(li, e) {
      var _this = this;
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "un-select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeUnselectAction(li, observedArgs);
          }
        });
      } else {
        this.nodeUnselectAction(li, eventArgs);
      }
    };
    TreeView2.prototype.nodeUnselectAction = function(li, eventArgs) {
      this.removeSelect(li);
      this.setFocusElement(li);
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
      }
    };
    TreeView2.prototype.setFocusElement = function(li) {
      if (!isNullOrUndefined(li)) {
        var focusedNode = this.getFocusedNode();
        if (focusedNode) {
          removeClass([focusedNode], FOCUS);
          focusedNode.setAttribute("tabindex", "-1");
        }
        addClass([li], FOCUS);
        li.setAttribute("tabindex", "0");
        EventHandler.add(li, "blur", this.focusOut, this);
        this.updateIdAttr(focusedNode, li);
      }
    };
    TreeView2.prototype.addSelect = function(liEle) {
      liEle.setAttribute("aria-selected", "true");
      addClass([liEle], ACTIVE);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {
        this.selectedNodes.push(id);
      }
    };
    TreeView2.prototype.removeSelect = function(liEle) {
      if (this.allowMultiSelection) {
        liEle.setAttribute("aria-selected", "false");
      } else {
        liEle.removeAttribute("aria-selected");
      }
      removeClass([liEle], ACTIVE);
      var index = this.selectedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.selectedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.removeSelectAll = function() {
      var selectedLI = this.element.querySelectorAll("." + ACTIVE);
      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];
        if (this.allowMultiSelection) {
          ele.setAttribute("aria-selected", "false");
        } else {
          ele.removeAttribute("aria-selected");
        }
      }
      removeClass(selectedLI, ACTIVE);
      this.setProperties({ selectedNodes: [] }, true);
    };
    TreeView2.prototype.getSelectEvent = function(currLi, action, e) {
      var nodeData = this.getNodeData(currLi);
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData };
    };
    TreeView2.prototype.setExpandOnType = function() {
      this.expandOnType = this.expandOn === "Auto" ? Browser.isDevice ? "Click" : "DblClick" : this.expandOn;
    };
    TreeView2.prototype.expandHandler = function(e) {
      var target = e.originalEvent.target;
      if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT2) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON2) || this.showCheckBox && closest(target, "." + CHECKBOXWRAP)) {
        return;
      } else {
        this.expandCollapseAction(closest(target, "." + LISTITEM), e);
      }
    };
    TreeView2.prototype.expandCollapseAction = function(currLi, e) {
      var icon = select("div." + ICON2, currLi);
      if (!icon || icon.classList.contains(PROCESS)) {
        return;
      } else {
        var classList2 = icon.classList;
        if (classList2.contains(EXPANDABLE)) {
          this.expandAction(currLi, icon, e);
        } else if (classList2.contains(COLLAPSIBLE)) {
          this.collapseNode(currLi, icon, e);
        }
      }
    };
    TreeView2.prototype.expandAction = function(currLi, icon, e, expandChild, callback) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      if (this.isLoaded && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = this.expandArgs.isInteracted;
        this.trigger("nodeExpanding", this.expandArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeExpandAction(currLi, icon, expandChild, callback);
          }
        });
      } else {
        this.nodeExpandAction(currLi, icon, expandChild, callback);
      }
    };
    TreeView2.prototype.nodeExpandAction = function(currLi, icon, expandChild, callback) {
      var ul = select("." + PARENTITEM, currLi);
      if (ul && ul.nodeName === "UL") {
        this.expandNode(currLi, icon);
      } else {
        this.isFirstRender = true;
        this.renderChildNodes(currLi, expandChild, callback);
        var liEles = selectAll("." + LISTITEM, currLi);
        for (var i = 0; i < liEles.length; i++) {
          var id = this.getId(liEles[i]);
          if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== void 0) {
            var icon_1 = select("." + EXPANDABLE, select("." + TEXTWRAP, liEles[i]));
            if (!isNullOrUndefined(icon_1)) {
              this.expandAction(liEles[i], icon_1, null);
            }
            this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
          }
        }
      }
    };
    TreeView2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var target = e.target;
      var focusedNode = this.getFocusedNode();
      if (target && target.classList.contains(INPUT)) {
        var inpEle = target;
        if (e.action === "enter") {
          inpEle.blur();
        } else if (e.action === "escape") {
          inpEle.value = this.oldText;
          inpEle.blur();
        }
        return;
      }
      e.preventDefault();
      var eventArgs = {
        cancel: false,
        event: e,
        node: focusedNode
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              if (_this.showCheckBox) {
                _this.checkNode(e);
              } else {
                _this.toggleSelect(focusedNode, e);
              }
              break;
            case "moveRight":
              _this.openNode(_this.enableRtl ? false : true, e);
              break;
            case "moveLeft":
              _this.openNode(_this.enableRtl ? true : false, e);
              break;
            case "shiftDown":
              _this.shiftKeySelect(true, e);
              break;
            case "moveDown":
            case "ctrlDown":
            case "csDown":
              _this.navigateNode(true);
              break;
            case "shiftUp":
              _this.shiftKeySelect(false, e);
              break;
            case "moveUp":
            case "ctrlUp":
            case "csUp":
              _this.navigateNode(false);
              break;
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
              _this.navigateRootNode(true);
              break;
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
              _this.navigateRootNode(false);
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
            case "shiftSpace":
            case "ctrlSpace":
              _this.toggleSelect(focusedNode, e);
              break;
            case "f2":
              if (_this.allowEditing && !focusedNode.classList.contains("e-disable")) {
                _this.createTextbox(focusedNode, e);
              }
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                var sNodes = selectAll("." + LISTITEM + ":not(." + ACTIVE + ")", _this.element);
                _this.selectGivenNodes(sNodes);
              }
              break;
          }
        }
      });
    };
    TreeView2.prototype.navigateToFocus = function(isUp) {
      var focusNode = this.getFocusedNode().querySelector("." + TEXTWRAP);
      var pos = focusNode.getBoundingClientRect();
      var parent = this.getScrollParent(this.element);
      if (!isNullOrUndefined(parent)) {
        var parentPos = parent.getBoundingClientRect();
        if (pos.bottom > parentPos.bottom) {
          parent.scrollTop += pos.bottom - parentPos.bottom;
        } else if (pos.top < parentPos.top) {
          parent.scrollTop -= parentPos.top - pos.top;
        }
      }
      var isVisible2 = this.isVisibleInViewport(focusNode);
      if (!isVisible2) {
        focusNode.scrollIntoView(isUp);
      }
    };
    TreeView2.prototype.isVisibleInViewport = function(txtWrap) {
      var pos = txtWrap.getBoundingClientRect();
      return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
    };
    TreeView2.prototype.getScrollParent = function(node) {
      if (isNullOrUndefined(node)) {
        return null;
      }
      return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
    };
    TreeView2.prototype.shiftKeySelect = function(isTowards, e) {
      if (this.allowMultiSelection) {
        var focusedNode = this.getFocusedNode();
        var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
        this.removeHover();
        this.setFocusElement(nextNode);
        this.toggleSelect(nextNode, e, false);
        this.navigateToFocus(!isTowards);
      } else {
        this.navigateNode(isTowards);
      }
    };
    TreeView2.prototype.checkNode = function(e) {
      var focusedNode = this.getFocusedNode();
      var checkWrap = select("." + CHECKBOXWRAP, focusedNode);
      var isChecked = select(" ." + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);
      if (!focusedNode.classList.contains("e-disable")) {
        if (focusedNode.getElementsByClassName("e-checkbox-disabled").length == 0) {
          this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }
      }
    };
    TreeView2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e) {
      var _this = this;
      var currLi = closest(checkWrap, "." + LISTITEM);
      this.checkActionNodes = [];
      var ariaState = !isCheck ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        currLi.setAttribute("aria-checked", ariaState);
      }
      var eventArgs = this.getCheckEvent(currLi, isCheck ? "uncheck" : "check", e);
      this.trigger("nodeChecking", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
        }
      });
    };
    TreeView2.prototype.nodeCheckingAction = function(checkWrap, isCheck, li, eventArgs, e) {
      if (this.checkedElement.indexOf(li.getAttribute("data-uid")) === -1) {
        this.checkedElement.push(li.getAttribute("data-uid"));
        if (this.autoCheck) {
          var child = this.getChildNodes(this.treeData, li.getAttribute("data-uid"));
          child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;
        }
      }
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true);
      if (this.autoCheck) {
        this.ensureChildCheckState(li);
        this.ensureParentCheckState(closest(closest(li, "." + PARENTITEM), "." + LISTITEM));
        var doCheck = void 0;
        if (eventArgs.action === "check") {
          doCheck = true;
        } else if (eventArgs.action === "uncheck") {
          doCheck = false;
        }
        this.ensureStateChange(li, doCheck);
      }
      this.nodeCheckedEvent(checkWrap, isCheck, e);
    };
    TreeView2.prototype.ensureStateChange = function(li, doCheck) {
      var childElement = select("." + PARENTITEM, li);
      var parentIndex = li.getAttribute("data-uid");
      var mapper = this.fields;
      if (this.dataType === 1 && this.autoCheck) {
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", parentIndex, true));
        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
          var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;
          if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
            this.checkedNodes.push(resultId);
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, resultId, "isChecked", null);
            }
            if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
              var childNodes = this.getChildNodes(this.treeData, resultId);
              this.getChildItems(childNodes, doCheck);
              if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
              }
            }
          } else {
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
          }
        }
      } else if (this.dataType === 1 && !this.autoCheck) {
        if (!doCheck) {
          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < checkedData.length; i++) {
            var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(id) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
            }
            this.updateField(this.treeData, this.fields, id, "isChecked", null);
          }
          this.checkedNodes = [];
        } else {
          for (var i = 0; i < this.treeData.length; i++) {
            var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(checkedId) === -1) {
              this.checkedNodes.push(checkedId);
            }
          }
        }
      } else {
        var childItems = this.getChildNodes(this.treeData, parentIndex);
        if (childItems) {
          this.childStateChange(childItems, parentIndex, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.getChildItems = function(childItems, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
        var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;
        if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
        }
        if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
          this.checkedNodes.push(childId);
        }
        if (childIsCheck === "true" && !doCheck) {
          this.updateField(this.treeData, this.fields, childId, "isChecked", null);
        }
        var subChildItems = this.getChildNodes(this.treeData, childId);
        if (subChildItems.length > 0) {
          this.getChildItems(subChildItems, doCheck);
        }
      }
    };
    TreeView2.prototype.childStateChange = function(childItems, parent, childElement, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : "";
        var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;
        if (this.autoCheck) {
          if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);
            if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
            }
          } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            }
          }
        } else if (!this.autoCheck) {
          if (!doCheck) {
            if (this.checkedNodes.indexOf(checkedChild) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            }
            this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            this.checkedNodes = [];
          } else {
            if (this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
        }
        var subChild = this.getChildNodes([childItems[i]], checkedChild);
        if (subChild) {
          this.childStateChange(subChild, parent, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.allCheckNode = function(child, newCheck, checked, childCheck, validateCheck) {
      if (child) {
        for (var length_1 = 0; length_1 < child.length; length_1++) {
          var childId = getValue(this.fields.id, child[length_1]);
          var check = this.element.querySelector('[data-uid="' + childId + '"]');
          if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
            if (check === null && !isNullOrUndefined(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
              child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;
              childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
            }
          }
          if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {
            newCheck.push(childId.toString());
          }
          var hierChildId = getValue(this.fields.child.toString(), child[length_1]);
          if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {
            var id = getValue(this.fields.id, child[length_1]);
            var childId_1 = void 0;
            if (this.dataType === 1) {
              childId_1 = this.getChildNodes(this.treeData, id.toString());
            } else {
              childId_1 = hierChildId;
            }
            if (childId_1) {
              isNullOrUndefined(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
              childCheck = null;
            }
          }
          childCheck = null;
        }
      }
    };
    TreeView2.prototype.openNode = function(toBeOpened, e) {
      var focusedNode = this.getFocusedNode();
      var icon = select("div." + ICON2, focusedNode);
      if (toBeOpened) {
        if (!icon) {
          return;
        } else if (icon.classList.contains(EXPANDABLE)) {
          this.expandAction(focusedNode, icon, e);
        } else {
          this.focusNextNode(focusedNode, true);
        }
      } else {
        if (icon && icon.classList.contains(COLLAPSIBLE)) {
          this.collapseNode(focusedNode, icon, e);
        } else {
          var parentLi = closest(closest(focusedNode, "." + PARENTITEM), "." + LISTITEM);
          if (!parentLi) {
            return;
          } else {
            if (!parentLi.classList.contains("e-disable")) {
              this.setFocus(focusedNode, parentLi);
              this.navigateToFocus(true);
            }
          }
        }
      }
    };
    TreeView2.prototype.navigateNode = function(isTowards) {
      var focusedNode = this.getFocusedNode();
      this.focusNextNode(focusedNode, isTowards);
    };
    TreeView2.prototype.navigateRootNode = function(isBackwards) {
      var focusedNode = this.getFocusedNode();
      var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
      if (!rootNode.classList.contains("e-disable")) {
        this.setFocus(focusedNode, rootNode);
        this.navigateToFocus(isBackwards);
      }
    };
    TreeView2.prototype.getFocusedNode = function() {
      var selectedItem;
      var fNode = select("." + LISTITEM + '[tabindex="0"]', this.element);
      if (isNullOrUndefined(fNode)) {
        selectedItem = select("." + LISTITEM, this.element);
      }
      return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
    };
    TreeView2.prototype.focusNextNode = function(li, isTowards) {
      var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
      this.setFocus(li, nextNode);
      this.navigateToFocus(!isTowards);
      if (nextNode.classList.contains("e-disable")) {
        var lastChild = nextNode.lastChild;
        if (nextNode.previousSibling == null && nextNode.classList.contains("e-level-1")) {
          this.focusNextNode(nextNode, true);
        } else if (nextNode.nextSibling == null && nextNode.classList.contains("e-node-collapsed")) {
          this.focusNextNode(nextNode, false);
        } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {
          this.focusNextNode(nextNode, false);
        } else {
          this.focusNextNode(nextNode, isTowards);
        }
      }
    };
    TreeView2.prototype.getNextNode = function(li) {
      var index = this.liList.indexOf(li);
      var nextNode;
      do {
        index++;
        nextNode = this.liList[index];
        if (isNullOrUndefined(nextNode)) {
          return li;
        }
      } while (!isVisible(nextNode));
      return nextNode;
    };
    TreeView2.prototype.getPrevNode = function(li) {
      var index = this.liList.indexOf(li);
      var prevNode;
      do {
        index--;
        prevNode = this.liList[index];
        if (isNullOrUndefined(prevNode)) {
          return li;
        }
      } while (!isVisible(prevNode));
      return prevNode;
    };
    TreeView2.prototype.getRootNode = function() {
      var index = 0;
      var rootNode;
      do {
        rootNode = this.liList[index];
        index++;
      } while (!isVisible(rootNode));
      return rootNode;
    };
    TreeView2.prototype.getEndNode = function() {
      var index = this.liList.length - 1;
      var endNode;
      do {
        endNode = this.liList[index];
        index--;
      } while (!isVisible(endNode));
      return endNode;
    };
    TreeView2.prototype.setFocus = function(preNode, nextNode) {
      removeClass([preNode], FOCUS);
      preNode.setAttribute("tabindex", "-1");
      if (!nextNode.classList.contains("e-disable") && !nextNode.classList.contains(PREVENTSELECT)) {
        addClass([nextNode], FOCUS);
        nextNode.setAttribute("tabindex", "0");
        nextNode.focus();
        EventHandler.add(nextNode, "blur", this.focusOut, this);
        this.updateIdAttr(preNode, nextNode);
      }
    };
    TreeView2.prototype.updateIdAttr = function(preNode, nextNode) {
      this.element.removeAttribute("aria-activedescendant");
      if (preNode) {
        preNode.removeAttribute("id");
      }
      nextNode.setAttribute("id", this.element.id + "_active");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
    };
    TreeView2.prototype.focusIn = function() {
      if (!this.mouseDownStatus) {
        var focusedElement = this.getFocusedNode();
        focusedElement.setAttribute("tabindex", "0");
        addClass([focusedElement], FOCUS);
        EventHandler.add(focusedElement, "blur", this.focusOut, this);
      }
      this.mouseDownStatus = false;
    };
    TreeView2.prototype.focusOut = function(event2) {
      var focusedElement = this.getFocusedNode();
      if (event2.target == focusedElement) {
        removeClass([focusedElement], FOCUS);
        EventHandler.remove(focusedElement, "blur", this.focusOut);
      }
    };
    TreeView2.prototype.onMouseOver = function(e) {
      var target = e.target;
      var classList2 = target.classList;
      var currentLi = closest(target, "." + LISTITEM);
      if (!currentLi || classList2.contains(PARENTITEM) || classList2.contains(LISTITEM)) {
        this.removeHover();
        return;
      } else {
        if (currentLi && !currentLi.classList.contains("e-disable")) {
          this.setHover(currentLi);
        }
      }
    };
    TreeView2.prototype.setHover = function(li) {
      if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {
        this.removeHover();
        addClass([li], HOVER);
      }
    };
    ;
    TreeView2.prototype.onMouseLeave = function(e) {
      this.removeHover();
    };
    TreeView2.prototype.removeHover = function() {
      var hoveredNode = selectAll("." + HOVER, this.element);
      if (hoveredNode && hoveredNode.length) {
        removeClass(hoveredNode, HOVER);
      }
    };
    ;
    TreeView2.prototype.getNodeData = function(currLi, fromDS) {
      if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, "." + CONTROL)) && closest(currLi, "." + CONTROL).classList.contains(ROOT2)) {
        var id = currLi.getAttribute("data-uid");
        var text = this.getText(currLi, fromDS);
        var pNode = closest(currLi.parentNode, "." + LISTITEM);
        var pid = pNode ? pNode.getAttribute("data-uid") : null;
        var selected = currLi.classList.contains(ACTIVE);
        var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;
        var expanded = currLi.getAttribute("aria-expanded") === "true" ? true : false;
        var hasChildren = currLi.getAttribute("aria-expanded") !== null ? true : (select("." + EXPANDABLE, currLi) || select("." + COLLAPSIBLE, currLi)) != null ? true : false;
        var checked = null;
        var checkboxElement = select("." + CHECKBOXWRAP, currLi);
        if (this.showCheckBox && checkboxElement) {
          checked = currLi.getAttribute("aria-checked");
        }
        return {
          id,
          text,
          parentID: pid,
          selected,
          selectable,
          expanded,
          isChecked: checked,
          hasChildren
        };
      }
      return { id: "", text: "", parentID: "", selected: false, expanded: false, isChecked: "", hasChildren: false };
    };
    TreeView2.prototype.getText = function(currLi, fromDS) {
      if (fromDS) {
        var nodeData = this.getNodeObject(currLi.getAttribute("data-uid"));
        var level = parseFloat(currLi.getAttribute("aria-level"));
        var nodeFields = this.getFields(this.fields, level, 1);
        return getValue(nodeFields.text, nodeData);
      }
      return select("." + LISTTEXT, currLi).textContent;
    };
    TreeView2.prototype.getExpandEvent = function(currLi, e) {
      var nodeData = this.getNodeData(currLi);
      return { cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData, event: e };
    };
    TreeView2.prototype.renderNodeTemplate = function(data, textEle, dataId) {
      var tempArr = this.nodeTemplateFn(data, this, "nodeTemplate" + dataId, this.element.id + "nodeTemplate", this.isStringTemplate, void 0, textEle, this.root);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, textEle);
      }
    };
    TreeView2.prototype.destroyTemplate = function(liEle) {
      this.clearTemplate(["nodeTemplate" + liEle.getAttribute("data-uid")]);
    };
    TreeView2.prototype.reRenderNodes = function() {
      this.updateListProp(this.fields);
      if (Browser.isIE) {
        this.ulElement = this.element.querySelector(".e-list-parent.e-ul");
        this.ulElement.parentElement.removeChild(this.ulElement);
      } else {
        this.element.innerHTML = "";
      }
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.clearTemplate();
      }
      this.setTouchClass();
      this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);
      this.checkedElement = [];
      this.isLoaded = false;
      this.setDataBinding(true);
    };
    TreeView2.prototype.setCssClass = function(oldClass, newClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass([this.element], oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass([this.element], newClass.split(" "));
      }
    };
    TreeView2.prototype.editingHandler = function(e) {
      var target = e.target;
      if (!target || target.classList.contains(ROOT2) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON2) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
        return;
      } else {
        var liEle = closest(target, "." + LISTITEM);
        this.createTextbox(liEle, e);
      }
    };
    TreeView2.prototype.createTextbox = function(liEle, e) {
      var _this = this;
      var oldInpEle = select("." + TREEINPUT, this.element);
      if (oldInpEle) {
        oldInpEle.blur();
      }
      var textEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var innerEle = this.createElement("input", { className: TREEINPUT, attrs: { value: this.oldText } });
      var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var inpWidth = textEle.offsetWidth + 5;
          var style_1 = "width:" + inpWidth + "px";
          addClass([liEle], EDITING);
          if (!isNullOrUndefined(_this.nodeTemplateFn)) {
            _this.destroyTemplate(liEle);
          }
          if (_this.isReact) {
            setTimeout(function() {
              _this.renderTextBox(eventArgs, textEle, style_1);
            }, 5);
          } else {
            _this.renderTextBox(eventArgs, textEle, style_1);
          }
        }
      });
    };
    TreeView2.prototype.renderTextBox = function(eventArgs, textEle, style) {
      textEle.innerHTML = eventArgs.innerHtml;
      var inpEle = select("." + TREEINPUT, textEle);
      this.inputObj = Input.createInput({
        element: inpEle,
        properties: {
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputObj.container.setAttribute("style", style);
      inpEle.focus();
      var inputEle = inpEle;
      inputEle.setSelectionRange(0, inputEle.value.length);
      this.wireInputEvents(inpEle);
    };
    TreeView2.prototype.updateOldText = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      this.editData = this.getNodeObject(id);
      var level = parseFloat(liEle.getAttribute("aria-level"));
      this.editFields = this.getFields(this.fields, level, 1);
      this.oldText = getValue(this.editFields.text, this.editData);
    };
    TreeView2.prototype.inputFocusOut = function(e) {
      if (!select("." + TREEINPUT, this.element)) {
        return;
      }
      var target = e.target;
      var newText = target.value;
      var txtEle = closest(target, "." + LISTTEXT);
      var liEle = closest(target, "." + LISTITEM);
      detach(this.inputObj.container);
      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
        this.crudOperation("update", null, liEle, newText, null, null, true);
      } else {
        this.appendNewText(liEle, txtEle, newText, true);
      }
    };
    TreeView2.prototype.appendNewText = function(liEle, txtEle, newText, isInput) {
      var _this = this;
      var eventArgs = this.getEditEvent(liEle, newText, null);
      this.trigger("nodeEdited", eventArgs, function(observedArgs) {
        newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;
        _this.updateText(liEle, txtEle, newText, isInput);
        if (observedArgs.oldText !== newText) {
          _this.triggerEvent("nodeEdited", [_this.getNode(liEle)]);
        }
      });
    };
    TreeView2.prototype.updateText = function(liEle, txtEle, newText, isInput) {
      var newData = setValue(this.editFields.text, newText, this.editData);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        txtEle.innerText = "";
        var dataId = liEle.getAttribute("data-uid");
        this.renderNodeTemplate(newData, txtEle, dataId);
        this.renderReactTemplates();
      } else {
        this.enableHtmlSanitizer ? txtEle.innerText = SanitizeHtmlHelper.sanitize(newText) : txtEle.innerHTML = newText;
      }
      if (isInput) {
        removeClass([liEle], EDITING);
        liEle.focus();
        EventHandler.add(liEle, "blur", this.focusOut, this);
        addClass([liEle], FOCUS);
      }
      if (this.allowTextWrap) {
        this.calculateWrap(liEle);
      }
    };
    TreeView2.prototype.getElement = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return this.element.querySelector('[data-uid="' + ele + '"]');
      } else if (typeof ele === "object") {
        return getElement(ele);
      } else {
        return null;
      }
    };
    TreeView2.prototype.getId = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return ele;
      } else if (typeof ele === "object") {
        return getElement(ele).getAttribute("data-uid");
      } else {
        return null;
      }
    };
    TreeView2.prototype.getEditEvent = function(liEle, newText, inpEle) {
      var data = this.getNodeData(liEle);
      return { cancel: false, newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };
    };
    TreeView2.prototype.getNodeObject = function(id) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return childNodes;
      } else if (this.dataType === 1) {
        for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
          var dataId = getValue(this.fields.id, this.treeData[i]);
          if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeData[i];
          }
        }
      } else {
        return this.getChildNodeObject(this.treeData, this.fields, id);
      }
      return childNodes;
    };
    TreeView2.prototype.getChildNodeObject = function(obj, mapper, id) {
      var newList;
      if (isNullOrUndefined(obj)) {
        return newList;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataId = getValue(mapper.id, obj[i]);
        if (obj[i] && dataId && dataId.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childData = getValue(mapper.child, obj[i]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.isChildObject()) {
          var children = "child";
          var childData = getValue(children, obj[i]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        }
      }
      return newList;
    };
    TreeView2.prototype.setDragAndDrop = function(toBind) {
      if (toBind && !this.disabled) {
        this.initializeDrag();
      } else {
        this.destroyDrag();
      }
    };
    TreeView2.prototype.initializeDrag = function() {
      var _this = this;
      var virtualEle;
      var proxy = this;
      this.dragObj = new Draggable(this.element, {
        enableTailMode: true,
        enableAutoScroll: true,
        dragArea: this.dragArea,
        dragTarget: "." + TEXTWRAP,
        enableTapHold: true,
        tapHoldThreshold: 100,
        helper: function(e) {
          _this.dragTarget = e.sender.target;
          var dragRoot = closest(_this.dragTarget, "." + ROOT2);
          var dragWrap = closest(_this.dragTarget, "." + TEXTWRAP);
          _this.dragLi = closest(_this.dragTarget, "." + LISTITEM);
          if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
            dragWrap = _this.dragTarget.nextElementSibling;
          }
          if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT2) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains("e-disable")) {
            return false;
          }
          var cloneEle = dragWrap.cloneNode(true);
          if (isNullOrUndefined(select("div." + ICON2, cloneEle))) {
            var icon = proxy.createElement("div", { className: ICON2 + " " + EXPANDABLE });
            cloneEle.insertBefore(icon, cloneEle.children[0]);
          }
          var cssClass2 = DRAGITEM + " " + ROOT2 + " " + _this.cssClass + " " + (_this.enableRtl ? RTL4 : "");
          virtualEle = proxy.createElement("div", { className: cssClass2 });
          virtualEle.appendChild(cloneEle);
          var nLen = _this.selectedNodes.length;
          if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {
            var cNode = proxy.createElement("span", { className: DROPCOUNT, innerHTML: "" + nLen });
            virtualEle.appendChild(cNode);
          }
          document.body.appendChild(virtualEle);
          document.body.style.cursor = "";
          _this.dragData = _this.getNodeData(_this.dragLi);
          return virtualEle;
        },
        dragStart: function(e) {
          addClass([_this.element], DRAGGING);
          var listItem = closest(e.target, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);
          if (eventArgs.draggedNode.classList.contains(EDITING)) {
            _this.dragObj.intDestroy(e.event);
            _this.dragCancelAction(virtualEle);
          } else {
            _this.trigger("nodeDragStart", eventArgs, function(observedArgs) {
              if (observedArgs.cancel) {
                _this.dragObj.intDestroy(e.event);
                _this.dragCancelAction(virtualEle);
              } else {
                _this.dragStartAction = true;
              }
            });
          }
        },
        drag: function(e) {
          _this.dragObj.setProperties({ cursorAt: { top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20 } });
          _this.dragAction(e, virtualEle);
        },
        dragStop: function(e) {
          removeClass([_this.element], DRAGGING);
          _this.removeVirtualEle();
          var dropTarget = e.target;
          var preventTargetExpand = false;
          var dropRoot = closest(dropTarget, "." + DROPPABLE);
          var isHelperElement = true;
          if (!dropTarget || !dropRoot) {
            detach(e.helper);
            document.body.style.cursor = "";
            isHelperElement = false;
          }
          var listItem = closest(dropTarget, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);
          eventArgs.preventTargetExpand = preventTargetExpand;
          _this.trigger("nodeDragStop", eventArgs, function(observedArgs) {
            _this.dragParent = observedArgs.draggedParentNode;
            _this.preventExpand = observedArgs.preventTargetExpand;
            if (observedArgs.cancel) {
              if (e.helper.parentNode) {
                detach(e.helper);
              }
              document.body.style.cursor = "";
              isHelperElement = false;
            }
            _this.dragStartAction = false;
          });
        }
      });
      this.dropObj = new Droppable(this.element, {
        out: function(e) {
          if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING) && (_this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT2))) {
            document.body.style.cursor = "not-allowed";
          }
        },
        over: function(e) {
          document.body.style.cursor = "";
        },
        drop: function(e) {
          _this.dropAction(e);
        }
      });
    };
    TreeView2.prototype.dragCancelAction = function(virtualEle) {
      detach(virtualEle);
      removeClass([this.element], DRAGGING);
      this.dragStartAction = false;
    };
    TreeView2.prototype.dragAction = function(e, virtualEle) {
      var dropRoot = closest(e.target, "." + DROPPABLE);
      var dropWrap = closest(e.target, "." + TEXTWRAP);
      var icon = select("div." + ICON2, virtualEle);
      removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
      this.removeVirtualEle();
      document.body.style.cursor = "";
      var classList2 = e.target.classList;
      if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList2) && classList2.contains(FULLROW)) {
        dropWrap = e.target.nextElementSibling;
      }
      if (dropRoot) {
        var dropLi = closest(e.target, "." + LISTITEM);
        var checkWrapper = closest(e.target, "." + CHECKBOXWRAP);
        var collapse = closest(e.target, "." + COLLAPSIBLE);
        var expand = closest(e.target, "." + EXPANDABLE);
        if (!dropRoot.classList.contains(ROOT2) || dropWrap && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          if (this.hasTemplate && dropLi) {
            var templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
            if (e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
            }
          } else {
            if (dropLi && e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10) && !checkWrapper || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
            }
          }
        } else if (e.target.nodeName === "LI" && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          addClass([icon], DROPNEXT);
          this.renderVirtualEle(e);
        } else if (e.target.classList.contains(SIBLING)) {
          addClass([icon], DROPNEXT);
        } else {
          addClass([icon], DROPOUT);
        }
      } else {
        addClass([icon], NODROP);
        document.body.style.cursor = "not-allowed";
      }
      var listItem = closest(e.target, ".e-list-item");
      var level;
      if (listItem) {
        level = parseInt(listItem.getAttribute("aria-level"), 10);
      }
      var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);
      if (eventArgs.dropIndicator) {
        removeClass([icon], eventArgs.dropIndicator);
      }
      this.trigger("nodeDragging", eventArgs);
      if (eventArgs.dropIndicator) {
        addClass([icon], eventArgs.dropIndicator);
      }
    };
    TreeView2.prototype.appendIndicator = function(dropLi, icon, index) {
      addClass([icon], DROPNEXT);
      var virEle = this.createElement("div", { className: SIBLING });
      dropLi.insertBefore(virEle, dropLi.children[index]);
    };
    TreeView2.prototype.dropAction = function(e) {
      var offsetY = e.event.offsetY;
      var dropTarget = e.target;
      var dragObj;
      var level;
      var drop = false;
      var dragInstance;
      var nodeData = [];
      var liArray = [];
      dragInstance = e.dragData.draggable;
      for (var i_2 = 0; i_2 < dragInstance.ej2_instances.length; i_2++) {
        if (dragInstance.ej2_instances[i_2] instanceof TreeView_1) {
          dragObj = dragInstance.ej2_instances[i_2];
          break;
        }
      }
      if (dragObj && dragObj.dragTarget) {
        var dragTarget = dragObj.dragTarget;
        var dragLi = closest(dragTarget, "." + LISTITEM);
        var dropLi = closest(dropTarget, "." + LISTITEM);
        liArray.push(dragLi);
        if (dropLi == null && dropTarget.classList.contains(ROOT2)) {
          dropLi = dropTarget.firstElementChild;
        }
        detach(e.droppedElement);
        document.body.style.cursor = "";
        if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          if (this.fields.dataSource instanceof DataManager === false) {
            this.preventExpand = false;
          }
          return;
        }
        if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {
          var sNodes = selectAll("." + ACTIVE, dragObj.element);
          liArray = sNodes;
          if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
            for (var i_3 = sNodes.length - 1; i_3 >= 0; i_3--) {
              if (dropLi.isSameNode(sNodes[i_3]) || this.isDescendant(sNodes[i_3], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[i_3], dropLi, e, dragObj, offsetY);
            }
          } else {
            for (var i_4 = 0; i_4 < sNodes.length; i_4++) {
              if (dropLi.isSameNode(sNodes[i_4]) || this.isDescendant(sNodes[i_4], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[i_4], dropLi, e, dragObj, offsetY);
            }
          }
        } else {
          this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
        }
        level = parseInt(dragLi.getAttribute("aria-level"), 10);
        drop = true;
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      for (var i = 0; i < liArray.length; i++) {
        nodeData.push(this.getNode(liArray[i]));
      }
      this.trigger("nodeDropped", this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
      if (dragObj.element.id !== this.element.id) {
        dragObj.triggerEvent("nodeDropped", nodeData);
        this.isNodeDropped = true;
        this.fields.dataSource = this.treeData;
      }
      this.triggerEvent("nodeDropped", nodeData);
    };
    TreeView2.prototype.appendNode = function(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
      var checkWrapper = closest(dropTarget, "." + CHECKBOXWRAP);
      var collapse = closest(e.target, "." + COLLAPSIBLE);
      var expand = closest(e.target, "." + EXPANDABLE);
      if (!dragLi.classList.contains("e-disable") && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
        if (dropTarget.nodeName === "LI") {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT2)) {
          if (dropTarget.firstElementChild.nodeName === "UL") {
            this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
          }
        } else if (dropTarget.classList.contains("e-icon-collapsible") || dropTarget.classList.contains("e-icon-expandable")) {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else {
          this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
        }
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);
      }
      if (this.showCheckBox) {
        this.ensureIndeterminate();
      }
    };
    TreeView2.prototype.dropAsSiblingNode = function(dragLi, dropLi, e, dragObj) {
      var dropUl = closest(dropLi, "." + PARENTITEM);
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var pre;
      if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      } else if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        if (e.event.offsetY < 5 || e.event.offsetX < 3) {
          pre = true;
        } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
          pre = false;
        }
      }
      if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        var target = e.target.closest("li");
        dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
      } else {
        dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
      }
      this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.dropAsChildNode = function(dragLi, dropLi, dragObj, index, e, pos, isCheck) {
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var dropParentUl = closest(dropLi, "." + PARENTITEM);
      var templateTarget;
      if (e && e.target) {
        templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
      }
      if (e && pos < 7 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi);
        this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
      } else if (e && (e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10) && !isCheck && !this.hasTemplate) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else {
        var dropUl = this.expandParent(dropLi);
        var childLi = dropUl.childNodes[index];
        dropUl.insertBefore(dragLi, childLi);
        this.moveData(dragLi, childLi, dropUl, true, dragObj);
      }
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.moveData = function(dragLi, dropLi, dropUl, pre, dragObj) {
      var dropParentLi = closest(dropUl, "." + LISTITEM);
      var id = this.getId(dragLi);
      var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
      var refId = this.getId(dropLi);
      var index = this.getDataPos(this.treeData, this.fields, refId);
      var parentId = this.getId(dropParentLi);
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", true);
        var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;
        if (isNullOrUndefined(parentId) && !this.hasPid) {
          delete removedData[0][this.fields.parentID];
        } else {
          var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
          setValue(this.fields.parentID, currPid, removedData[0]);
        }
        this.treeData.splice(pos, 0, removedData[0]);
        if (dragObj.element.id !== this.element.id) {
          var childData = dragObj.removeChildNodes(id);
          pos++;
          for (var i = 0, len = childData.length; i < len; i++) {
            this.treeData.splice(pos, 0, childData[i]);
            pos++;
          }
          dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
      }
    };
    TreeView2.prototype.expandParent = function(dropLi) {
      var dropIcon = select("div." + ICON2, dropLi);
      if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
        this.expandAction(dropLi, dropIcon, null);
      }
      var dropUl = select("." + PARENTITEM, dropLi);
      if (this.preventExpand === true && !dropUl && dropIcon) {
        this.renderChildNodes(dropLi);
      }
      dropUl = select("." + PARENTITEM, dropLi);
      if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {
        dropUl.style.display = "none";
      }
      if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {
        dropUl.style.display = "block";
      }
      if (isNullOrUndefined(dropUl) && this.preventExpand === true) {
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        var icon = select("div." + ICON2, dropLi);
        if (icon) {
          icon.classList.add("e-icon-expandable");
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        if (icon) {
          removeClass([icon], COLLAPSIBLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        dropLi.setAttribute("aria-expanded", "false");
        dropUl.style.display = "none";
      }
      if (isNullOrUndefined(dropUl)) {
        var args = this.expandArgs;
        if (isNullOrUndefined(args) || args.name != "nodeExpanding") {
          this.trigger("nodeExpanding", this.getExpandEvent(dropLi, null));
        }
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        }
        var icon = select("div." + ICON2, dropLi);
        if (icon) {
          removeClass([icon], EXPANDABLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
          icon = select("div." + ICON2, dropLi);
          removeClass([icon], EXPANDABLE);
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        this.addExpand(dropLi);
        this.trigger("nodeExpanded", this.getExpandEvent(dropLi, null));
      }
      return dropUl;
    };
    TreeView2.prototype.updateElement = function(dragParentUl, dragParentLi) {
      if (dragParentLi && dragParentUl.childElementCount === 0) {
        var dragIcon = select("div." + ICON2, dragParentLi);
        detach(dragParentUl);
        detach(dragIcon);
        var parentId = this.getId(dragParentLi);
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", false);
        this.removeExpand(dragParentLi, true);
      }
    };
    TreeView2.prototype.updateAriaLevel = function(dragLi) {
      var level = this.parents(dragLi, "." + PARENTITEM).length;
      dragLi.setAttribute("aria-level", "" + level);
      this.updateChildAriaLevel(select("." + PARENTITEM, dragLi), level + 1);
    };
    TreeView2.prototype.updateChildAriaLevel = function(element, level) {
      if (!isNullOrUndefined(element)) {
        var cNodes = element.childNodes;
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          liEle.setAttribute("aria-level", "" + level);
          this.updateChildAriaLevel(select("." + PARENTITEM, liEle), level + 1);
        }
      }
    };
    TreeView2.prototype.renderVirtualEle = function(e) {
      var pre;
      if (e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      }
      var virEle = this.createElement("div", { className: SIBLING });
      var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
      e.target.insertBefore(virEle, e.target.children[index]);
    };
    TreeView2.prototype.removeVirtualEle = function() {
      var sibEle = select("." + SIBLING);
      if (sibEle) {
        detach(sibEle);
      }
    };
    TreeView2.prototype.destroyDrag = function() {
      if (this.dragObj && this.dropObj) {
        this.dragObj.destroy();
        this.dropObj.destroy();
      }
    };
    TreeView2.prototype.getDragEvent = function(event2, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
      var dropLi = dropTarget ? closest(dropTarget, "." + LISTITEM) : null;
      var dropData = dropLi ? this.getNodeData(dropLi) : null;
      var draggedNode = obj ? obj.dragLi : dragNode;
      var draggedNodeData = obj ? obj.dragData : null;
      var newParent = dropTarget ? this.parents(dropTarget, "." + LISTITEM) : null;
      var dragLiParent = obj.dragLi.parentElement;
      var dragParent = obj.dragLi ? closest(dragLiParent, "." + LISTITEM) : null;
      var targetParent = null;
      var indexValue = null;
      var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
      var iconClass = null;
      var node = drop === true ? draggedNode : dropLi;
      var index = node ? closest(node, ".e-list-parent") : null;
      var i = 0;
      var position = null;
      dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, "." + ROOT2) : dragParent;
      dragParent = drop === true ? this.dragParent : dragParent;
      if (cloneEle) {
        while (i < 4) {
          if (select("." + ICON2, cloneEle).classList.contains(iconCss[i])) {
            iconClass = iconCss[i];
            break;
          }
          i++;
        }
      }
      if (index) {
        var dropTar = 0;
        for (i = 0; i < index.childElementCount; i++) {
          dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;
          if (drop !== true && index.children[i].classList.contains("e-hover")) {
            indexValue = event2.offsetY >= 23 ? i + 1 : i;
            break;
          } else if (index.children[i] === node) {
            indexValue = event2.offsetY >= 23 ? i : i;
            break;
          }
        }
        indexValue = dropTar !== 0 ? --indexValue : indexValue;
        position = iconClass == "e-drop-in" ? "Inside" : event2.offsetY < 7 ? "Before" : "After";
      }
      if (dropTarget) {
        if (newParent.length === 0) {
          targetParent = null;
        } else if (dropTarget.classList.contains(LISTITEM)) {
          targetParent = newParent[0];
        } else {
          targetParent = newParent[1];
        }
      }
      if (dropLi === draggedNode) {
        targetParent = dropLi;
      }
      if (dropTarget && target.offsetHeight <= 33 && event2.offsetY < target.offsetHeight - 10 && event2.offsetY > 6) {
        targetParent = dropLi;
        if (drop !== true) {
          level = ++level;
          var parent_2 = targetParent ? select(".e-list-parent", targetParent) : null;
          indexValue = parent_2 ? parent_2.children.length : 0;
          if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {
            var parent_3 = targetParent.hasAttribute("data-uid") ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute("data-uid").toString()) : null;
            indexValue = parent_3 ? parent_3.length : 0;
          }
        }
      }
      return {
        cancel: false,
        clonedNode: cloneEle,
        event: event2,
        draggedNode,
        draggedNodeData,
        droppedNode: dropLi,
        droppedNodeData: dropData,
        dropIndex: indexValue,
        dropLevel: level,
        draggedParentNode: dragParent,
        dropTarget: targetParent,
        dropIndicator: iconClass,
        target,
        position
      };
    };
    TreeView2.prototype.addFullRow = function(toAdd) {
      var len = this.liList.length;
      if (toAdd) {
        for (var i = 0; i < len; i++) {
          this.createFullRow(this.liList[i]);
        }
      } else {
        for (var i = 0; i < len; i++) {
          var rowDiv = select("." + FULLROW, this.liList[i]);
          detach(rowDiv);
        }
      }
    };
    TreeView2.prototype.createFullRow = function(item) {
      var rowDiv = this.createElement("div", { className: FULLROW });
      item.insertBefore(rowDiv, item.childNodes[0]);
    };
    TreeView2.prototype.addMultiSelect = function(toAdd) {
      if (toAdd) {
        var liEles = selectAll("." + LISTITEM + ':not([aria-selected="true"])', this.element);
        for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
          var ele = liEles_1[_i];
          ele.setAttribute("aria-selected", "false");
        }
      } else {
        var liEles = selectAll("." + LISTITEM + '[aria-selected="false"]', this.element);
        for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
          var ele = liEles_2[_a];
          ele.removeAttribute("aria-selected");
        }
      }
    };
    TreeView2.prototype.collapseByLevel = function(element, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element)) {
        var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          var icon = select("." + COLLAPSIBLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.collapseNode(liEle, icon, null);
          }
          this.collapseByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.collapseAllNodes = function(excludeHiddenNodes) {
      var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + COLLAPSIBLE, this.element));
      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[i];
        var liEle = closest(icon, "." + LISTITEM);
        this.collapseNode(liEle, icon, null);
      }
    };
    TreeView2.prototype.expandByLevel = function(element, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element)) {
        var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
        for (var i = 0, len = eNodes.length; i < len; i++) {
          var liEle = eNodes[i];
          var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.expandAction(liEle, icon, null);
          }
          this.expandByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.expandAllNodes = function(excludeHiddenNodes) {
      var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + EXPANDABLE, this.element));
      for (var i = 0, len = eIcons.length; i < len; i++) {
        var icon = eIcons[i];
        var liEle = closest(icon, "." + LISTITEM);
        this.expandAction(liEle, icon, null, true);
      }
    };
    TreeView2.prototype.getVisibleNodes = function(excludeHiddenNodes, nodes) {
      var vNodes = Array.prototype.slice.call(nodes);
      if (excludeHiddenNodes) {
        for (var i = 0; i < vNodes.length; i++) {
          if (!isVisible(vNodes[i])) {
            vNodes.splice(i, 1);
            i--;
          }
        }
      }
      return vNodes;
    };
    TreeView2.prototype.removeNode = function(node) {
      var dragParentUl = closest(node, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.destroyTemplate(node);
      }
      detach(node);
      this.updateElement(dragParentUl, dragParentLi);
      this.removeData(node);
    };
    TreeView2.prototype.updateInstance = function() {
      this.updateList();
      this.updateSelectedNodes();
      this.updateExpandedNodes();
    };
    TreeView2.prototype.updateList = function() {
      this.liList = Array.prototype.slice.call(selectAll("." + LISTITEM, this.element));
    };
    TreeView2.prototype.updateSelectedNodes = function() {
      this.setProperties({ selectedNodes: [] }, true);
      var sNodes = selectAll("." + ACTIVE, this.element);
      this.selectGivenNodes(sNodes);
    };
    TreeView2.prototype.updateExpandedNodes = function() {
      this.setProperties({ expandedNodes: [] }, true);
      var eNodes = selectAll('[aria-expanded="true"]', this.element);
      for (var i = 0, len = eNodes.length; i < len; i++) {
        this.addExpand(eNodes[i]);
      }
    };
    TreeView2.prototype.removeData = function(node) {
      if (this.dataType === 1) {
        var dm = new DataManager(this.treeData);
        var id = this.getId(node);
        var data = {};
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = newId;
        dm.remove(this.fields.id, data);
        this.removeChildNodes(id);
      } else {
        var id = this.getId(node);
        this.updateChildField(this.treeData, this.fields, id, null, null, true);
      }
    };
    TreeView2.prototype.removeChildNodes = function(parentId) {
      var cNodes = this.getChildGroup(this.groupedData, parentId, false);
      var childData = [];
      if (cNodes) {
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var dm = new DataManager(this.treeData);
          var id = getValue(this.fields.id, cNodes[i]).toString();
          var data = {};
          var currId = this.isNumberTypeId ? parseFloat(id) : id;
          data[this.fields.id] = currId;
          var nodeData = dm.remove(this.fields.id, data);
          childData.push(nodeData[0]);
          this.removeChildNodes(id);
        }
      }
      return childData;
    };
    TreeView2.prototype.doGivenAction = function(nodes, selector, toExpand) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[i]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var icon = select("." + selector, select("." + TEXTWRAP, liEle));
        if (!isNullOrUndefined(icon)) {
          toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
        }
      }
    };
    TreeView2.prototype.addGivenNodes = function(nodes, dropLi, index, isRemote, dropEle) {
      if (nodes.length === 0) {
        return;
      }
      var sNodes = this.getSortedData(nodes);
      var level = dropLi ? parseFloat(dropLi.getAttribute("aria-level")) + 1 : 1;
      if (isRemote) {
        this.updateMapper(level);
      }
      var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);
      var id = this.getId(dropLi);
      var refNode;
      var dropIcon1;
      if (!isNullOrUndefined(dropLi)) {
        dropIcon1 = select("div." + ICON2, dropLi);
      }
      if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
        this.preventExpand = true;
      }
      if (this.dataType !== 1) {
        this.addChildData(this.treeData, this.fields, id, nodes, index);
        this.isFirstRender = false;
      }
      var dropUl;
      if (!dropEle) {
        dropUl = dropLi ? this.expandParent(dropLi) : select("." + PARENTITEM, this.element);
      } else {
        dropUl = dropEle;
      }
      refNode = dropUl.childNodes[index];
      if (!this.isFirstRender || this.dataType === 1) {
        var args = this.expandArgs;
        if (refNode || this.sortOrder === "None") {
          for (var i = 0; i < li.length; i++) {
            dropUl.insertBefore(li[i], refNode);
          }
          if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
            this.preventExpand = false;
            var dropIcon = select("div." + ICON2, dropLi);
            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name != "nodeExpanding")) {
              this.expandAction(dropLi, dropIcon, null);
            }
          }
        }
        if (!refNode && (this.sortOrder === "Ascending" || this.sortOrder === "Descending")) {
          if (dropUl.childNodes.length === 0) {
            for (var i = 0; i < li.length; i++) {
              dropUl.insertBefore(li[i], refNode);
            }
            if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
              this.preventExpand = false;
              var dropIcon = select("div." + ICON2, dropLi);
              if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name != "nodeExpanding")) {
                this.expandAction(dropLi, dropIcon, null);
              }
            }
          } else {
            var cNodes = dropUl.childNodes;
            for (var i = 0; i < li.length; i++) {
              for (var j = 0; j < cNodes.length; j++) {
                var returnValue = this.sortOrder === "Ascending" ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();
                if (returnValue) {
                  dropUl.insertBefore(li[i], cNodes[j]);
                  break;
                }
                dropUl.insertBefore(li[i], cNodes[cNodes.length]);
              }
            }
          }
        }
      }
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, id, "hasChildren", true);
        var refId = this.getId(refNode);
        var pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);
        for (var j = 0; j < nodes.length; j++) {
          if (!isNullOrUndefined(id)) {
            var currId = this.isNumberTypeId ? parseFloat(id) : id;
            setValue(this.fields.parentID, currId, nodes[j]);
          }
          this.treeData.splice(pos, 0, nodes[j]);
          pos++;
        }
      }
      this.finalizeNode(dropUl);
    };
    TreeView2.prototype.updateMapper = function(level) {
      var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
      this.updateListProp(mapper);
    };
    TreeView2.prototype.updateListProp = function(mapper) {
      var prop = this.getActualProperties(mapper);
      this.listBaseOption.fields = prop;
      this.listBaseOption.fields.url = prop.hasOwnProperty("navigateUrl") ? prop.navigateUrl : "navigateUrl";
    };
    TreeView2.prototype.getDataPos = function(obj, mapper, id) {
      var pos = null;
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          return i;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var data = getValue(mapper.child, obj[i]);
          pos = this.getDataPos(data, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var items = getValue("child", obj[i]);
          pos = this.getDataPos(items, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        }
      }
      return pos;
    };
    TreeView2.prototype.addChildData = function(obj, mapper, id, data, index) {
      var updated;
      if (isNullOrUndefined(id)) {
        index = isNullOrUndefined(index) ? obj.length : index;
        for (var k = 0, len = data.length; k < len; k++) {
          obj.splice(index, 0, data[k]);
          index++;
        }
        return updated;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (typeof mapper.child === "string" && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null) || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty("child")) {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            var childData = getValue(key, obj[i]);
            if (isNullOrUndefined(childData)) {
              childData = [];
            }
            index = isNullOrUndefined(index) ? childData.length : index;
            for (var k = 0, len = data.length; k < len; k++) {
              childData.splice(index, 0, data[k]);
              index++;
            }
          } else {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            obj[i][key] = data;
          }
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childObj = getValue(mapper.child, obj[i]);
          updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var childData = getValue("child", obj[i]);
          updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        }
      }
      return updated;
    };
    TreeView2.prototype.doDisableAction = function(nodes) {
      var validNodes = this.nodeType(nodes);
      var validID = this.checkValidId(validNodes);
      this.validArr = [];
      for (var i = 0, len = validID.length; i < len; i++) {
        var id = validID[i][this.fields.id].toString();
        if (id && this.disableNode.indexOf(id) === -1) {
          this.disableNode.push(id);
        }
        var liEle = this.getElement(id);
        if (liEle) {
          liEle.setAttribute("aria-disabled", "true");
          addClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.doEnableAction = function(nodes) {
      var strNodes = this.nodeType(nodes);
      for (var i = 0, len = strNodes.length; i < len; i++) {
        var liEle = this.getElement(strNodes[i]);
        var id = strNodes[i];
        if (id && this.disableNode.indexOf(id) !== -1) {
          this.disableNode.splice(this.disableNode.indexOf(id), 1);
        }
        if (liEle) {
          liEle.removeAttribute("aria-disabled");
          removeClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.nodeType = function(nodes) {
      var validID = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var id = void 0;
        if (typeof nodes[i] == "string") {
          id = nodes[i] ? nodes[i].toString() : null;
        } else if (typeof nodes[i] === "object") {
          id = nodes[i] ? nodes[i].getAttribute("data-uid").toString() : null;
        }
        if (validID.indexOf(id) == -1) {
          validID.push(id);
        }
      }
      return validID;
    };
    TreeView2.prototype.checkValidId = function(node) {
      var _this = this;
      if (this.dataType === 1) {
        this.validArr = this.treeData.filter(function(data) {
          return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
        });
      } else if (this.dataType === 2) {
        for (var k = 0; k < this.treeData.length; k++) {
          var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;
          if (node.indexOf(id) !== -1) {
            this.validArr.push(this.treeData[k]);
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[k]);
          if (childItems) {
            this.filterNestedChild(childItems, node);
          }
        }
      }
      return this.validArr;
    };
    TreeView2.prototype.filterNestedChild = function(treeData, nodes) {
      for (var k = 0; k < treeData.length; k++) {
        var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;
        if (nodes.indexOf(id) !== -1) {
          this.validArr.push(treeData[k]);
        }
        var childItems = getValue(this.fields.child.toString(), treeData[k]);
        if (childItems) {
          this.filterNestedChild(childItems, nodes);
        }
      }
    };
    TreeView2.prototype.setTouchClass = function() {
      var ele = closest(this.element, "." + BIGGER);
      this.touchClass = isNullOrUndefined(ele) ? "" : SMALL;
    };
    TreeView2.prototype.updatePersistProp = function() {
      this.removeField(this.treeData, this.fields, ["selected", "expanded"]);
      var sleNodes = this.selectedNodes;
      for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
        this.updateField(this.treeData, this.fields, sleNodes[l], "selected", true);
      }
      var enodes = this.expandedNodes;
      for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
        this.updateField(this.treeData, this.fields, enodes[k], "expanded", true);
      }
      if (this.showCheckBox) {
        this.removeField(this.treeData, this.fields, ["isChecked"]);
        var cnodes = this.checkedNodes;
        for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
          this.updateField(this.treeData, this.fields, cnodes[m], "isChecked", true);
        }
      }
    };
    TreeView2.prototype.removeField = function(obj, mapper, names) {
      if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {
        return;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        for (var j = 0; j < names.length; j++) {
          var field = this.getMapperProp(mapper, names[j]);
          if (!isNullOrUndefined(obj[i][field])) {
            delete obj[i][field];
          }
        }
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          this.removeField(getValue("child", obj[i]), this.getChildMapper(mapper), names);
        }
      }
    };
    TreeView2.prototype.getMapperProp = function(mapper, fieldName) {
      switch (fieldName) {
        case "selected":
          return !isNullOrUndefined(mapper.selected) ? mapper.selected : "selected";
        case "expanded":
          return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : "expanded";
        case "isChecked":
          return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : "isChecked";
        case "hasChildren":
          return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : "hasChildren";
        default:
          return fieldName;
      }
    };
    TreeView2.prototype.updateField = function(obj, mapper, id, key, value) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return;
      } else if (this.dataType === 1) {
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", newId, false));
        setValue(this.getMapperProp(mapper, key), value, resultData[0]);
      } else {
        this.updateChildField(obj, mapper, id, key, value);
      }
    };
    TreeView2.prototype.updateChildField = function(obj, mapper, id, key, value, remove2) {
      var removedData;
      if (isNullOrUndefined(obj)) {
        return removedData;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (remove2) {
            removedData = obj.splice(i, 1);
          } else {
            setValue(this.getMapperProp(mapper, key), value, obj[i]);
            removedData = [];
          }
          return removedData;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childData = getValue(mapper.child, obj[i]);
          removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var childItems = getValue("child", obj[i]);
          removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        }
      }
      return removedData;
    };
    TreeView2.prototype.triggerEvent = function(action, node) {
      this.renderReactTemplates();
      if (action === "addNodes") {
        var nodeData = [];
        for (var i = 0; i < node.length; i++) {
          nodeData.push(this.getNode(this.getElement(isNullOrUndefined(node[i][this.fields.id]) ? getValue(this.fields.id, node[i]).toString() : null)));
        }
        node = nodeData;
      }
      var eventArgs = { data: this.treeData, action, nodeData: node };
      this.trigger("dataSourceChanged", eventArgs);
    };
    TreeView2.prototype.wireInputEvents = function(inpEle) {
      EventHandler.add(inpEle, "blur", this.inputFocusOut, this);
    };
    TreeView2.prototype.wireEditingEvents = function(toBind) {
      var _this = this;
      if (toBind && !this.disabled) {
        var proxy_2 = this;
        this.touchEditObj = new Touch(this.element, {
          tap: function(e) {
            if (_this.isDoubleTapped(e) && e.tapCount === 2) {
              e.originalEvent.preventDefault();
              proxy_2.editingHandler(e.originalEvent);
            }
          }
        });
      } else {
        if (this.touchEditObj) {
          this.touchEditObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireClickEvent = function(toBind) {
      if (toBind) {
        var proxy_3 = this;
        this.touchClickObj = new Touch(this.element, {
          tap: function(e) {
            proxy_3.clickHandler(e);
          }
        });
      } else {
        if (this.touchClickObj) {
          this.touchClickObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireExpandOnEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        var proxy_4 = this;
        this.touchExpandObj = new Touch(this.element, {
          tap: function(e) {
            if ((_this.expandOnType === "Click" || _this.expandOnType === "DblClick" && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {
              proxy_4.expandHandler(e);
            }
          }
        });
      } else {
        if (this.touchExpandObj) {
          this.touchExpandObj.destroy();
        }
      }
    };
    TreeView2.prototype.mouseDownHandler = function(e) {
      this.mouseDownStatus = true;
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (e.ctrlKey && this.allowMultiSelection) {
        EventHandler.add(this.element, "contextmenu", this.preventContextMenu, this);
      }
    };
    ;
    TreeView2.prototype.preventContextMenu = function(e) {
      e.preventDefault();
    };
    TreeView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this);
      this.wireClickEvent(true);
      if (this.expandOnType !== "None") {
        this.wireExpandOnEvent(true);
      }
      EventHandler.add(this.element, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.element, "mouseout", this.onMouseLeave, this);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    TreeView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "mousedown", this.mouseDownHandler);
      this.wireClickEvent(false);
      this.wireExpandOnEvent(false);
      EventHandler.remove(this.element, "mouseover", this.onMouseOver);
      EventHandler.remove(this.element, "mouseout", this.onMouseLeave);
      if (!this.disabled) {
        this.keyboardModule.destroy();
      }
    };
    TreeView2.prototype.parents = function(element, selector) {
      var matched = [];
      var el = element.parentNode;
      while (!isNullOrUndefined(el)) {
        if (matches(el, selector)) {
          matched.push(el);
        }
        el = el.parentNode;
      }
      return matched;
    };
    TreeView2.prototype.isDoubleTapped = function(e) {
      var target = e.originalEvent.target;
      var secondTap;
      if (target && e.tapCount) {
        if (e.tapCount === 1) {
          this.firstTap = closest(target, "." + LISTITEM);
        } else if (e.tapCount === 2) {
          secondTap = closest(target, "." + LISTITEM);
        }
      }
      return this.firstTap === secondTap;
    };
    TreeView2.prototype.isDescendant = function(parent, child) {
      var node = child.parentNode;
      while (!isNullOrUndefined(node)) {
        if (node === parent) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    };
    TreeView2.prototype.showSpinner = function(element) {
      addClass([element], LOAD);
      createSpinner({
        target: element,
        width: Browser.isDevice ? 16 : 14
      }, this.createElement);
      showSpinner(element);
    };
    TreeView2.prototype.hideSpinner = function(element) {
      hideSpinner(element);
      element.innerHTML = "";
      removeClass([element], LOAD);
    };
    TreeView2.prototype.setCheckedNodes = function(nodes) {
      nodes = JSON.parse(JSON.stringify(nodes));
      this.uncheckAll(this.checkedNodes);
      this.setIndeterminate(nodes);
      if (nodes.length > 0) {
        this.checkAll(nodes);
      }
    };
    TreeView2.prototype.setValidCheckedNode = function(node) {
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", node, true));
        if (resultData[0]) {
          this.setChildCheckState(resultData, node, resultData[0]);
          if (this.autoCheck) {
            var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
            var childNodes = this.getChildNodes(this.treeData, parent_4);
            var count = 0;
            for (var len = 0; len < childNodes.length; len++) {
              var childId = childNodes[len][this.fields.id].toString();
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
            if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
              this.checkedNodes.push(parent_4);
            }
          }
        }
      } else if (this.dataType === 2) {
        for (var a = 0; a < this.treeData.length; a++) {
          var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : "";
          if (index === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
            break;
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[a]);
          if (childItems) {
            this.setChildCheckState(childItems, node, this.treeData[a]);
          }
        }
      }
    };
    TreeView2.prototype.setChildCheckState = function(childItems, node, treeData) {
      var checkedParent;
      var count = 0;
      if (this.dataType === 1) {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
              this.checkedNodes.push(checkNode);
            }
          }
          if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = this.getChildNodes(this.treeData, checkNode);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, treeData);
          }
        }
      } else {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : "";
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
          if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = getValue(this.fields.child.toString(), childItems[index]);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, childItems[index]);
          }
          if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
            count++;
          }
          if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
            this.checkedNodes.push(checkedParent);
          }
        }
      }
    };
    TreeView2.prototype.setIndeterminate = function(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        this.setValidCheckedNode(nodes[i]);
      }
    };
    TreeView2.prototype.updatePosition = function(id, newData, isRefreshChild, childValue) {
      if (this.dataType === 1) {
        var pos = this.getDataPos(this.treeData, this.fields, id);
        this.treeData.splice(pos, 1, newData);
        if (isRefreshChild) {
          this.removeChildNodes(id);
          for (var j = 0; j < childValue.length; j++) {
            this.treeData.splice(pos, 0, childValue[j]);
            pos++;
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.updateChildPosition(this.treeData, this.fields, id, [newData], void 0);
      }
    };
    TreeView2.prototype.updateChildPosition = function(treeData, mapper, currID, newData, index) {
      var found;
      for (var i = 0, objlen = treeData.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, treeData[i]);
        if (treeData[i] && nodeId && nodeId.toString() === currID) {
          treeData[i] = newData[0];
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, treeData[i]))) {
          var childObj = getValue(mapper.child, treeData[i]);
          found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", treeData[i]))) {
          var childData = getValue("child", treeData[i]);
          found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        }
      }
      return found;
    };
    TreeView2.prototype.dynamicState = function() {
      this.setDragAndDrop(this.allowDragAndDrop);
      this.wireEditingEvents(this.allowEditing);
      if (!this.disabled) {
        this.wireEvents();
        this.setRipple();
      } else {
        this.unWireEvents();
        this.rippleFn();
        this.rippleIconFn();
      }
    };
    TreeView2.prototype.crudOperation = function(operation, nodes, target, newText, newNode, index, prevent) {
      var _this = this;
      var data = this.fields.dataSource;
      var matchedArr = [];
      var query = this.getQuery(this.fields);
      var key = this.fields.id;
      var crud;
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var nodesID = [];
      if (nodes) {
        nodesID = this.nodeType(nodes);
      } else if (target) {
        if (typeof target == "string") {
          nodesID[0] = target.toString();
        } else if (typeof target === "object") {
          nodesID[0] = target.getAttribute("data-uid").toString();
        }
      }
      for (var i = 0, len = nodesID.length; i < len; i++) {
        var liEle = this.getElement(nodesID[i]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var removedData = this.getNodeObject(nodesID[i]);
        matchedArr.push(removedData);
      }
      switch (operation) {
        case "delete":
          if (nodes.length == 1) {
            crud = data.remove(key, matchedArr[0], query.fromTable, query);
          } else {
            changes.deletedRecords = matchedArr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function(e) {
            return _this.deleteSuccess(nodesID);
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
        case "update":
          matchedArr[0][this.fields.text] = newText;
          crud = data.update(key, matchedArr[0], query.fromTable, query);
          crud.then(function(e) {
            return _this.editSucess(target, newText, prevent);
          }).catch(function(e) {
            return _this.dmFailure(e, target, prevent);
          });
          break;
        case "insert":
          if (newNode.length == 1) {
            crud = data.insert(newNode[0], query.fromTable, query);
          } else {
            var arr = [];
            for (var i = 0, len = newNode.length; i < len; i++) {
              arr.push(newNode[i]);
            }
            changes.addedRecords = arr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function(e) {
            var dropLi = _this.getElement(target);
            _this.addSuccess(newNode, dropLi, index);
            _this.preventExpand = false;
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
      }
    };
    TreeView2.prototype.deleteSuccess = function(nodes) {
      var nodeData = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[i]);
        nodeData.push(this.getNode(liEle));
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        this.removeNode(liEle);
      }
      this.updateInstance();
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.triggerEvent("removeNode", nodeData);
    };
    TreeView2.prototype.editSucess = function(target, newText, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.appendNewText(liEle, txtEle, newText, prevent);
    };
    TreeView2.prototype.addSuccess = function(nodes, dropLi, index) {
      var dropUl;
      var icon = dropLi ? dropLi.querySelector("." + ICON2) : null;
      var proxy = this;
      if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector("." + PARENTITEM) === null) {
        proxy.renderChildNodes(dropLi, null, function() {
          dropUl = dropLi.querySelector("." + PARENTITEM);
          proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);
          proxy.triggerEvent("addNodes", nodes);
        });
      } else {
        this.addGivenNodes(nodes, dropLi, index, true);
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.dmFailure = function(e, target, prevent) {
      if (target) {
        this.updatePreviousText(target, prevent);
      }
      this.trigger("actionFailure", { error: e });
    };
    TreeView2.prototype.updatePreviousText = function(target, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateText(liEle, txtEle, this.oldText, prevent);
    };
    TreeView2.prototype.getHierarchicalParentId = function(node, data, parentsID) {
      var _this = this;
      var index = data.findIndex(function(data2) {
        return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
      });
      if (index == -1) {
        for (var i = 0; i < data.length; i++) {
          var childItems = getValue(this.fields.child.toString(), data[i]);
          if (!isNullOrUndefined(childItems)) {
            index = childItems.findIndex(function(data2) {
              return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
            });
            if (index == -1) {
              this.getHierarchicalParentId(node, childItems, parentsID);
            } else {
              parentsID.push(data[i][this.fields.id].toString());
              this.getHierarchicalParentId(data[i][this.fields.id].toString(), this.treeData, parentsID);
              break;
            }
          }
        }
      }
      return parentsID;
    };
    TreeView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.setDragAndDrop(this.allowDragAndDrop);
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.dragObj.dragArea = this.dragArea;
            }
            break;
          case "allowEditing":
            this.wireEditingEvents(this.allowEditing);
            break;
          case "allowMultiSelection":
            if (this.selectedNodes.length > 1) {
              var sNode = this.getElement(this.selectedNodes[0]);
              this.isLoaded = false;
              this.removeSelectAll();
              this.selectNode(sNode, null);
              this.isLoaded = true;
            }
            this.setMultiSelect(this.allowMultiSelection);
            this.addMultiSelect(this.allowMultiSelection);
            break;
          case "allowTextWrap":
            this.setTextWrap();
            this.updateWrap();
            break;
          case "checkedNodes":
            if (this.showCheckBox) {
              this.checkedNodes = oldProp.checkedNodes;
              this.setCheckedNodes(newProp.checkedNodes);
            }
            break;
          case "autoCheck":
            if (this.showCheckBox) {
              this.autoCheck = newProp.autoCheck;
              this.ensureIndeterminate();
            }
            break;
          case "cssClass":
            this.setCssClass(oldProp.cssClass, newProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "expandedNodes":
            this.isAnimate = false;
            this.setProperties({ expandedNodes: [] }, true);
            this.collapseAll();
            this.isInitalExpand = true;
            this.setProperties({ expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);
            this.doExpandAction();
            this.isInitalExpand = false;
            this.isAnimate = true;
            break;
          case "expandOn":
            this.wireExpandOnEvent(false);
            this.setExpandOnType();
            if (this.expandOnType !== "None" && !this.disabled) {
              this.wireExpandOnEvent(true);
            }
            break;
          case "disabled":
            this.setDisabledMode();
            this.dynamicState();
            break;
          case "fields":
            this.isAnimate = false;
            this.isFieldChange = true;
            this.initialRender = true;
            if (!this.isReact || this.isReact && !(this.fields.dataSource instanceof DataManager)) {
              this.reRenderNodes();
            }
            this.initialRender = false;
            this.isAnimate = true;
            this.isFieldChange = false;
            break;
          case "fullRowSelect":
            this.setFullRow(this.fullRowSelect);
            this.addFullRow(this.fullRowSelect);
            if (this.allowTextWrap) {
              this.setTextWrap();
              this.updateWrap();
            }
            break;
          case "loadOnDemand":
            if (this.loadOnDemand === false && !this.onLoaded) {
              var nodes = this.element.querySelectorAll("li");
              var i = 0;
              while (i < nodes.length) {
                if (nodes[i].getAttribute("aria-expanded") !== "true") {
                  this.renderChildNodes(nodes[i], true, null, true);
                }
                i++;
              }
              this.onLoaded = true;
            }
            break;
          case "nodeTemplate":
            this.hasTemplate = false;
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
            this.reRenderNodes();
            break;
          case "selectedNodes":
            this.removeSelectAll();
            this.setProperties({ selectedNodes: newProp.selectedNodes }, true);
            this.doSelectionAction();
            break;
          case "showCheckBox":
            this.reRenderNodes();
            break;
          case "sortOrder":
            this.reRenderNodes();
            break;
          case "fullRowNavigable":
            this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);
            this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
            this.reRenderNodes();
            break;
        }
      }
    };
    TreeView2.prototype.destroy = function() {
      this.clearTemplate();
      this.element.removeAttribute("aria-activedescendant");
      this.unWireEvents();
      this.wireEditingEvents(false);
      if (!this.disabled) {
        this.rippleFn();
        this.rippleIconFn();
      }
      this.setCssClass(this.cssClass, null);
      this.setDragAndDrop(false);
      this.setFullRow(false);
      if (this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      }
      this.ulElement = null;
      this.liList = null;
      this.startNode = null;
      this.firstTap = null;
      this.expandArgs = null;
      this.dragLi = null;
      this.dragTarget = null;
      this.dragParent = null;
      this.dragObj = null;
      this.dropObj = null;
      this.inputObj = null;
      this.touchEditObj = null;
      this.touchExpandObj = null;
      this.touchClickObj = null;
      _super.prototype.destroy.call(this);
    };
    TreeView2.prototype.addNodes = function(nodes, target, index, preventTargetExpand) {
      if (isNullOrUndefined(nodes)) {
        return;
      }
      nodes = JSON.parse(JSON.stringify(nodes));
      var dropLi = this.getElement(target);
      this.preventExpand = preventTargetExpand;
      if (this.fields.dataSource instanceof DataManager) {
        if (!this.isOffline) {
          this.crudOperation("insert", null, target, null, nodes, index, this.preventExpand);
        } else {
          this.addSuccess(nodes, dropLi, index);
        }
      } else if (this.dataType === 2) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        if (dropLi) {
          this.addGivenNodes(nodes, dropLi, index);
        } else {
          nodes = this.getSortedData(nodes);
          for (var i = 0; i < nodes.length; i++) {
            var pid = getValue(this.fields.parentID, nodes[i]);
            dropLi = pid ? this.getElement(pid.toString()) : pid;
            this.addGivenNodes([nodes[i]], dropLi, index);
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.updateCheckedStateFromDS();
      if (this.showCheckBox && dropLi) {
        this.ensureParentCheckState(dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.beginEdit = function(node) {
      var ele = this.getElement(node);
      if (isNullOrUndefined(ele) || this.disabled) {
        return;
      }
      this.createTextbox(ele, null);
    };
    TreeView2.prototype.checkAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, true);
      }
    };
    TreeView2.prototype.collapseAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, COLLAPSIBLE, false);
      } else {
        if (level > 0) {
          this.collapseByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.collapseAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.disableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doDisableAction(nodes);
      }
    };
    TreeView2.prototype.enableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doEnableAction(nodes);
      }
    };
    TreeView2.prototype.ensureVisible = function(node) {
      var parentsId = [];
      if (this.dataType == 1) {
        var nodeData = this.getTreeData(node);
        while (nodeData.length != 0 && !isNullOrUndefined(nodeData[0][this.fields.parentID])) {
          parentsId.push(nodeData[0][this.fields.parentID].toString());
          nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());
        }
      } else if (this.dataType == 2) {
        parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId);
      }
      this.expandAll(parentsId.reverse());
      var liEle = this.getElement(node);
      if (!isNullOrUndefined(liEle)) {
        if (typeof node == "object") {
          var parents = this.parents(liEle, "." + LISTITEM);
          this.expandAll(parents);
        }
        setTimeout(function() {
          liEle.scrollIntoView({ behavior: "smooth" });
        }, 450);
      }
    };
    TreeView2.prototype.expandAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, EXPANDABLE, true);
      } else {
        if (level > 0) {
          this.expandByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.expandAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.getAllCheckedNodes = function() {
      var checkNodes = this.checkedNodes;
      return checkNodes;
    };
    TreeView2.prototype.getDisabledNodes = function() {
      var disabledNodes = this.disableNode;
      return disabledNodes;
    };
    TreeView2.prototype.getNode = function(node) {
      var ele = this.getElement(node);
      return this.getNodeData(ele, true);
    };
    TreeView2.prototype.getTreeData = function(node) {
      var id = this.getId(node);
      this.updatePersistProp();
      if (isNullOrUndefined(id)) {
        return this.treeData;
      } else {
        var data = this.getNodeObject(id);
        return isNullOrUndefined(data) ? [] : [data];
      }
    };
    TreeView2.prototype.moveNodes = function(sourceNodes, target, index, preventTargetExpand) {
      var dropLi = this.getElement(target);
      var nodeData = [];
      if (isNullOrUndefined(dropLi)) {
        return;
      }
      for (var i = 0; i < sourceNodes.length; i++) {
        var dragLi = this.getElement(sourceNodes[i]);
        nodeData.push(this.getNode(dragLi));
        if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          continue;
        }
        this.preventExpand = preventTargetExpand;
        this.dropAsChildNode(dragLi, dropLi, this, index);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      this.triggerEvent("moveNodes", nodeData);
    };
    TreeView2.prototype.refreshNode = function(target, newData) {
      if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {
        return;
      }
      var id;
      var isRefreshChild = false;
      if (this.dataType == 1 && newData.length > 1) {
        isRefreshChild = true;
      } else if (this.dataType == 2 && newData.length === 1) {
        var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);
        if (!isNullOrUndefined(updatedChildValue)) {
          isRefreshChild = true;
        }
      }
      var liEle = this.getElement(target);
      id = liEle ? liEle.getAttribute("data-uid") : target ? target.toString() : null;
      this.refreshData = this.getNodeObject(id);
      newData = JSON.parse(JSON.stringify(newData));
      var newNodeData;
      var parentData;
      if (this.dataType == 1 && isRefreshChild) {
        for (var k = 0; k < newData.length; k++) {
          if (isNullOrUndefined(newData[k][this.fields.parentID])) {
            parentData = newData[k];
            newData.splice(k, 1);
            break;
          }
        }
        newNodeData = extend({}, this.refreshData, parentData);
      } else {
        newNodeData = extend({}, this.refreshData, newData[0]);
      }
      if (isNullOrUndefined(liEle)) {
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        return;
      }
      this.isRefreshed = true;
      var level = parseFloat(liEle.getAttribute("aria-level"));
      var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);
      var ul = select("." + PARENTITEM, liEle);
      var childItems = getValue(this.fields.child.toString(), newNodeData);
      if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {
        var parentEle = liEle.parentElement;
        var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);
        remove(liEle);
        parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        if (isRefreshChild && ul) {
          this.expandAll([id]);
        }
      } else {
        var txtEle = select("." + TEXTWRAP, liEle);
        var newTextEle = select("." + TEXTWRAP, newliEle[0]);
        var icon = select("div." + ICON2, txtEle);
        var newIcon = select("div." + ICON2, newTextEle);
        if (icon && newIcon) {
          if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
            removeClass([newIcon], EXPANDABLE);
            addClass([newIcon], COLLAPSIBLE);
          } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
            removeClass([newIcon], COLLAPSIBLE);
            addClass([newIcon], EXPANDABLE);
          } else if (icon.classList.contains("interaction")) {
            addClass([newIcon], "interaction");
          }
        }
        remove(txtEle);
        var fullEle = select("." + FULLROW, liEle);
        fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
      }
      liEle = this.getElement(target);
      if (newNodeData[this.fields.tooltip]) {
        liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
      }
      if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
        var attr = {};
        merge(attr, newNodeData[this.fields.htmlAttributes]);
        if (attr.class) {
          addClass([liEle], attr.class.split(" "));
          delete attr.class;
        } else {
          attributes(liEle, attr);
        }
      }
      if (this.selectedNodes.indexOf(id) !== -1) {
        liEle.setAttribute("aria-selected", "true");
        addClass([liEle], ACTIVE);
      }
      this.isRefreshed = false;
      this.triggerEvent("refreshNode", [this.getNode(liEle)]);
    };
    TreeView2.prototype.removeNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          this.crudOperation("delete", nodes);
        } else {
          this.deleteSuccess(nodes);
        }
      }
    };
    TreeView2.prototype.updateNode = function(target, newText) {
      var _this = this;
      if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {
        return;
      }
      var liEle = this.getElement(target);
      if (isNullOrUndefined(liEle)) {
        return;
      }
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var eventArgs = this.getEditEvent(liEle, null, null);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {
            _this.crudOperation("update", null, target, newText, null, null, false);
          } else {
            _this.appendNewText(liEle, txtEle, newText, false);
          }
        }
      });
    };
    TreeView2.prototype.uncheckAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, false);
      }
    };
    var TreeView_1;
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "allowDragAndDrop", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "allowEditing", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "allowMultiSelection", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "allowTextWrap", void 0);
    __decorate14([
      Complex({}, NodeAnimationSettings)
    ], TreeView2.prototype, "animation", void 0);
    __decorate14([
      Property()
    ], TreeView2.prototype, "checkedNodes", void 0);
    __decorate14([
      Property("")
    ], TreeView2.prototype, "cssClass", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "disabled", void 0);
    __decorate14([
      Property(null)
    ], TreeView2.prototype, "dragArea", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "enablePersistence", void 0);
    __decorate14([
      Property()
    ], TreeView2.prototype, "expandedNodes", void 0);
    __decorate14([
      Property("Auto")
    ], TreeView2.prototype, "expandOn", void 0);
    __decorate14([
      Complex({}, FieldsSettings)
    ], TreeView2.prototype, "fields", void 0);
    __decorate14([
      Property(true)
    ], TreeView2.prototype, "fullRowSelect", void 0);
    __decorate14([
      Property(true)
    ], TreeView2.prototype, "loadOnDemand", void 0);
    __decorate14([
      Property()
    ], TreeView2.prototype, "locale", void 0);
    __decorate14([
      Property()
    ], TreeView2.prototype, "nodeTemplate", void 0);
    __decorate14([
      Property()
    ], TreeView2.prototype, "selectedNodes", void 0);
    __decorate14([
      Property("None")
    ], TreeView2.prototype, "sortOrder", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "showCheckBox", void 0);
    __decorate14([
      Property(true)
    ], TreeView2.prototype, "autoCheck", void 0);
    __decorate14([
      Property(false)
    ], TreeView2.prototype, "fullRowNavigable", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "actionFailure", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "created", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "dataBound", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "dataSourceChanged", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "drawNode", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "destroyed", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "keyPress", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeChecked", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeChecking", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeClicked", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeCollapsed", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeCollapsing", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeDragging", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeDragStart", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeDragStop", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeDropped", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeEdited", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeEditing", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeExpanded", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeExpanding", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeSelected", void 0);
    __decorate14([
      Event()
    ], TreeView2.prototype, "nodeSelecting", void 0);
    TreeView2 = TreeView_1 = __decorate14([
      NotifyPropertyChanges
    ], TreeView2);
    return TreeView2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL2 = "e-control";
var ROOT3 = "e-sidebar";
var DOCKER = "e-dock";
var CLOSE = "e-close";
var OPEN = "e-open";
var TRASITION = "e-transition";
var DEFAULTBACKDROP = "e-sidebar-overlay";
var RTL5 = "e-rtl";
var RIGHT = "e-right";
var LEFT = "e-left";
var OVER = "e-over";
var PUSH = "e-push";
var SLIDE = "e-slide";
var VISIBILITY = "e-visibility";
var DISPLAY = "e-sidebar-display";
var MAINCONTENTANIMATION = "e-content-animation";
var DISABLEANIMATION = "e-disable-animation";
var CONTEXT = "e-sidebar-context";
var SIDEBARABSOLUTE = "e-sidebar-absolute";
var Sidebar = (
  /** @class */
  function(_super) {
    __extends15(Sidebar2, _super);
    function Sidebar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Sidebar2.prototype.preRender = function() {
      this.setWidth();
    };
    Sidebar2.prototype.render = function() {
      this.initialize();
      this.wireEvents();
      this.renderComplete();
    };
    Sidebar2.prototype.initialize = function() {
      this.setTarget();
      this.addClass();
      this.setZindex();
      if (this.enableDock) {
        this.setDock();
      }
      if (this.isOpen) {
        this.show();
        this.firstRender = true;
      } else {
        this.setMediaQuery();
      }
      this.checkType(true);
      this.setType(this.type);
      this.setCloseOnDocumentClick();
      this.setEnableRTL();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.setEnableRTL = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL5);
    };
    Sidebar2.prototype.setTarget = function() {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);
      if (typeof this.target === "string") {
        this.setProperties({ target: document.querySelector(this.target) }, true);
      }
      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        addClass([this.element], SIDEBARABSOLUTE);
        addClass([this.target], CONTEXT);
        this.targetEle = this.getTargetElement();
      }
    };
    Sidebar2.prototype.getTargetElement = function() {
      var siblingElement = this.element.nextElementSibling;
      while (!isNullOrUndefined(siblingElement)) {
        if (!siblingElement.classList.contains(ROOT3)) {
          break;
        }
        siblingElement = siblingElement.nextElementSibling;
      }
      return siblingElement;
    };
    Sidebar2.prototype.setCloseOnDocumentClick = function() {
      if (this.closeOnDocumentClick) {
        EventHandler.add(document, "mousedown touchstart", this.documentclickHandler, this);
      } else {
        EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      }
    };
    Sidebar2.prototype.setWidth = function() {
      if (this.enableDock && this.position === "Left") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (this.enableDock && this.position === "Right") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (!this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.width) });
      }
    };
    Sidebar2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    Sidebar2.prototype.setZindex = function() {
      setStyleAttribute(this.element, { "z-index": "" + this.zIndex });
    };
    Sidebar2.prototype.addClass = function() {
      if (this.element.tagName === "EJS-SIDEBAR") {
        addClass([this.element], DISPLAY);
      }
      var classELement = document.querySelector(".e-main-content");
      if (!isNullOrUndefined(classELement || this.targetEle)) {
        addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : null;
      if (!this.enableDock && this.type !== "Auto") {
        addClass([this.element], [VISIBILITY]);
      }
      removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
      this.element.classList.add(ROOT3);
      addClass([this.element], this.position === "Right" ? RIGHT : LEFT);
      if (this.enableDock) {
        addClass([this.element], DOCKER);
      }
      if (!isNullOrUndefined(this.tabIndex)) {
        this.element.setAttribute("tabindex", this.tabIndex);
      }
      if (this.type === "Auto" && !Browser.isDevice) {
        this.show();
      } else if (!this.isOpen) {
        addClass([this.element], [CLOSE, DISABLEANIMATION]);
      }
    };
    Sidebar2.prototype.checkType = function(val) {
      if (!(this.type === "Push" || this.type === "Over" || this.type === "Slide")) {
        this.type = "Auto";
      } else {
        if (!this.element.classList.contains(CLOSE) && !val) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.transitionEnd = function(e) {
      this.setDock();
      if (!isNullOrUndefined(e) && !this.firstRender) {
        this.triggerChange();
      }
      this.firstRender = false;
      EventHandler.remove(this.element, "transitionend", this.transitionEnd);
    };
    Sidebar2.prototype.destroyBackDrop = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (this.target && this.showBackdrop && sibling && !isNullOrUndefined(this.defaultBackdropDiv)) {
        removeClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    Sidebar2.prototype.hide = function(e) {
      var _this = this;
      var closeArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("close", closeArguments, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          if (_this.element.classList.contains(CLOSE)) {
            return;
          }
          if (_this.element.classList.contains(OPEN) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], CLOSE);
          removeClass([_this.element], OPEN);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.enableDock ? _this.dockSize : _this.width) });
          _this.setType(_this.type);
          var sibling = document.querySelector(".e-main-content") || _this.targetEle;
          if (!_this.enableDock && sibling) {
            sibling.style.transform = "translateX(0px)";
            sibling.style[_this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
          }
          _this.destroyBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.remove("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: false }, true);
          if (_this.enableDock) {
            setTimeout(function() {
              return _this.setTimeOut();
            }, 50);
          }
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setTimeOut = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var elementWidth = this.element.getBoundingClientRect().width;
      if (this.element.classList.contains(OPEN) && sibling && !(this.type === "Over" && this.enableDock)) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        } else {
          sibling.style.marginRight = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        }
      } else if (this.element.classList.contains(CLOSE) && sibling) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        } else {
          sibling.style.marginRight = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        }
      }
    };
    Sidebar2.prototype.show = function(e) {
      var _this = this;
      var openArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("open", openArguments, function(observedopenArgs) {
        if (!observedopenArgs.cancel) {
          removeClass([_this.element], [VISIBILITY, DISABLEANIMATION]);
          if (_this.element.classList.contains(OPEN)) {
            return;
          }
          if (_this.element.classList.contains(CLOSE) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], [OPEN, TRASITION]);
          setStyleAttribute(_this.element, { "transform": "" });
          removeClass([_this.element], CLOSE);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.width) });
          _this.setType(_this.type);
          _this.createBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.add("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: true }, true);
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setAnimation = function() {
      if (this.animate) {
        removeClass([this.element], DISABLEANIMATION);
      } else {
        addClass([this.element], DISABLEANIMATION);
      }
    };
    Sidebar2.prototype.triggerChange = function() {
      var changeArguments = { name: "change", element: this.element };
      this.trigger("change", changeArguments);
    };
    Sidebar2.prototype.setDock = function() {
      if (this.enableDock && this.position === "Left" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(-100%) translateX(" + this.setDimension(this.dockSize) + ")" });
      } else if (this.enableDock && this.position === "Right" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(100%) translateX(-" + this.setDimension(this.dockSize) + ")" });
      }
      if (this.element.classList.contains(CLOSE) && this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      }
    };
    Sidebar2.prototype.createBackDrop = function() {
      if (this.target && this.showBackdrop && this.getState()) {
        var targetString = this.target;
        var sibling = document.querySelector(".e-main-content") || this.targetEle;
        this.defaultBackdropDiv = this.createElement("div");
        addClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
        setStyleAttribute(this.defaultBackdropDiv, { height: targetString.style.height });
        sibling.appendChild(this.defaultBackdropDiv);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = this.createElement("div");
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
    };
    Sidebar2.prototype.getPersistData = function() {
      return this.addOnPersist(["type", "position", "isOpen"]);
    };
    Sidebar2.prototype.getModuleName = function() {
      return "sidebar";
    };
    Sidebar2.prototype.toggle = function() {
      if (this.element.classList.contains(OPEN)) {
        this.hide();
      } else {
        this.show();
      }
    };
    Sidebar2.prototype.getState = function() {
      return this.element.classList.contains(OPEN) ? true : false;
    };
    Sidebar2.prototype.setMediaQuery = function() {
      if (this.mediaQuery) {
        var media = false;
        if (typeof this.mediaQuery === "string") {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }
        if (media && this.windowWidth !== window.innerWidth) {
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.resize = function() {
      if (this.type === "Auto") {
        if (Browser.isDevice) {
          addClass([this.element], OVER);
        } else {
          addClass([this.element], PUSH);
        }
      }
      this.setMediaQuery();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.documentclickHandler = function(e) {
      if (closest(e.target, "." + CONTROL2 + "." + ROOT3)) {
        return;
      }
      this.hide(e);
    };
    Sidebar2.prototype.enableGestureHandler = function(args) {
      if (!this.isOpen && this.position === "Left" && args.swipeDirection === "Right" && (args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      } else if (this.isOpen && this.position === "Left" && args.swipeDirection === "Left") {
        this.hide();
      } else if (this.isOpen && this.position === "Right" && args.swipeDirection === "Right") {
        this.hide();
      } else if (!this.isOpen && this.position === "Right" && args.swipeDirection === "Left" && (window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      }
    };
    Sidebar2.prototype.setEnableGestures = function() {
      if (this.enableGestures) {
        this.mainContentEle = new Touch(document.body, { swipe: this.enableGestureHandler.bind(this) });
        this.sidebarEle = new Touch(this.element, { swipe: this.enableGestureHandler.bind(this) });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };
    Sidebar2.prototype.wireEvents = function() {
      this.setEnableGestures();
      EventHandler.add(window, "resize", this.resize, this);
    };
    Sidebar2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.resize);
      EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }
      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };
    Sidebar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var isRendered = this.isServerRendered;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isOpen":
            if (this.isOpen) {
              this.show();
            } else {
              this.hide();
            }
            break;
          case "width":
            this.setWidth();
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "animate":
            this.setAnimation();
            break;
          case "type":
            this.checkType(false);
            removeClass([this.element], [VISIBILITY]);
            this.addClass();
            addClass([this.element], this.type === "Auto" ? Browser.isDevice ? ["e-over"] : ["e-push"] : ["e-" + this.type.toLowerCase()]);
            break;
          case "position":
            this.element.style.transform = "";
            this.setDock();
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginRight" : "marginLeft"] = "0px";
            }
            if (this.position === "Right") {
              removeClass([this.element], LEFT);
              addClass([this.element], RIGHT);
            } else {
              removeClass([this.element], RIGHT);
              addClass([this.element], LEFT);
            }
            this.setType(this.type);
            break;
          case "showBackdrop":
            if (this.showBackdrop) {
              this.createBackDrop();
            } else {
              if (this.modal) {
                this.modal.style.display = "none";
                this.modal.outerHTML = "";
                this.modal = null;
              }
            }
            break;
          case "target":
            if (typeof this.target === "string") {
              this.setProperties({ target: document.querySelector(this.target) }, true);
            }
            if (isNullOrUndefined(this.target)) {
              removeClass([this.element], SIDEBARABSOLUTE);
              removeClass([oldProp.target], CONTEXT);
              setStyleAttribute(sibling, { "margin-left": 0, "margin-right": 0 });
              document.body.insertAdjacentElement("afterbegin", this.element);
            }
            this.isServerRendered = false;
            _super.prototype.refresh.call(this);
            this.isServerRendered = isRendered;
            break;
          case "closeOnDocumentClick":
            this.setCloseOnDocumentClick();
            break;
          case "enableDock":
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "zIndex":
            this.setZindex();
            break;
          case "mediaQuery":
            this.setMediaQuery();
            break;
          case "enableGestures":
            this.setEnableGestures();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
        }
      }
    };
    Sidebar2.prototype.setType = function(type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      this.setZindex();
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (sibling) {
        sibling.style.transform = "translateX(0px)";
        if (!Browser.isDevice && this.type !== "Auto" && !(this.type === "Over" && this.enableDock)) {
          sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
        }
      }
      var margin = this.position === "Left" ? elementWidth + "px" : elementWidth + "px";
      var eleWidth = this.position === "Left" ? elementWidth : -elementWidth;
      removeClass([this.element], [PUSH, OVER, SLIDE]);
      switch (type) {
        case "Push":
          addClass([this.element], [PUSH]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
          }
          break;
        case "Slide":
          addClass([this.element], [SLIDE]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style.transform = "translateX(" + eleWidth + "px)";
          }
          break;
        case "Over":
          addClass([this.element], [OVER]);
          if (this.enableDock && (this.element.classList.contains(CLOSE) || this.isOpen)) {
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = this.setDimension(this.dockSize);
            }
          }
          break;
        case "Auto":
          addClass([this.element], [TRASITION]);
          if (Browser.isDevice) {
            if (sibling && this.enableDock && !this.getState()) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
              addClass([this.element], PUSH);
            } else {
              addClass([this.element], OVER);
            }
          } else {
            addClass([this.element], PUSH);
            if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
            }
          }
          this.createBackDrop();
      }
    };
    Sidebar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.target) {
        removeClass([this.target], CONTEXT);
      }
      this.destroyBackDrop();
      if (this.element) {
        removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION, DISABLEANIMATION]);
        removeClass([this.element], SIDEBARABSOLUTE);
        this.element.style.width = "";
        this.element.style.zIndex = "";
        this.element.style.transform = "";
        if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      this.windowWidth = null;
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (!isNullOrUndefined(sibling)) {
        sibling.style.margin = "";
        sibling.style.transform = "";
      }
      this.unWireEvents();
    };
    __decorate15([
      Property("auto")
    ], Sidebar2.prototype, "dockSize", void 0);
    __decorate15([
      Property(null)
    ], Sidebar2.prototype, "mediaQuery", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "enableDock", void 0);
    __decorate15([
      Property("en-US")
    ], Sidebar2.prototype, "locale", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "enablePersistence", void 0);
    __decorate15([
      Property(true)
    ], Sidebar2.prototype, "enableGestures", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "isOpen", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "enableRtl", void 0);
    __decorate15([
      Property(true)
    ], Sidebar2.prototype, "animate", void 0);
    __decorate15([
      Property("auto")
    ], Sidebar2.prototype, "height", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "closeOnDocumentClick", void 0);
    __decorate15([
      Property("Left")
    ], Sidebar2.prototype, "position", void 0);
    __decorate15([
      Property(null)
    ], Sidebar2.prototype, "target", void 0);
    __decorate15([
      Property(false)
    ], Sidebar2.prototype, "showBackdrop", void 0);
    __decorate15([
      Property("Auto")
    ], Sidebar2.prototype, "type", void 0);
    __decorate15([
      Property("auto")
    ], Sidebar2.prototype, "width", void 0);
    __decorate15([
      Property(1e3)
    ], Sidebar2.prototype, "zIndex", void 0);
    __decorate15([
      Event()
    ], Sidebar2.prototype, "created", void 0);
    __decorate15([
      Event()
    ], Sidebar2.prototype, "close", void 0);
    __decorate15([
      Event()
    ], Sidebar2.prototype, "open", void 0);
    __decorate15([
      Event()
    ], Sidebar2.prototype, "change", void 0);
    __decorate15([
      Event()
    ], Sidebar2.prototype, "destroyed", void 0);
    Sidebar2 = __decorate15([
      NotifyPropertyChanges
    ], Sidebar2);
    return Sidebar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICONRIGHT = "e-icon-right";
var ITEMTEXTCLASS = "e-breadcrumb-text";
var ICONCLASS = "e-breadcrumb-icon";
var MENUCLASS = "e-breadcrumb-menu";
var ITEMCLASS = "e-breadcrumb-item";
var POPUPCLASS = "e-breadcrumb-popup";
var WRAPMODECLASS = "e-breadcrumb-wrap-mode";
var SCROLLMODECLASS = "e-breadcrumb-scroll-mode";
var TABINDEX = "tabindex";
var DISABLEDCLASS = "e-disabled";
var ARIADISABLED = "aria-disabled";
var DOT = ".";
var BreadcrumbOverflowMode;
(function(BreadcrumbOverflowMode2) {
  BreadcrumbOverflowMode2["Hidden"] = "Hidden";
  BreadcrumbOverflowMode2["Collapsed"] = "Collapsed";
  BreadcrumbOverflowMode2["Menu"] = "Menu";
  BreadcrumbOverflowMode2["Wrap"] = "Wrap";
  BreadcrumbOverflowMode2["Scroll"] = "Scroll";
  BreadcrumbOverflowMode2["None"] = "None";
})(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));
var BreadcrumbItem = (
  /** @class */
  function(_super) {
    __extends16(BreadcrumbItem2, _super);
    function BreadcrumbItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate16([
      Property("")
    ], BreadcrumbItem2.prototype, "text", void 0);
    __decorate16([
      Property("")
    ], BreadcrumbItem2.prototype, "url", void 0);
    __decorate16([
      Property(null)
    ], BreadcrumbItem2.prototype, "iconCss", void 0);
    __decorate16([
      Property(false)
    ], BreadcrumbItem2.prototype, "disabled", void 0);
    return BreadcrumbItem2;
  }(ChildProperty)
);
var Breadcrumb = (
  /** @class */
  function(_super) {
    __extends16(Breadcrumb2, _super);
    function Breadcrumb2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isPopupCreated = false;
      return _this;
    }
    Breadcrumb2.prototype.preRender = function() {
    };
    Breadcrumb2.prototype.render = function() {
      this.initialize();
      this.renderItems(this.items);
      this.wireEvents();
    };
    Breadcrumb2.prototype.initialize = function() {
      this._maxItems = this.maxItems;
      if (isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.element.setAttribute("aria-label", "breadcrumb");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      if (this.disabled) {
        this.element.classList.add(DISABLEDCLASS);
        this.element.setAttribute(ARIADISABLED, "true");
      }
      if (this.overflowMode === "Wrap") {
        this.element.classList.add(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        this.element.classList.add(SCROLLMODECLASS);
      }
      this.initItems();
      this.initPvtProps();
    };
    Breadcrumb2.prototype.initPvtProps = function() {
      if (this.overflowMode === "Hidden" && this._maxItems > 0) {
        this.endIndex = this.getEndIndex();
        this.startIndex = this.endIndex + 1 - (this._maxItems - 1);
      }
      if (this.overflowMode === "Menu") {
        if (this._maxItems >= 0) {
          this.startIndex = this._maxItems > 1 ? 1 : 0;
          this.endIndex = this.getEndIndex();
          this.popupUl = this.createElement("ul", { attrs: { TABINDEX: "0", "role": "menu" } });
        } else {
          this.startIndex = this.endIndex = null;
        }
      }
    };
    Breadcrumb2.prototype.getEndIndex = function() {
      var _this = this;
      var endIndex;
      if (this.activeItem) {
        this.items.forEach(function(item, idx) {
          if (item.url === _this.activeItem || item.text === _this.activeItem) {
            endIndex = idx;
          }
        });
      } else {
        endIndex = this.items.length - 1;
      }
      return endIndex;
    };
    Breadcrumb2.prototype.initItems = function() {
      if (!this.items.length) {
        var baseUri = void 0;
        var uri = void 0;
        var items = [];
        if (this.url) {
          var url = new URL(this.url, window.location.origin);
          baseUri = url.origin + "/";
          uri = url.href.split(baseUri)[1].split("/");
        } else {
          baseUri = window.location.origin + "/";
          uri = window.location.href.split(baseUri)[1].split("/");
        }
        items.push({ iconCss: "e-icons e-home", url: baseUri });
        for (var i = 0; i < uri.length; i++) {
          if (uri[i]) {
            items.push({ text: uri[i], url: baseUri + uri[i] });
            baseUri += uri[i] + "/";
          }
        }
        this.setProperties({ items }, true);
      }
    };
    Breadcrumb2.prototype.renderItems = function(items) {
      var _this = this;
      var item;
      var isSingleLevel;
      var isIconRight = this.element.classList.contains(ICONRIGHT);
      var itemsLength = items.length;
      if (itemsLength) {
        var isActiveItem = void 0;
        var isLastItem = void 0;
        var isLastItemInPopup_1;
        var j_1 = 0;
        var wrapDiv = void 0;
        var len = itemsLength * 2 - 1;
        var isItemCancelled_1 = false;
        var ol = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-wrapped-ol" : "" });
        var firstOl = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-first-ol" : "" });
        var showIcon = this.hasField(items, "iconCss");
        var isCollasped = this.overflowMode === "Collapsed" && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;
        var isDefaultOverflowMode_1 = this.overflowMode === "Hidden" && this._maxItems > 0;
        if (this.overflowMode === "Menu" && this.popupUl) {
          this.popupUl.innerHTML = "";
        }
        var listBaseOptions = {
          moduleName: this.getModuleName(),
          showIcon,
          itemNavigable: true,
          itemCreated: function(args) {
            var isLastItem2 = args.curData.isLastItem;
            if (isLastItem2 && args.item.children.length && !_this.itemTemplate) {
              delete args.curData.isLastItem;
              if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {
                args.item.innerHTML = _this.createElement("span", { className: ITEMTEXTCLASS, innerHTML: args.item.children[0].innerHTML }).outerHTML;
              }
            }
            if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {
              args.item.classList.add("e-icon-item");
            }
            if (isDefaultOverflowMode_1) {
              args.item.setAttribute("item-index", j_1.toString());
            }
            var eventArgs = {
              item: extend({}, args.curData.properties ? args.curData.properties : args.curData),
              element: args.item,
              cancel: false
            };
            _this.trigger("beforeItemRender", eventArgs);
            isItemCancelled_1 = eventArgs.cancel;
            var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);
            if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {
              args.item.querySelector(".e-anchor-wrap").appendChild(args.item.querySelector(DOT + ICONCLASS));
            }
            if (eventArgs.item.disabled) {
              args.item.setAttribute(ARIADISABLED, "true");
              args.item.classList.add(DISABLEDCLASS);
            }
            if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {
              args.item.children[0].setAttribute(TABINDEX, "-1");
            }
            if (args.curData.isEmptyUrl) {
              args.item.children[0].removeAttribute("href");
              if ((!isLastItem2 || isLastItem2 && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {
                args.item.children[0].setAttribute(TABINDEX, "0");
                EventHandler.add(args.item.children[0], "keydown", _this.keyDownHandler, _this);
              }
            }
            args.item.removeAttribute("role");
            if (isLastItem2) {
              args.item.setAttribute("data-active-item", "");
            }
            if (!_this.itemTemplate) {
              _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);
            }
          }
        };
        for (var i = 0; i < len; i % 2 && j_1++, i++) {
          isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);
          if (isCollasped && i > 1 && i < len - 2) {
            continue;
          } else if (isDefaultOverflowMode_1 && ((j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true)) && j_1 !== 0) {
            continue;
          }
          if (i % 2) {
            wrapDiv = this.createElement("div", { className: "e-breadcrumb-item-wrapper" });
            if (this.separatorTemplate && this.separatorTemplate === "/" || isNullOrUndefined(this.separatorTemplate)) {
              listBaseOptions.template = initializeCSPTemplate(function() {
                return "/";
              });
            } else {
              listBaseOptions.template = this.separatorTemplate;
            }
            listBaseOptions.itemClass = "e-breadcrumb-separator";
            isSingleLevel = false;
            item = [{ previousItem: items[j_1], nextItem: items[j_1 + 1] }];
          } else {
            listBaseOptions.itemClass = "";
            if (this.itemTemplate) {
              listBaseOptions.template = this.itemTemplate;
              isSingleLevel = false;
            } else {
              isSingleLevel = true;
            }
            item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];
            if (!item[0].url && !this.itemTemplate) {
              item = [extend({}, item[0], { isEmptyUrl: true, url: "#" })];
            }
            isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === "Menu") && j_1 === this.endIndex;
            if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {
              item[0].isLastItem = true;
            }
          }
          var parent_1 = ol;
          var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;
          if (this.overflowMode === "Menu" && (j_1 >= this.startIndex && (j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true)) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {
            if (i % 2) {
              continue;
            } else {
              parent_1 = this.popupUl;
              if (isLastItem) {
                isLastItemInPopup_1 = true;
              }
            }
          } else if (this.overflowMode === "Wrap") {
            if (i === 0) {
              parent_1 = firstOl;
            } else {
              parent_1 = wrapDiv;
            }
          }
          var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;
          if (!isItemCancelled_1) {
            append(li, parent_1);
          } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === "Menu" || this.overflowMode === "Wrap") {
            items.splice(j_1, 1);
            this.initPvtProps();
            return this.reRenderItems();
          } else if (i === len - 1 || isLastItem) {
            remove(parent_1.lastElementChild);
          }
          if (this.overflowMode === "Wrap" && i !== 0 && i % 2 === 0) {
            ol.appendChild(wrapDiv);
          }
          if (isCollasped && i === 1) {
            var li_1 = this.createElement("li", { className: "e-icons e-breadcrumb-collapsed", attrs: { TABINDEX: "0" } });
            EventHandler.add(li_1, "keyup", this.expandHandler, this);
            ol.appendChild(li_1);
          }
          if (this.overflowMode === "Menu" && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {
            var menu = this.getMenuElement();
            EventHandler.add(menu, "keyup", this.keyDownHandler, this);
            ol.appendChild(menu);
          }
          if (isActiveItem || isLastItem) {
            break;
          }
          if (isItemCancelled_1) {
            i++;
          }
        }
        if (this.isReact) {
          this.renderReactTemplates();
        }
        if (this.overflowMode === "Wrap") {
          this.element.appendChild(firstOl);
        }
        this.element.appendChild(ol);
        this.calculateMaxItems();
      }
    };
    Breadcrumb2.prototype.calculateMaxItems = function() {
      if (this.overflowMode === "Hidden" || this.overflowMode === "Collapsed" || this.overflowMode === "Menu") {
        var maxItems = void 0;
        var width = this.element.offsetWidth;
        var liElems = [].slice.call(this.element.children[0].children).reverse();
        var liWidth = this.overflowMode === "Menu" ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);
        if (this.overflowMode === "Menu") {
          var menuEle = this.getMenuElement();
          this.element.appendChild(menuEle);
          liWidth += menuEle.offsetWidth;
          remove(menuEle);
        }
        for (var i = 0; i < liElems.length - 2; i++) {
          if (liWidth > width) {
            maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === "Menu" && i <= 2 ? 0 : 1);
            if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {
              this._maxItems = maxItems;
              this.initPvtProps();
              return this.reRenderItems();
            } else {
              break;
            }
          } else {
            if (this.overflowMode === "Menu" && i === 2) {
              liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;
              if (liWidth > width) {
                this._maxItems = 1;
                this.initPvtProps();
                return this.reRenderItems();
              }
            }
            if (!(this.overflowMode === "Menu" && liElems[i].classList.contains(MENUCLASS))) {
              liWidth += liElems[i].offsetWidth;
            }
          }
        }
      } else if ((this.overflowMode === "Wrap" || this.overflowMode === "Scroll") && this._maxItems > 0) {
        var width = 0;
        var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);
        if (liElems.length > this._maxItems + this._maxItems - 1) {
          for (var i = this.overflowMode === "Wrap" ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {
            width += liElems[i].offsetWidth;
          }
          width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;
          if (this.overflowMode === "Wrap") {
            this.element.querySelector(".e-breadcrumb-wrapped-ol").style.width = width + "px";
          } else {
            this.element.style.width = width + "px";
          }
        }
      }
    };
    Breadcrumb2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    Breadcrumb2.prototype.getMenuElement = function() {
      return this.createElement("li", { className: "e-icons e-breadcrumb-menu", attrs: { TABINDEX: "0" } });
    };
    Breadcrumb2.prototype.beforeItemRenderChanges = function(prevItem, currItem, elem, isRightIcon) {
      var wrapElem = elem.querySelector(".e-anchor-wrap");
      if (wrapElem) {
        wrapElem.parentElement.setAttribute("aria-label", "home");
      }
      if (currItem.text !== prevItem.text) {
        wrapElem.childNodes.forEach(function(child) {
          if (child.nodeType === Node.TEXT_NODE) {
            child.textContent = currItem.text;
          }
        });
      }
      if (currItem.iconCss !== prevItem.iconCss && wrapElem) {
        var iconElem = elem.querySelector(DOT + ICONCLASS);
        if (iconElem) {
          if (currItem.iconCss) {
            removeClass([iconElem], prevItem.iconCss.split(" "));
            addClass([iconElem], currItem.iconCss.split(" "));
          } else {
            remove(iconElem);
          }
        } else if (currItem.iconCss) {
          var iconElem_1 = this.createElement("span", { className: ICONCLASS + " " + currItem.iconCss });
          if (isRightIcon) {
            append([iconElem_1], wrapElem);
          } else {
            wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);
          }
        }
      }
      if (currItem.url !== prevItem.url && this.enableNavigation) {
        var anchor = elem.querySelector("a." + ITEMTEXTCLASS);
        if (anchor) {
          if (currItem.url) {
            anchor.setAttribute("href", currItem.url);
          } else {
            anchor.removeAttribute("href");
          }
        }
      }
    };
    Breadcrumb2.prototype.reRenderItems = function() {
      this.element.innerHTML = "";
      this.renderItems(this.items);
    };
    Breadcrumb2.prototype.clickHandler = function(e) {
      var li = closest(e.target, DOT + ITEMCLASS + ":not(.e-breadcrumb-separator)");
      if (!this.enableNavigation) {
        e.preventDefault();
      }
      if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {
        var idx = void 0;
        if (this.overflowMode === "Wrap") {
          idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);
        } else {
          idx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (this.overflowMode === "Menu") {
          if (closest(e.target, DOT + POPUPCLASS)) {
            idx += this.startIndex;
            this.endIndex = idx;
            if (e.type === "keydown") {
              this.documentClickHandler(e);
            }
          } else if (this.element.querySelector(DOT + MENUCLASS)) {
            if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {
              idx += this.popupUl.childElementCount * 2 - 2;
              idx = Math.floor(idx / 2);
              this.endIndex = idx;
            } else {
              this.startIndex = this.endIndex = idx;
            }
          } else {
            idx = Math.floor(idx / 2);
            this.startIndex = this.endIndex = idx;
          }
        } else {
          idx = Math.floor(idx / 2);
        }
        if (this.overflowMode === "Hidden" && this._maxItems > 0 && this.endIndex !== 0) {
          idx = parseInt(li.getAttribute("item-index"), 10);
          if (this.startIndex > 1) {
            this.startIndex -= this.endIndex - idx;
          }
          this.endIndex = idx;
        }
        this.trigger("itemClick", { element: li, item: this.items[idx], event: e });
        this.activeItem = this.items[idx].url || this.items[idx].text;
        this.dataBind();
      }
      if (e.target.classList.contains("e-breadcrumb-collapsed")) {
        this.isExpanded = true;
        this.reRenderItems();
      }
      if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {
        this.renderPopup();
      }
    };
    Breadcrumb2.prototype.renderPopup = function() {
      var _this = this;
      var wrapper = this.createElement("div", { className: POPUPCLASS + " " + this.cssClass + (this.enableRtl ? " e-rtl" : "") });
      document.body.appendChild(wrapper);
      this.isPopupCreated = true;
      this.popupObj = new Popup(wrapper, {
        content: this.popupUl,
        relateTo: this.element.querySelector(DOT + MENUCLASS),
        enableRtl: this.enableRtl,
        position: { X: "left", Y: "bottom" },
        collision: { X: "fit", Y: "flip" },
        open: function() {
          _this.popupUl.focus();
        }
      });
      this.popupWireEvents();
      this.popupObj.show();
    };
    Breadcrumb2.prototype.documentClickHandler = function(e) {
      if (this.overflowMode === "Menu" && this.popupObj && this.popupObj.element.classList.contains("e-popup-open") && !closest(e.target, DOT + MENUCLASS)) {
        this.popupObj.hide();
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
    };
    Breadcrumb2.prototype.resize = function() {
      this._maxItems = this.maxItems;
      this.initPvtProps();
      this.reRenderItems();
    };
    Breadcrumb2.prototype.expandHandler = function(e) {
      if (e.key === "Enter") {
        this.isExpanded = true;
        this.reRenderItems();
      }
    };
    Breadcrumb2.prototype.keyDownHandler = function(e) {
      if (e.key === "Enter") {
        this.clickHandler(e);
      }
    };
    Breadcrumb2.prototype.popupKeyDownHandler = function(e) {
      if (e.key === "Escape") {
        this.documentClickHandler(e);
      }
    };
    Breadcrumb2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
          case "enableActiveItemNavigation":
            this.reRenderItems();
            break;
          case "activeItem":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            break;
          case "overflowMode":
          case "maxItems":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            if (oldProp.overflowMode === "Wrap") {
              this.element.classList.remove(WRAPMODECLASS);
            } else if (newProp.overflowMode === "Wrap") {
              this.element.classList.add(WRAPMODECLASS);
            }
            if (oldProp.overflowMode === "Scroll") {
              this.element.classList.remove(SCROLLMODECLASS);
            } else if (newProp.overflowMode === "Scroll") {
              this.element.classList.add(SCROLLMODECLASS);
            }
            break;
          case "url":
            this.initItems();
            this.reRenderItems();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && (newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1)) {
              this.reRenderItems();
            }
            break;
          case "enableRtl":
            this.element.classList.toggle("e-rtl");
            break;
          case "disabled":
            this.element.classList.toggle(DISABLEDCLASS);
            this.element.setAttribute(ARIADISABLED, newProp.disabled + "");
            break;
        }
      }
    };
    Breadcrumb2.prototype.wireEvents = function() {
      this.delegateClickHanlder = this.documentClickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHanlder, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resize.bind(this));
    };
    Breadcrumb2.prototype.popupWireEvents = function() {
      EventHandler.add(this.popupObj.element, "click", this.clickHandler, this);
      EventHandler.add(this.popupObj.element, "keydown", this.popupKeyDownHandler, this);
    };
    Breadcrumb2.prototype.unWireEvents = function() {
      EventHandler.remove(document, "click", this.delegateClickHanlder);
      EventHandler.remove(this.element, "click", this.clickHandler);
      window.removeEventListener("resize", this.resize.bind(this));
      if (this.popupObj) {
        EventHandler.remove(this.popupObj.element, "click", this.clickHandler);
        EventHandler.remove(this.popupObj.element, "keydown", this.popupKeyDownHandler);
      }
    };
    Breadcrumb2.prototype.getPersistData = function() {
      return this.addOnPersist(["activeItem"]);
    };
    Breadcrumb2.prototype.getModuleName = function() {
      return "breadcrumb";
    };
    Breadcrumb2.prototype.destroy = function() {
      var _this = this;
      var classes = [];
      var attributes2 = ["aria-label"];
      if (this.cssClass) {
        classes.concat(this.cssClass.split(" "));
      }
      if (this.enableRtl) {
        classes.push("e-rtl");
      }
      if (this.disabled) {
        classes.push(DISABLEDCLASS);
        attributes2.push(ARIADISABLED);
      }
      if (this.overflowMode === "Wrap") {
        classes.push(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        classes.push(SCROLLMODECLASS);
      }
      this.unWireEvents();
      this.element.innerHTML = "";
      removeClass([this.element], classes);
      attributes2.forEach(function(attribute) {
        _this.element.removeAttribute(attribute);
      });
      _super.prototype.destroy.call(this);
    };
    __decorate16([
      Property("")
    ], Breadcrumb2.prototype, "url", void 0);
    __decorate16([
      Collection([], BreadcrumbItem)
    ], Breadcrumb2.prototype, "items", void 0);
    __decorate16([
      Property("")
    ], Breadcrumb2.prototype, "activeItem", void 0);
    __decorate16([
      Property(-1)
    ], Breadcrumb2.prototype, "maxItems", void 0);
    __decorate16([
      Property("Menu")
    ], Breadcrumb2.prototype, "overflowMode", void 0);
    __decorate16([
      Property("")
    ], Breadcrumb2.prototype, "cssClass", void 0);
    __decorate16([
      Property(null)
    ], Breadcrumb2.prototype, "itemTemplate", void 0);
    __decorate16([
      Property("/")
    ], Breadcrumb2.prototype, "separatorTemplate", void 0);
    __decorate16([
      Property(true)
    ], Breadcrumb2.prototype, "enableNavigation", void 0);
    __decorate16([
      Property(false)
    ], Breadcrumb2.prototype, "enableActiveItemNavigation", void 0);
    __decorate16([
      Property(false)
    ], Breadcrumb2.prototype, "disabled", void 0);
    __decorate16([
      Property("")
    ], Breadcrumb2.prototype, "locale", void 0);
    __decorate16([
      Event()
    ], Breadcrumb2.prototype, "beforeItemRender", void 0);
    __decorate16([
      Event()
    ], Breadcrumb2.prototype, "itemClick", void 0);
    __decorate16([
      Event()
    ], Breadcrumb2.prototype, "created", void 0);
    Breadcrumb2 = __decorate16([
      NotifyPropertyChanges
    ], Breadcrumb2);
    return Breadcrumb2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_CAROUSEL = "e-carousel";
var CLS_ACTIVE3 = "e-active";
var CLS_RTL6 = "e-rtl";
var CLS_PARTIAL = "e-partial";
var CLS_SWIPE = "e-swipe";
var CLS_SLIDE_CONTAINER = "e-carousel-slide-container";
var CLS_ITEMS3 = "e-carousel-items";
var CLS_CLONED = "e-cloned";
var CLS_ITEM4 = "e-carousel-item";
var CLS_PREVIOUS = "e-previous";
var CLS_NEXT = "e-next";
var CLS_PREV_ICON = "e-previous-icon";
var CLS_NEXT_ICON = "e-next-icon";
var CLS_NAVIGATORS = "e-carousel-navigators";
var CLS_INDICATORS = "e-carousel-indicators";
var CLS_INDICATOR_BARS = "e-indicator-bars";
var CLS_INDICATOR_BAR = "e-indicator-bar";
var CLS_INDICATOR2 = "e-indicator";
var CLS_ICON2 = "e-icons";
var CLS_PLAY_PAUSE = "e-play-pause";
var CLS_PLAY_ICON = "e-play-icon";
var CLS_PAUSE_ICON = "e-pause-icon";
var CLS_PREV_BUTTON = "e-previous-button";
var CLS_NEXT_BUTTON = "e-next-button";
var CLS_PLAY_BUTTON = "e-play-button";
var CLS_FLAT = "e-flat";
var CLS_ROUND = "e-round";
var CLS_HOVER_ARROWS = "e-hover-arrows";
var CLS_HOVER = "e-carousel-hover";
var CLS_TEMPLATE3 = "e-template";
var CLS_SLIDE_ANIMATION = "e-carousel-slide-animation";
var CLS_FADE_ANIMATION = "e-carousel-fade-animation";
var CLS_CUSTOM_ANIMATION = "e-carousel-custom-animation";
var CLS_ANIMATION_NONE = "e-carousel-animation-none";
var CLS_PREV_SLIDE = "e-prev";
var CLS_NEXT_SLIDE = "e-next";
var CLS_TRANSITION_START = "e-transition-start";
var CLS_TRANSITION_END = "e-transition-end";
var CarouselSwipeMode;
(function(CarouselSwipeMode2) {
  CarouselSwipeMode2[CarouselSwipeMode2["Touch"] = 1] = "Touch";
  CarouselSwipeMode2[CarouselSwipeMode2["Mouse"] = 2] = "Mouse";
})(CarouselSwipeMode || (CarouselSwipeMode = {}));
var CarouselItem = (
  /** @class */
  function(_super) {
    __extends17(CarouselItem2, _super);
    function CarouselItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate17([
      Property()
    ], CarouselItem2.prototype, "cssClass", void 0);
    __decorate17([
      Property()
    ], CarouselItem2.prototype, "interval", void 0);
    __decorate17([
      Property()
    ], CarouselItem2.prototype, "template", void 0);
    __decorate17([
      Property()
    ], CarouselItem2.prototype, "htmlAttributes", void 0);
    return CarouselItem2;
  }(ChildProperty)
);
var Carousel = (
  /** @class */
  function(_super) {
    __extends17(Carousel2, _super);
    function Carousel2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isSwipe = false;
      return _this;
    }
    Carousel2.prototype.getModuleName = function() {
      return CLS_CAROUSEL.replace("e-", "");
    };
    Carousel2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedIndex"]);
    };
    Carousel2.prototype.preRender = function() {
      this.keyConfigs = {
        home: "home",
        end: "end",
        space: "space",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      var defaultLocale = {
        nextSlide: "Next slide",
        of: "of",
        pauseSlideTransition: "Pause slide transition",
        playSlideTransition: "Play slide transition",
        previousSlide: "Previous slide",
        slide: "Slide",
        slideShow: "Slide show"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);
    };
    Carousel2.prototype.render = function() {
      this.initialize();
      this.renderSlides();
      this.renderNavigators();
      this.renderPlayButton();
      this.renderIndicators();
      this.applyAnimation();
      this.wireEvents();
    };
    Carousel2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var target;
      var rtlElement;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "animationEffect":
            this.applyAnimation();
            break;
          case "cssClass":
            classList(this.element, [newProp.cssClass], [oldProp.cssClass]);
            break;
          case "selectedIndex":
            this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? "Previous" : "Next");
            this.autoSlide();
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              this.setHtmlAttributes(this.htmlAttributes, this.element);
            }
            break;
          case "enableTouchSwipe":
            if (!this.enableTouchSwipe && this.touchModule) {
              this.touchModule.destroy();
            }
            if (this.element.querySelector("." + CLS_ITEMS3)) {
              this.renderTouchActions();
            }
            break;
          case "loop":
            if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {
              this.applySlideInterval();
            }
            this.handleNavigatorsActions(this.selectedIndex);
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              this.reRenderSlides();
            }
            break;
          case "enableRtl":
            rtlElement = [].slice.call(this.element.querySelectorAll("." + CLS_PREV_BUTTON + ",\n                ." + CLS_NEXT_BUTTON + ", ." + CLS_PLAY_BUTTON));
            rtlElement.push(this.element);
            if (this.enableRtl) {
              addClass(rtlElement, CLS_RTL6);
            } else {
              removeClass(rtlElement, CLS_RTL6);
            }
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              var cloneCount = this.loop ? this.getNumOfItems() : 0;
              var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
              this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
            }
            break;
          case "buttonsVisibility":
            target = this.element.querySelector("." + CLS_NAVIGATORS);
            if (target) {
              switch (this.buttonsVisibility) {
                case "Hidden":
                  this.resetTemplates(["previousButtonTemplate", "nextButtonTemplate"]);
                  remove(target);
                  break;
                case "VisibleOnHover":
                  addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
                case "Visible":
                  removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
              }
            } else {
              this.renderNavigators();
              this.renderPlayButton();
            }
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(this.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(this.height) });
            break;
          case "autoPlay":
            if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {
              this.playButtonClickHandler(null, true);
            }
            this.autoSlide();
            break;
          case "interval":
            this.autoSlide();
            break;
          case "showIndicators":
          case "indicatorsType":
            target = this.element.querySelector("." + CLS_INDICATORS);
            if (target) {
              this.resetTemplates(["indicatorsTemplate"]);
              remove(target);
            }
            this.renderIndicators();
            break;
          case "showPlayButton":
            target = this.element.querySelector("." + CLS_PLAY_PAUSE);
            if (!this.showPlayButton && target) {
              remove(target);
              this.resetTemplates(["playButtonTemplate"]);
            }
            this.renderPlayButton();
            break;
          case "items":
          case "dataSource":
            var selectedData = prop === "dataSource" ? this.dataSource : this.items;
            if (selectedData.length > 0 && this.selectedIndex >= selectedData.length) {
              this.setActiveSlide(selectedData.length - 1, "Previous");
              this.autoSlide();
            }
            this.reRenderSlides();
            this.reRenderIndicators();
            break;
          case "partialVisible":
            if (this.partialVisible) {
              addClass([this.element], CLS_PARTIAL);
            } else {
              removeClass([this.element], CLS_PARTIAL);
            }
            this.reRenderSlides();
            break;
          case "swipeMode":
            EventHandler.remove(this.element, "mousedown touchstart", this.swipeStart);
            EventHandler.remove(this.element, "mousemove touchmove", this.swiping);
            EventHandler.remove(this.element, "mouseup touchend", this.swipStop);
            this.swipeModehandlers();
            this.reRenderSlides();
            break;
        }
      }
    };
    Carousel2.prototype.reRenderSlides = function() {
      var target = this.element.querySelector("." + CLS_ITEMS3);
      if (target) {
        this.resetTemplates(["itemTemplate"]);
        remove(target);
      }
      this.renderSlides();
    };
    Carousel2.prototype.reRenderIndicators = function() {
      var target = this.element.querySelector("." + CLS_INDICATORS);
      if (target) {
        this.resetTemplates(["indicatorsTemplate"]);
        remove(target);
      }
      this.renderIndicators();
    };
    Carousel2.prototype.initialize = function() {
      var carouselClasses = [];
      carouselClasses.push(CLS_CAROUSEL);
      if (this.cssClass) {
        carouselClasses.push(this.cssClass);
      }
      if (this.enableRtl) {
        carouselClasses.push(CLS_RTL6);
      }
      if (this.partialVisible) {
        carouselClasses.push(CLS_PARTIAL);
      }
      if (!(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
        carouselClasses.push(CLS_SWIPE);
      }
      addClass([this.element], carouselClasses);
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      attributes(this.element, { "role": "group", "aria-roledescription": "carousel", "aria-label": this.localeObj.getConstant("slideShow") });
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    Carousel2.prototype.renderSlides = function() {
      var _this = this;
      var slideContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      if (!slideContainer) {
        slideContainer = this.createElement("div", { className: CLS_SLIDE_CONTAINER, attrs: { "tabindex": "0", "role": "tabpanel" } });
        this.element.appendChild(slideContainer);
      }
      this.itemsContainer = this.createElement("div", { className: CLS_ITEMS3, attrs: { "aria-live": this.autoPlay ? "off" : "polite" } });
      slideContainer.appendChild(this.itemsContainer);
      var numOfItems = this.getNumOfItems();
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (this.dataSource.length > 0) {
          this.dataSource.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      if (this.items.length > 0) {
        this.slideItems = this.items;
        this.items.forEach(function(item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer);
        });
      } else if (this.dataSource.length > 0) {
        this.slideItems = this.dataSource;
        this.dataSource.forEach(function(item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer);
        });
      }
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (this.dataSource.length > 0) {
          this.dataSource.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      this.renderTemplates();
      this.itemsContainer.style.setProperty("--carousel-items-count", "" + this.itemsContainer.children.length);
      var slideWidth = isNullOrUndefined(this.itemsContainer.firstElementChild) ? 0 : this.itemsContainer.firstElementChild.clientWidth;
      this.itemsContainer.style.transitionProperty = "none";
      var cloneCount = this.loop ? numOfItems : 0;
      this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
      this.autoSlide();
      this.renderTouchActions();
      this.renderKeyboardActions();
    };
    Carousel2.prototype.getTranslateX = function(slideWidth, count) {
      if (count === void 0) {
        count = 1;
      }
      return this.enableRtl ? "translateX(" + slideWidth * count + "px)" : "translateX(" + -slideWidth * count + "px)";
    };
    Carousel2.prototype.renderSlide = function(item, itemTemplate, index, container, isClone) {
      if (isClone === void 0) {
        isClone = false;
      }
      var itemEle = this.createElement("div", {
        id: getUniqueID("carousel_item"),
        className: CLS_ITEM4 + " " + (item.cssClass ? item.cssClass : "") + " " + (this.selectedIndex === index && !isClone ? CLS_ACTIVE3 : ""),
        attrs: {
          "aria-hidden": this.selectedIndex === index && !isClone ? "false" : "true",
          "data-index": index.toString(),
          "role": "group",
          "aria-roledescription": "slide"
        }
      });
      if (isClone) {
        itemEle.classList.add(CLS_CLONED);
      }
      if (!isNullOrUndefined(item.htmlAttributes)) {
        this.setHtmlAttributes(item.htmlAttributes, itemEle);
      }
      var templateId = this.element.id + "_template";
      var template = this.templateParser(itemTemplate)(item, this, "itemTemplate", templateId, false);
      append(template, itemEle);
      container.appendChild(itemEle);
    };
    Carousel2.prototype.renderNavigators = function() {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      var navigators = this.createElement("div", { className: CLS_NAVIGATORS });
      var itemsContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      itemsContainer.insertAdjacentElement("afterend", navigators);
      if (!isNullOrUndefined(this.slideItems) && this.slideItems.length > 1) {
        this.renderNavigatorButton("Previous");
        this.renderNavigatorButton("Next");
      }
      this.renderTemplates();
    };
    Carousel2.prototype.renderNavigatorButton = function(direction) {
      var buttonContainer = this.createElement("div", {
        className: (direction === "Previous" ? CLS_PREVIOUS : CLS_NEXT) + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (direction === "Previous" && this.previousButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_previousButtonTemplate";
        var template = this.templateParser(this.previousButtonTemplate)({ type: "Previous" }, this, "previousButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else if (direction === "Next" && this.nextButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_nextButtonTemplate";
        var template = this.templateParser(this.nextButtonTemplate)({ type: "Next" }, this, "nextButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else {
        var button = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(direction === "Previous" ? "previousSlide" : "nextSlide"), "type": "button" }
        });
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + (direction === "Previous" ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),
          iconCss: CLS_ICON2 + " " + (direction === "Previous" ? CLS_PREV_ICON : CLS_NEXT_ICON),
          enableRtl: this.enableRtl,
          disabled: !this.loop && this.selectedIndex === (direction === "Previous" ? 0 : this.slideItems.length - 1)
        });
        buttonObj.appendTo(button);
        buttonContainer.appendChild(button);
      }
      this.element.querySelector("." + CLS_NAVIGATORS).appendChild(buttonContainer);
      EventHandler.add(buttonContainer, "click", this.navigatorClickHandler, this);
    };
    Carousel2.prototype.renderPlayButton = function() {
      if (isNullOrUndefined(this.slideItems) || this.buttonsVisibility === "Hidden" || !this.showPlayButton || this.slideItems.length <= 1) {
        return;
      }
      var playPauseWrap = this.createElement("div", {
        className: CLS_PLAY_PAUSE + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (this.playButtonTemplate) {
        addClass([playPauseWrap], CLS_TEMPLATE3);
        var templateId = this.element.id + "_playButtonTemplate";
        var template = this.templateParser(this.playButtonTemplate)({}, this, "playButtonTemplate", templateId, false);
        append(template, playPauseWrap);
      } else {
        var playButton = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"), "type": "button" }
        });
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + CLS_PLAY_BUTTON,
          iconCss: CLS_ICON2 + " " + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),
          isToggle: true,
          enableRtl: this.enableRtl
        });
        if (isLastSlide) {
          this.setProperties({ autoPlay: false }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", "polite");
        }
        buttonObj.appendTo(playButton);
        playPauseWrap.appendChild(playButton);
      }
      var navigators = this.element.querySelector("." + CLS_NAVIGATORS);
      navigators.insertBefore(playPauseWrap, navigators.lastElementChild);
      this.renderTemplates();
      EventHandler.add(playPauseWrap, "click", this.playButtonClickHandler, this);
    };
    Carousel2.prototype.renderIndicators = function() {
      var _this = this;
      if (!this.showIndicators) {
        return;
      }
      var indicatorClass = "e-default";
      if (!this.indicatorsTemplate) {
        indicatorClass = "e-" + this.indicatorsType.toLowerCase();
      }
      var indicatorWrap = this.createElement("div", { className: CLS_INDICATORS + " " + indicatorClass });
      var indicatorBars = this.createElement("div", { className: CLS_INDICATOR_BARS });
      indicatorWrap.appendChild(indicatorBars);
      var progress;
      if (this.slideItems) {
        switch (this.indicatorsType) {
          case "Fraction":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              indicatorBars.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
            }
            break;
          case "Progress":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              progress = this.createElement("div", { className: CLS_INDICATOR_BAR });
              progress.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
              progress.style.setProperty("--carousel-items-count", "" + this.slideItems.length);
              indicatorBars.appendChild(progress);
            }
            break;
          case "Default":
          case "Dynamic":
            this.slideItems.forEach(function(item, index) {
              var indicatorBar = _this.createElement("div", {
                className: CLS_INDICATOR_BAR + " " + (_this.selectedIndex === index ? CLS_ACTIVE3 : _this.selectedIndex - 1 === index ? CLS_PREV_SLIDE : _this.selectedIndex + 1 === index ? CLS_NEXT_SLIDE : ""),
                attrs: { "data-index": index.toString(), "aria-current": _this.selectedIndex === index ? "true" : "false" }
              });
              indicatorBar.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
              if (_this.indicatorsTemplate) {
                _this.renderIndicatorTemplate(indicatorBar, index);
              } else if (_this.indicatorsType === "Default") {
                var indicator = _this.createElement("button", { className: CLS_INDICATOR2, attrs: { "type": "button", "aria-label": _this.localeObj.getConstant("slide") + " " + (index + 1) + " " + _this.localeObj.getConstant("of") + " " + _this.slideItems.length } });
                indicatorBar.appendChild(indicator);
                indicator.appendChild(_this.createElement("div", {}));
                var buttonObj = new Button({ cssClass: "e-flat e-small" });
                buttonObj.appendTo(indicator);
              }
              indicatorBars.appendChild(indicatorBar);
              if (_this.indicatorsType === "Default") {
                EventHandler.add(indicatorBar, "click", _this.indicatorClickHandler, _this);
              }
            });
            break;
        }
      }
      this.element.appendChild(indicatorWrap);
    };
    Carousel2.prototype.renderIndicatorTemplate = function(indicatorBar, index) {
      if (index === void 0) {
        index = 0;
      }
      addClass([indicatorBar], CLS_TEMPLATE3);
      var templateId = this.element.id + "_indicatorsTemplate";
      var template = this.templateParser(this.indicatorsTemplate)({ index, selectedIndex: this.selectedIndex }, this, "indicatorsTemplate", templateId, false);
      append(template, indicatorBar);
    };
    Carousel2.prototype.renderKeyboardActions = function() {
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
    };
    Carousel2.prototype.renderTouchActions = function() {
      if (!this.enableTouchSwipe) {
        return;
      }
      this.touchModule = new Touch(this.element, { swipe: this.swipeHandler.bind(this) });
    };
    Carousel2.prototype.applyAnimation = function() {
      removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);
      switch (this.animationEffect) {
        case "Slide":
          addClass([this.element], CLS_SLIDE_ANIMATION);
          break;
        case "Fade":
          addClass([this.element], CLS_FADE_ANIMATION);
          break;
        case "None":
          addClass([this.element], CLS_ANIMATION_NONE);
          break;
        case "Custom":
          addClass([this.element], CLS_CUSTOM_ANIMATION);
          break;
      }
    };
    Carousel2.prototype.autoSlide = function() {
      if (isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      this.resetSlideInterval();
      this.applySlideInterval();
    };
    Carousel2.prototype.autoSlideChange = function() {
      var activeSlide = this.element.querySelector("." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide)) {
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      if (!this.loop && activeIndex === this.slideItems.length - 1) {
        this.resetSlideInterval();
      } else {
        var index = (activeIndex + 1) % this.slideItems.length;
        if (!this.element.classList.contains(CLS_HOVER)) {
          this.setActiveSlide(index, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.applySlideInterval = function() {
      var _this = this;
      if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {
        return;
      }
      var itemInterval = this.interval;
      if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex].interval)) {
        itemInterval = this.items[this.selectedIndex].interval;
      }
      this.autoSlideInterval = setInterval(function() {
        return _this.autoSlideChange();
      }, itemInterval);
    };
    Carousel2.prototype.resetSlideInterval = function() {
      clearInterval(this.autoSlideInterval);
      this.autoSlideInterval = null;
    };
    Carousel2.prototype.getSlideIndex = function(direction) {
      var currentIndex = this.selectedIndex;
      if (direction === "Previous") {
        currentIndex--;
        if (currentIndex < 0) {
          currentIndex = this.slideItems.length - 1;
        }
      } else {
        currentIndex++;
        if (currentIndex === this.slideItems.length) {
          currentIndex = 0;
        }
      }
      return currentIndex;
    };
    Carousel2.prototype.setActiveSlide = function(currentIndex, direction, isSwiped) {
      var _this = this;
      if (isSwiped === void 0) {
        isSwiped = false;
      }
      if (this.element.querySelectorAll("." + CLS_ITEM4 + "." + CLS_PREV_SLIDE + ",." + CLS_ITEM4 + "." + CLS_NEXT_SLIDE).length > 0) {
        return;
      }
      var allSlides = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM4 + ":not(.e-cloned)"));
      var activeSlide = this.element.querySelector("." + CLS_ITEM4 + "." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide) && this.showIndicators) {
        var activeIndicator = this.element.querySelector("." + CLS_INDICATOR_BAR + "." + CLS_ACTIVE3);
        var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);
        addClass([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE3);
        return;
      } else if (isNullOrUndefined(activeSlide)) {
        addClass([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];
      var eventArgs = {
        currentIndex: activeIndex,
        nextIndex: currentIndex,
        currentSlide: activeSlide,
        nextSlide: currentSlide,
        slideDirection: direction,
        isSwiped,
        cancel: false
      };
      this.trigger("slideChanging", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        _this.setProperties({ selectedIndex: currentIndex }, true);
        attributes(args.currentSlide, { "aria-hidden": "true" });
        attributes(args.nextSlide, { "aria-hidden": "false" });
        _this.refreshIndicators(activeIndex, currentIndex);
        _this.slideChangedEventArgs = {
          currentIndex: args.nextIndex,
          previousIndex: args.currentIndex,
          currentSlide: args.nextSlide,
          previousSlide: args.currentSlide,
          slideDirection: direction,
          isSwiped
        };
        var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;
        var numOfItems = _this.getNumOfItems();
        if (!_this.isSwipe) {
          _this.itemsContainer.style.transitionDuration = "0.6s";
        }
        _this.isSwipe = false;
        if (_this.animationEffect === "Fade") {
          _this.itemsContainer.classList.add("e-fade-in-out");
        } else {
          _this.itemsContainer.style.transitionProperty = "transform";
        }
        if (_this.loop) {
          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === "Next") {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, allSlides.length + numOfItems);
          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === "Previous") {
            _this.itemsContainer.style.transform = _this.partialVisible ? _this.getTranslateX(slideWidth) : "translateX(0px)";
          } else {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex + numOfItems);
          }
        } else {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex);
        }
        if (_this.animationEffect === "Slide") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_PREV_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);
          } else {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);
          }
        } else if (_this.animationEffect === "Fade") {
          removeClass([args.currentSlide], CLS_ACTIVE3);
          addClass([args.nextSlide], CLS_ACTIVE3);
        } else if (_this.animationEffect === "Custom") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            addClass([args.currentSlide], CLS_PREV_SLIDE);
          } else {
            addClass([args.currentSlide], CLS_PREV_SLIDE);
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
          }
        } else {
          _this.onTransitionEnd();
        }
        _this.handleNavigatorsActions(currentIndex);
      });
    };
    Carousel2.prototype.onTransitionEnd = function() {
      var _this = this;
      removeClass(this.element.querySelectorAll("." + CLS_ITEMS3), "e-fade-in-out");
      var numOfItems = this.getNumOfItems();
      if (this.slideChangedEventArgs) {
        this.itemsContainer.style.transitionProperty = "none";
        if (this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === "Next" || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === "Previous")) {
          var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + numOfItems);
        }
        addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE3);
        removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE3);
        this.trigger("slideChanged", this.slideChangedEventArgs, function() {
          removeClass(_this.element.querySelectorAll("." + CLS_ITEM4), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);
          _this.slideChangedEventArgs = null;
        });
      }
    };
    Carousel2.prototype.refreshIndicators = function(activeIndex, currentIndex) {
      var _this = this;
      var slideIndicator = this.element.querySelector("." + CLS_INDICATOR_BARS);
      if (isNullOrUndefined(slideIndicator)) {
        return;
      }
      var indicators = [].slice.call(slideIndicator.childNodes);
      switch (this.indicatorsType) {
        case "Default":
        case "Dynamic":
          attributes(indicators[parseInt(activeIndex.toString(), 10)], { "aria-current": "false" });
          attributes(indicators[parseInt(currentIndex.toString(), 10)], { "aria-current": "true" });
          removeClass(indicators, [CLS_ACTIVE3, CLS_PREV_SLIDE, CLS_NEXT_SLIDE]);
          addClass([indicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
          if (indicators[currentIndex - 1]) {
            addClass([indicators[currentIndex - 1]], CLS_PREV_SLIDE);
          }
          if (indicators[currentIndex + 1]) {
            addClass([indicators[currentIndex + 1]], CLS_NEXT_SLIDE);
          }
          indicators.forEach(function(item) {
            return item.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
          });
          break;
        case "Fraction":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
          }
          break;
        case "Progress":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.firstElementChild.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
          }
          break;
      }
    };
    Carousel2.prototype.setHtmlAttributes = function(attribute, element) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (key === "class") {
          addClass([element], attribute["" + key]);
        } else {
          element.setAttribute(key, attribute["" + key]);
        }
      }
    };
    Carousel2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Carousel2.prototype.getNavigatorState = function(target, isPrevious) {
      var button = target.querySelector("." + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));
      if (button) {
        var buttonObj = getInstance(button, Button);
        return buttonObj.disabled;
      }
      return false;
    };
    Carousel2.prototype.navigatorClickHandler = function(e) {
      var target = e.currentTarget;
      var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));
      if (isDisabled) {
        return;
      }
      var direction = target.classList.contains(CLS_PREVIOUS) ? "Previous" : "Next";
      this.setActiveSlide(this.getSlideIndex(direction), direction);
      this.autoSlide();
    };
    Carousel2.prototype.indicatorClickHandler = function(e) {
      var target = closest(e.target, "." + CLS_INDICATOR_BAR);
      var index = parseInt(target.dataset.index, 10);
      if (this.selectedIndex !== index) {
        this.setActiveSlide(index, this.selectedIndex > index ? "Previous" : "Next");
        this.autoSlide();
      }
    };
    Carousel2.prototype.playButtonClickHandler = function(e, isPropertyChange) {
      if (isPropertyChange === void 0) {
        isPropertyChange = false;
      }
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      if (playButton) {
        var buttonObj = getInstance(playButton, Button);
        if (!isPropertyChange) {
          this.setProperties({ autoPlay: !this.autoPlay }, true);
        }
        playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
        buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
        buttonObj.dataBind();
        this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
        if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {
          this.setActiveSlide(0, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.keyHandler = function(e) {
      var direction;
      var slideIndex;
      var isSlideTransition = false;
      var target = e.target;
      e.preventDefault();
      switch (e.action) {
        case "space":
          if (this.showIndicators && target.classList.contains(CLS_INDICATOR2)) {
            target.click();
          } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {
            this.playButtonClickHandler(e);
          } else if (target.classList.contains(CLS_NEXT_BUTTON)) {
            this.next();
          } else if (target.classList.contains(CLS_PREV_BUTTON)) {
            this.prev();
          }
          break;
        case "end":
          slideIndex = this.slideItems.length - 1;
          direction = "Next";
          isSlideTransition = true;
          break;
        case "home":
          slideIndex = 0;
          direction = "Previous";
          isSlideTransition = true;
          break;
        case "moveUp":
        case "moveLeft":
        case "moveDown":
        case "moveRight":
          if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {
            this.element.focus();
          }
          direction = e.action === "moveUp" || e.action === "moveLeft" ? "Previous" : "Next";
          slideIndex = this.getSlideIndex(direction);
          isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);
          break;
      }
      if (isSlideTransition) {
        this.setActiveSlide(slideIndex, direction);
        this.autoSlide();
        isSlideTransition = false;
      }
    };
    Carousel2.prototype.swipeHandler = function(e) {
      if (this.element.classList.contains(CLS_HOVER) || isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      var direction = e.swipeDirection === "Right" ? "Previous" : "Next";
      var slideIndex = this.getSlideIndex(direction);
      if (!this.isSuspendSlideTransition(slideIndex, direction)) {
        this.setActiveSlide(slideIndex, direction, true);
        this.autoSlide();
      }
    };
    Carousel2.prototype.isSuspendSlideTransition = function(index, direction) {
      return !this.loop && (direction === "Next" && index === 0 || direction === "Previous" && index === this.slideItems.length - 1);
    };
    Carousel2.prototype.handleNavigatorsActions = function(index) {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      if (this.showPlayButton) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;
        if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {
          isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE3);
        }
        if (isButtonUpdate) {
          this.setProperties({ autoPlay: !isLastSlide }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
          var buttonObj = getInstance(playButton, Button);
          buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
          buttonObj.dataBind();
        }
      }
      var prevButton = this.element.querySelector("." + CLS_PREV_BUTTON);
      if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {
        var buttonObj = getInstance(prevButton, Button);
        buttonObj.disabled = !this.loop && index === 0;
        buttonObj.dataBind();
      }
      var nextButton = this.element.querySelector("." + CLS_NEXT_BUTTON);
      if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {
        var buttonObj = getInstance(nextButton, Button);
        buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;
        buttonObj.dataBind();
      }
    };
    Carousel2.prototype.onHoverActions = function(e) {
      var navigator = this.element.querySelector("." + CLS_NAVIGATORS);
      switch (e.type) {
        case "mouseenter":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator) {
            removeClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
          }
          if (this.pauseOnHover) {
            addClass([this.element], CLS_HOVER);
          }
          break;
        case "mouseleave":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator) {
            addClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
          }
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.onFocusActions = function(e) {
      switch (e.type) {
        case "focusin":
          addClass([this.element], CLS_HOVER);
          break;
        case "focusout":
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.destroyButtons = function() {
      var buttonCollections = [].slice.call(this.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = getInstance(button, Button);
        if (instance) {
          instance.destroy();
        }
      }
    };
    Carousel2.prototype.getNumOfItems = function() {
      return this.partialVisible ? 2 : 1;
    };
    Carousel2.prototype.getTranslateValue = function(element) {
      var style = getComputedStyle(element);
      return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
    };
    Carousel2.prototype.swipeStart = function(e) {
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      this.isSwipe = false;
      this.itemsContainer.classList.add("e-swipe-start");
      this.prevPageX = e.touches ? e.touches[0].pageX : e.pageX;
      this.initialTranslate = this.getTranslateValue(this.itemsContainer);
    };
    Carousel2.prototype.swiping = function(e) {
      if (!this.itemsContainer.classList.contains("e-swipe-start")) {
        return;
      }
      e.preventDefault();
      var pageX = e.touches ? e.touches[0].pageX : e.pageX;
      var positionDiff = this.prevPageX - pageX;
      if (!this.loop && (this.enableRtl && (this.selectedIndex === 0 && positionDiff > 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff < 0) || !this.enableRtl && (this.selectedIndex === 0 && positionDiff < 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff > 0))) {
        return;
      }
      this.itemsContainer.style.transform = "translateX(" + (this.initialTranslate + (this.enableRtl ? positionDiff : -positionDiff)) + "px)";
    };
    Carousel2.prototype.swipStop = function() {
      this.isSwipe = true;
      var time = Date.now() - this.timeStampStart;
      var distanceX = this.getTranslateValue(this.itemsContainer) - this.initialTranslate;
      distanceX = distanceX < 0 ? distanceX * -1 : distanceX;
      if (this.isSwipe) {
        var offsetDist = distanceX * (Browser.isDevice ? 6 : 1.66);
        this.itemsContainer.style.transitionDuration = (Browser.isDevice ? distanceX : offsetDist) / time / 10 + "s";
      }
      var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
      var threshold = slideWidth / 2;
      this.itemsContainer.classList.remove("e-swipe-start");
      var value = this.getTranslateValue(this.itemsContainer);
      if (value - this.initialTranslate < -threshold) {
        this.swipeNavigation(!this.enableRtl);
      } else if (value - this.initialTranslate > threshold) {
        this.swipeNavigation(this.enableRtl);
      } else {
        this.itemsContainer.style.transform = "translateX(" + this.initialTranslate + "px)";
        if (this.animationEffect === "Fade") {
          this.itemsContainer.classList.add("e-fade-in-out");
        }
      }
    };
    Carousel2.prototype.swipeNavigation = function(isRtl) {
      if (isRtl) {
        this.next();
      } else {
        this.prev();
      }
    };
    Carousel2.prototype.swipeModehandlers = function() {
      if ((this.swipeMode & CarouselSwipeMode.Touch) === CarouselSwipeMode.Touch) {
        EventHandler.add(this.itemsContainer, "touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "touchend", this.swipStop, this);
      }
      if ((this.swipeMode & CarouselSwipeMode.Mouse) === CarouselSwipeMode.Mouse) {
        EventHandler.add(this.itemsContainer, "mousedown", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup", this.swipStop, this);
      }
      if (this.swipeMode === 0 && (this.swipeMode & CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch) === (CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch)) {
        EventHandler.add(this.itemsContainer, "mousedown touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup touchend", this.swipStop, this);
      }
    };
    Carousel2.prototype.resizeHandler = function() {
      if (this.itemsContainer && this.itemsContainer.firstElementChild) {
        var numOfItems = this.getNumOfItems();
        var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
        this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + numOfItems);
      }
    };
    Carousel2.prototype.wireEvents = function() {
      if (!(this.animationEffect === "Custom")) {
        this.swipeModehandlers();
      }
      EventHandler.add(this.element, "focusin focusout", this.onFocusActions, this);
      EventHandler.add(this.element, "mouseenter mouseleave", this.onHoverActions, this);
      EventHandler.add(this.element.firstElementChild, "animationend", this.onTransitionEnd, this);
      EventHandler.add(this.element.firstElementChild, "transitionend", this.onTransitionEnd, this);
      EventHandler.add(window, "resize", this.resizeHandler, this);
    };
    Carousel2.prototype.unWireEvents = function() {
      var _this = this;
      var indicators = [].slice.call(this.element.querySelectorAll("." + CLS_INDICATOR_BAR));
      indicators.forEach(function(indicator) {
        EventHandler.remove(indicator, "click", _this.indicatorClickHandler);
      });
      var navigators = [].slice.call(this.element.querySelectorAll("." + CLS_PREVIOUS + ",." + CLS_NEXT));
      navigators.forEach(function(navigator) {
        EventHandler.remove(navigator, "click", _this.navigatorClickHandler);
      });
      var playIcon = this.element.querySelector("." + CLS_PLAY_PAUSE);
      if (playIcon) {
        EventHandler.remove(playIcon, "click", this.playButtonClickHandler);
      }
      EventHandler.remove(this.element.firstElementChild, "animationend", this.onTransitionEnd);
      EventHandler.remove(this.element.firstElementChild, "transitionend", this.onTransitionEnd);
      EventHandler.clearEvents(this.element);
      EventHandler.clearEvents(this.itemsContainer);
      EventHandler.remove(window, "resize", this.resizeHandler);
    };
    Carousel2.prototype.prev = function() {
      if (!this.loop && this.selectedIndex === 0) {
        return;
      }
      var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;
      this.setActiveSlide(index, "Previous");
      this.autoSlide();
    };
    Carousel2.prototype.next = function() {
      if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {
        return;
      }
      var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;
      this.setActiveSlide(index, "Next");
      this.autoSlide();
    };
    Carousel2.prototype.play = function() {
      var playIcon = this.element.querySelector("." + CLS_PLAY_ICON);
      if (this.showPlayButton && playIcon) {
        classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("pauseSlideTransition"));
      }
      this.setProperties({ autoPlay: true }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.applySlideInterval();
    };
    Carousel2.prototype.pause = function() {
      var pauseIcon = this.element.querySelector("." + CLS_PAUSE_ICON);
      if (this.showPlayButton && pauseIcon) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
        classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);
      }
      this.setProperties({ autoPlay: false }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.resetSlideInterval();
    };
    Carousel2.prototype.renderTemplates = function() {
      if (this.isAngular || this.isReact) {
        this.renderReactTemplates();
      }
    };
    Carousel2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Carousel2.prototype.destroy = function() {
      var _this = this;
      this.resetTemplates();
      if (this.touchModule) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      this.keyModule.destroy();
      this.keyModule = null;
      this.resetSlideInterval();
      this.destroyButtons();
      this.unWireEvents();
      [].slice.call(this.element.children).forEach(function(ele) {
        _this.element.removeChild(ele);
      });
      removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL6, CLS_SWIPE]);
      ["role", "style"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      this.itemsContainer = null;
      _super.prototype.destroy.call(this);
    };
    __decorate17([
      Collection([], CarouselItem)
    ], Carousel2.prototype, "items", void 0);
    __decorate17([
      Property("Slide")
    ], Carousel2.prototype, "animationEffect", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "previousButtonTemplate", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "nextButtonTemplate", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "indicatorsTemplate", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "playButtonTemplate", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "cssClass", void 0);
    __decorate17([
      Property([])
    ], Carousel2.prototype, "dataSource", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "itemTemplate", void 0);
    __decorate17([
      Property(0)
    ], Carousel2.prototype, "selectedIndex", void 0);
    __decorate17([
      Property("100%")
    ], Carousel2.prototype, "width", void 0);
    __decorate17([
      Property("100%")
    ], Carousel2.prototype, "height", void 0);
    __decorate17([
      Property(5e3)
    ], Carousel2.prototype, "interval", void 0);
    __decorate17([
      Property(true)
    ], Carousel2.prototype, "autoPlay", void 0);
    __decorate17([
      Property(true)
    ], Carousel2.prototype, "pauseOnHover", void 0);
    __decorate17([
      Property(true)
    ], Carousel2.prototype, "loop", void 0);
    __decorate17([
      Property(false)
    ], Carousel2.prototype, "showPlayButton", void 0);
    __decorate17([
      Property(true)
    ], Carousel2.prototype, "enableTouchSwipe", void 0);
    __decorate17([
      Property(true)
    ], Carousel2.prototype, "showIndicators", void 0);
    __decorate17([
      Property("Default")
    ], Carousel2.prototype, "indicatorsType", void 0);
    __decorate17([
      Property("Visible")
    ], Carousel2.prototype, "buttonsVisibility", void 0);
    __decorate17([
      Property(false)
    ], Carousel2.prototype, "partialVisible", void 0);
    __decorate17([
      Property(CarouselSwipeMode.Touch)
    ], Carousel2.prototype, "swipeMode", void 0);
    __decorate17([
      Property()
    ], Carousel2.prototype, "htmlAttributes", void 0);
    __decorate17([
      Event()
    ], Carousel2.prototype, "slideChanging", void 0);
    __decorate17([
      Event()
    ], Carousel2.prototype, "slideChanged", void 0);
    Carousel2 = __decorate17([
      NotifyPropertyChanges
    ], Carousel2);
    return Carousel2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_APPBAR = "e-appbar";
var CLS_HORIZONTAL_BOTTOM = "e-horizontal-bottom";
var CLS_STICKY = "e-sticky";
var CLS_PROMINENT = "e-prominent";
var CLS_DENSE = "e-dense";
var CLS_RTL7 = "e-rtl";
var CLS_LIGHT = "e-light";
var CLS_DARK = "e-dark";
var CLS_PRIMARY = "e-primary";
var CLS_INHERIT = "e-inherit";
var AppBar = (
  /** @class */
  function(_super) {
    __extends18(AppBar2, _super);
    function AppBar2(options, element) {
      return _super.call(this, options, element) || this;
    }
    AppBar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove(CLS_APPBAR);
      this.element.removeAttribute("style");
      this.element.removeAttribute("role");
    };
    AppBar2.prototype.getModuleName = function() {
      return "appbar";
    };
    AppBar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    AppBar2.prototype.preRender = function() {
    };
    AppBar2.prototype.render = function() {
      this.element.classList.add(CLS_APPBAR);
      if (this.element.tagName !== "HEADER") {
        this.element.setAttribute("role", "header");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (this.position === "Bottom") {
        this.element.classList.add(CLS_HORIZONTAL_BOTTOM);
      }
      if (this.isSticky) {
        this.element.classList.add(CLS_STICKY);
      }
      if (this.enableRtl) {
        this.element.classList.add(CLS_RTL7);
      }
      this.setHeightMode();
      this.setColorMode();
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    AppBar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "mode":
            removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);
            this.setHeightMode();
            break;
          case "position":
            if (this.position === "Bottom") {
              addClass([this.element], CLS_HORIZONTAL_BOTTOM);
            } else {
              removeClass([this.element], CLS_HORIZONTAL_BOTTOM);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "isSticky":
            if (this.isSticky) {
              addClass([this.element], CLS_STICKY);
            } else {
              removeClass([this.element], CLS_STICKY);
            }
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              if (!isNullOrUndefined(oldProp.htmlAttributes)) {
                var keys = Object.keys(oldProp.htmlAttributes);
                for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                  var key = keys_1[_b];
                  if (key === "class") {
                    removeClass([this.element], oldProp.htmlAttributes["" + key]);
                  } else {
                    this.element.removeAttribute(key);
                  }
                }
              }
              this.setHtmlAttributes(newProp.htmlAttributes, this.element);
            }
            break;
          case "colorMode":
            removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);
            this.setColorMode();
            break;
          case "enableRtl":
            if (this.enableRtl) {
              addClass([this.element], CLS_RTL7);
            } else {
              removeClass([this.element], CLS_RTL7);
            }
            break;
        }
      }
    };
    AppBar2.prototype.setHtmlAttributes = function(attribute, element) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        if (key === "class") {
          addClass([element], attribute["" + key]);
        } else {
          element.setAttribute(key, attribute["" + key]);
        }
      }
    };
    AppBar2.prototype.setHeightMode = function() {
      if (this.mode === "Prominent") {
        this.element.classList.add(CLS_PROMINENT);
      } else if (this.mode === "Dense") {
        this.element.classList.add(CLS_DENSE);
      }
    };
    AppBar2.prototype.setColorMode = function() {
      switch (this.colorMode) {
        case "Light":
          this.element.classList.add(CLS_LIGHT);
          break;
        case "Dark":
          this.element.classList.add(CLS_DARK);
          break;
        case "Primary":
          this.element.classList.add(CLS_PRIMARY);
          break;
        case "Inherit":
          this.element.classList.add(CLS_INHERIT);
          break;
      }
    };
    __decorate18([
      Property("Regular")
    ], AppBar2.prototype, "mode", void 0);
    __decorate18([
      Property("Top")
    ], AppBar2.prototype, "position", void 0);
    __decorate18([
      Property()
    ], AppBar2.prototype, "cssClass", void 0);
    __decorate18([
      Property(false)
    ], AppBar2.prototype, "isSticky", void 0);
    __decorate18([
      Property()
    ], AppBar2.prototype, "htmlAttributes", void 0);
    __decorate18([
      Property("Light")
    ], AppBar2.prototype, "colorMode", void 0);
    __decorate18([
      Event()
    ], AppBar2.prototype, "created", void 0);
    __decorate18([
      Event()
    ], AppBar2.prototype, "destroyed", void 0);
    AppBar2 = __decorate18([
      NotifyPropertyChanges
    ], AppBar2);
    return AppBar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper-base/stepper-base.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PROGRESSVALUE = "--progress-value";
var StepStatus;
(function(StepStatus2) {
  StepStatus2["NotStarted"] = "NotStarted";
  StepStatus2["InProgress"] = "InProgress";
  StepStatus2["Completed"] = "Completed";
})(StepStatus || (StepStatus = {}));
var Step = (
  /** @class */
  function(_super) {
    __extends19(Step2, _super);
    function Step2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate19([
      Property("")
    ], Step2.prototype, "cssClass", void 0);
    __decorate19([
      Property(false)
    ], Step2.prototype, "disabled", void 0);
    __decorate19([
      Property("")
    ], Step2.prototype, "iconCss", void 0);
    __decorate19([
      Property(null)
    ], Step2.prototype, "isValid", void 0);
    __decorate19([
      Property("")
    ], Step2.prototype, "label", void 0);
    __decorate19([
      Property(false)
    ], Step2.prototype, "optional", void 0);
    __decorate19([
      Property(StepStatus.NotStarted)
    ], Step2.prototype, "status", void 0);
    __decorate19([
      Property("")
    ], Step2.prototype, "text", void 0);
    return Step2;
  }(ChildProperty)
);
var StepperOrientation;
(function(StepperOrientation2) {
  StepperOrientation2["Horizontal"] = "Horizontal";
  StepperOrientation2["Vertical"] = "Vertical";
})(StepperOrientation || (StepperOrientation = {}));
var StepperBase = (
  /** @class */
  function(_super) {
    __extends19(StepperBase2, _super);
    function StepperBase2(options, element) {
      return _super.call(this, options, element) || this;
    }
    StepperBase2.prototype.preRender = function() {
    };
    StepperBase2.prototype.getModuleName = function() {
      return "stepperBase";
    };
    StepperBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    StepperBase2.prototype.render = function() {
    };
    StepperBase2.prototype.updateOrientaion = function(wrapper) {
      if (wrapper.classList.contains("e-horizontal") || wrapper.classList.contains("e-vertical")) {
        wrapper.classList.contains("e-horizontal") ? wrapper.classList.remove("e-horizontal") : wrapper.classList.remove("e-vertical");
      }
      wrapper.classList.add("e-" + this.orientation.toLocaleLowerCase());
    };
    StepperBase2.prototype.renderProgressBar = function(wrapper) {
      this.progressStep = this.createElement("div", { className: "e-stepper-progressbar" });
      this.progressbar = this.createElement("div", { className: "e-progressbar-value" });
      this.progressStep.appendChild(this.progressbar);
      wrapper.prepend(this.progressStep);
      this.progressbar.style.setProperty(PROGRESSVALUE, "0%");
      var beforeLabel = wrapper.querySelector("li").querySelector(".e-step-label-container");
      if (wrapper.classList.contains("e-vertical")) {
        if (wrapper.classList.contains("e-label-bottom") || wrapper.classList.contains("e-label-top")) {
          var stepsContainer = wrapper.querySelector(".e-stepper-steps");
          this.progressStep.style.setProperty("--progress-position", stepsContainer.offsetWidth / 2 + "px");
        } else {
          this.progressStep.style.setProperty("--progress-position", this.progressBarPosition / 2 - 1 + "px");
        }
      }
      if (beforeLabel && beforeLabel.classList.contains("e-label-before")) {
        this.progressStep.style.setProperty("--progress-position", this.progressBarPosition - 1 + 5 + "px");
      }
      if (wrapper.classList.contains("e-horizontal")) {
        this.setProgressPosition(wrapper);
      }
    };
    StepperBase2.prototype.setProgressPosition = function(wrapper, isResize) {
      var stepItemContainer = wrapper.querySelector(".e-step-container");
      var stepItemEle = stepItemContainer.firstElementChild;
      if (isResize != true) {
        var topPos = 0;
        if (wrapper.classList.contains("e-label-before")) {
          topPos = stepItemContainer.offsetParent.offsetHeight - stepItemEle.offsetHeight / 2 - 1;
        } else {
          topPos = stepItemEle.offsetHeight / 2;
        }
        this.progressStep.style.setProperty("--progress-top-position", topPos + "px");
      }
      var lastEle = wrapper.querySelector(".e-stepper-steps").lastChild.firstChild;
      if (wrapper.classList.contains("e-rtl")) {
        var leftPost = stepItemEle.offsetLeft + stepItemEle.offsetWidth - wrapper.querySelector(".e-stepper-steps").offsetWidth;
        this.progressStep.style.setProperty("--progress-left-position", Math.abs(leftPost) + "px");
        this.progressStep.style.setProperty("--progress-bar-width", Math.abs(lastEle.offsetLeft - stepItemEle.offsetLeft) + "px");
      } else {
        this.progressStep.style.setProperty("--progress-left-position", stepItemEle.offsetLeft + 1 + "px");
        this.progressStep.style.setProperty("--progress-bar-width", lastEle.offsetWidth + lastEle.offsetLeft - 2 - (stepItemEle.offsetLeft + 2) + "px");
      }
    };
    StepperBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    __decorate19([
      Collection([], Step)
    ], StepperBase2.prototype, "steps", void 0);
    __decorate19([
      Property("")
    ], StepperBase2.prototype, "cssClass", void 0);
    __decorate19([
      Property(false)
    ], StepperBase2.prototype, "readOnly", void 0);
    __decorate19([
      Property(StepperOrientation.Horizontal)
    ], StepperBase2.prototype, "orientation", void 0);
    __decorate19([
      Event()
    ], StepperBase2.prototype, "created", void 0);
    StepperBase2 = __decorate19([
      NotifyPropertyChanges
    ], StepperBase2);
    return StepperBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-navigations/src/stepper/stepper.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ITEMCONTAINER = "e-step-container";
var ITEMLIST = "e-stepper-steps";
var ICONCSS = "e-indicator";
var TEXTCSS = "e-step-text-container";
var STEPLABEL = "e-step-label-container";
var OPTIONAL = "e-step-label-optional";
var SELECTED3 = "e-step-selected";
var INPROGRESS = "e-step-inprogress";
var NOTSTARTED = "e-step-notstarted";
var FOCUS2 = "e-step-focus";
var COMPLETED = "e-step-completed";
var DISABLED3 = "e-step-disabled";
var READONLY = "e-stepper-readonly";
var PROGRESSVALUE2 = "--progress-value";
var RTL6 = "e-rtl";
var TEMPLATE = "e-step-template";
var LABELAFTER = "e-label-after";
var LABELBEFORE = "e-label-before";
var VERTICALSTEP = "e-vertical";
var HORIZSTEP = "e-horizontal";
var STEPICON = "e-step-icon";
var STEPTEXT = "e-step-text";
var TEXT = "e-text";
var STEPSLABEL = "e-step-label";
var LABEL = "e-label";
var STEPINDICATOR = "e-step-type-indicator";
var LABELINDICATOR = "e-step-type-label";
var INDICATORICON = "e-step-indicator";
var STEPPERTOOLTIP = "e-stepper-tooltip";
var STEPPERIPROGRESSTIP = "e-step-inprogress-tip";
var StepperAnimationSettings = (
  /** @class */
  function(_super) {
    __extends20(StepperAnimationSettings2, _super);
    function StepperAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate20([
      Property(true)
    ], StepperAnimationSettings2.prototype, "enable", void 0);
    __decorate20([
      Property(2e3)
    ], StepperAnimationSettings2.prototype, "duration", void 0);
    __decorate20([
      Property(0)
    ], StepperAnimationSettings2.prototype, "delay", void 0);
    return StepperAnimationSettings2;
  }(ChildProperty)
);
var StepLabelPosition;
(function(StepLabelPosition2) {
  StepLabelPosition2["Top"] = "Top";
  StepLabelPosition2["Bottom"] = "Bottom";
  StepLabelPosition2["Start"] = "Start";
  StepLabelPosition2["End"] = "End";
})(StepLabelPosition || (StepLabelPosition = {}));
var StepType;
(function(StepType2) {
  StepType2["Default"] = "Default";
  StepType2["Label"] = "Label";
  StepType2["Indicator"] = "Indicator";
})(StepType || (StepType = {}));
var Stepper = (
  /** @class */
  function(_super) {
    __extends20(Stepper2, _super);
    function Stepper2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.stepperItemElements = [];
      return _this;
    }
    Stepper2.prototype.preRender = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      var localeText = { optional: "Optional" };
      this.l10n = new L10n("stepper", localeText, this.locale);
      this.keyConfigs = {
        downarrow: "downarrow",
        leftarrow: "leftarrow",
        rightarrow: "rightarrow",
        uparrow: "uparrow",
        space: "space",
        enter: "enter",
        home: "home",
        end: "end",
        tab: "tab",
        shiftTab: "shift+tab",
        escape: "escape"
      };
      this.tooltipOpen = false;
    };
    Stepper2.prototype.getModuleName = function() {
      return "stepper";
    };
    Stepper2.prototype.render = function() {
      this.initialize();
      this.navigationHandler(this.activeStep, null, false);
      this.updateStepperStatus(true);
    };
    Stepper2.prototype.initialize = function() {
      var _this = this;
      this.element.setAttribute("aria-label", this.element.id);
      this.updatePosition();
      this.stepperItemList = this.createElement("ol", { className: ITEMLIST });
      this.updateOrientaion(this.element);
      this.updateStepType();
      this.element.appendChild(this.stepperItemList);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.trim().split(" "));
      }
      if (this.readOnly) {
        this.element.classList.add(READONLY);
      }
      if (this.enableRtl) {
        this.element.classList.add(RTL6);
      }
      this.wireEvents();
      this.updateTemplateFunction();
      this.renderItems();
      if (this.steps.length > 0) {
        if (this.steps.length > 1) {
          if (this.isAngular && this.template) {
            setTimeout(function() {
              _this.renderProgressBar(_this.element);
            });
          } else {
            this.renderProgressBar(this.element);
          }
        }
        this.checkValidStep();
        this.updateAnimation();
        this.updateTooltip();
        this.wireKeyboardEvent();
      }
    };
    Stepper2.prototype.updatePosition = function() {
      this.progressBarPosition = this.beforeLabelWidth = this.textEleWidth = 0;
    };
    Stepper2.prototype.renderDefault = function(index) {
      return !this.steps[parseInt(index.toString(), 10)].iconCss && !this.steps[parseInt(index.toString(), 10)].text && !this.steps[parseInt(index.toString(), 10)].label ? true : false;
    };
    Stepper2.prototype.updateAnimation = function() {
      var progressEle = this.element.querySelector(".e-progressbar-value");
      if (this.animation.enable) {
        if (this.animation.duration >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--duration", this.animation.duration + "ms");
          }
        }
        if (this.animation.delay >= 0) {
          if (progressEle) {
            progressEle.style.setProperty("--delay", this.animation.delay + "ms");
          }
        }
      } else {
        if (progressEle) {
          progressEle.style.setProperty("--delay", "0ms");
          progressEle.style.setProperty("--duration", "0ms");
        }
      }
    };
    Stepper2.prototype.updateStepType = function() {
      if (this.stepType.toLowerCase() === "indicator" || "label") {
        this.stepType.toLowerCase() !== "default" ? this.element.classList.add("e-step-type-" + this.stepType.toLowerCase()) : "";
        if ((this.stepType.toLowerCase() === "indicator" || "label") && this.labelContainer) {
          this.clearLabelPosition();
        }
      }
    };
    Stepper2.prototype.wireEvents = function() {
      var _this = this;
      EventHandler.add(window, "resize", function() {
        if (_this.stepperItemList && _this.progressbar && _this.element.classList.contains(HORIZSTEP)) {
          _this.setProgressPosition(_this.element, true);
        }
      }, this);
      EventHandler.add(window, "click", function() {
        _this.updateStepFocus();
      }, this);
    };
    Stepper2.prototype.updateStepFocus = function() {
      if (this.isKeyNavFocus) {
        this.isKeyNavFocus = false;
        var isFocus = this.element.querySelector("." + FOCUS2);
        if (isFocus) {
          isFocus.classList.remove(FOCUS2);
          this.element.classList.remove("e-steps-focus");
        }
      }
    };
    Stepper2.prototype.updateStepperStatus = function(isInitial) {
      for (var index = 0; index < this.steps.length; index++) {
        var item = this.steps[parseInt(index.toString(), 10)];
        var status_1 = item.status.toLowerCase();
        if (isInitial && this.activeStep === 0 && index === 0) {
          item.status = StepStatus.InProgress;
        }
        if (item && status_1 !== "notstarted" && index === this.activeStep) {
          for (var i = 0; i < this.steps.length; i++) {
            var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
            itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED, NOTSTARTED);
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            if (status_1 === "completed") {
              this.updateStatusClass(i, index, itemElement);
            } else {
              this.updateStatusClass(i, index, itemElement, true);
            }
            this.isProtectedOnChange = prevOnChange;
          }
        } else if (item && status_1 !== "notstarted" && index !== this.activeStep) {
          this.navigationHandler(this.activeStep, null, true);
        }
      }
    };
    Stepper2.prototype.updateStatusClass = function(currentStep, index, ele, isInprogress) {
      var stepItem = this.steps[parseInt(currentStep.toString(), 10)];
      if (currentStep < index) {
        ele.classList.add(COMPLETED);
        stepItem.status = StepStatus.Completed;
      } else if (currentStep === index) {
        ele.classList.add(isInprogress ? INPROGRESS : COMPLETED, SELECTED3);
      } else {
        ele.classList.add(NOTSTARTED);
      }
    };
    Stepper2.prototype.renderItems = function() {
      var _this = this;
      for (var index = 0; index < this.steps.length; index++) {
        this.stepperItemContainer = this.createElement("li", { className: ITEMCONTAINER });
        this.stepperItemContainer.classList[index === 0 ? "add" : "remove"](SELECTED3, INPROGRESS);
        this.stepperItemContainer.classList[index !== 0 ? "add" : "remove"](NOTSTARTED);
        if (this.element.classList.contains(HORIZSTEP)) {
          this.stepperItemContainer.style.setProperty("--max-width", 100 / this.steps.length + "%");
        }
        var stepSpan = this.createElement("span", { className: "e-step" });
        if (this.renderDefault(index) && (isNullOrUndefined(this.template) || this.template === "")) {
          var isIndicator = !this.element.classList.contains("e-step-type-default") && this.stepType.toLowerCase() === "indicator" ? true : false;
          if (isIndicator) {
            stepSpan.classList.add("e-icons", INDICATORICON);
          }
          if (!isIndicator) {
            stepSpan.classList.add("e-step-content");
            stepSpan.innerHTML = (index + 1).toString();
          }
          this.stepperItemContainer.appendChild(stepSpan);
        } else if (isNullOrUndefined(this.template) || this.template === "") {
          var isRender = true;
          var item = this.steps[parseInt(index.toString(), 10)];
          if (item.iconCss && (!item.text && !item.label || !this.element.classList.contains(LABELINDICATOR))) {
            var itemIcon = item.iconCss.trim().split(" ");
            stepSpan.classList.add(ICONCSS);
            for (var i = 0; i < itemIcon.length; i++) {
              stepSpan.classList.add(itemIcon[parseInt(i.toString(), 10)]);
            }
            this.stepperItemContainer.appendChild(stepSpan);
            this.stepperItemContainer.classList.add(STEPICON);
            if (this.element.classList.contains(HORIZSTEP) && (this.labelPosition.toLowerCase() === "start" || this.labelPosition.toLowerCase() === "end") && item.label || this.element.classList.contains(VERTICALSTEP) && (this.labelPosition.toLowerCase() === "top" || this.labelPosition.toLowerCase() === "bottom") && item.label) {
              this.element.classList.add("e-label-" + this.labelPosition.toLowerCase());
              var textSpan = this.createElement("span", { className: TEXTCSS + " " + TEXT });
              textSpan.innerText = item.label;
              this.stepperItemContainer.appendChild(textSpan);
              this.stepperItemContainer.classList.add(STEPTEXT);
              isRender = false;
            }
          }
          if (item.text && (!item.iconCss || !this.element.classList.contains(STEPINDICATOR)) && isRender && !(item.iconCss && item.label)) {
            if (!item.iconCss && this.element.classList.contains(STEPINDICATOR)) {
              this.checkValidState(item, stepSpan);
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              item.label = null;
              this.isProtectedOnChange = prevOnChange;
            } else {
              this.textContainer = this.createElement("span", { className: TEXTCSS });
              var textSpan = this.createElement("span", { className: TEXT });
              if (!item.label) {
                textSpan.innerText = item.text;
                item.isValid !== null && (!item.iconCss || this.element.classList.contains(LABELINDICATOR)) ? this.textContainer.appendChild(textSpan) : textSpan.classList.add(TEXTCSS);
                this.stepperItemContainer.appendChild(item.isValid !== null && (!item.iconCss || this.element.classList.contains(LABELINDICATOR)) ? this.textContainer : textSpan);
                this.stepperItemContainer.classList.add(STEPTEXT);
              }
              if (!item.iconCss || this.element.classList.contains(LABELINDICATOR)) {
                this.stepperItemContainer.classList.add("e-step-text-only");
                if (!item.label && item.isValid !== null) {
                  var iconSpan = this.createElement("span", { className: "e-step-validation-icon e-icons" });
                  this.textContainer.appendChild(iconSpan);
                }
              }
              if (item.label && this.element.classList.contains(LABELINDICATOR)) {
                textSpan.innerText = item.label;
              }
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              item.text = item.label ? null : item.text;
              this.isProtectedOnChange = prevOnChange;
            }
          }
          if (item.cssClass) {
            addClass([this.stepperItemContainer], item.cssClass.trim().split(" "));
          }
          if (item.disabled) {
            this.stepperItemContainer.classList[item.disabled ? "add" : "remove"](DISABLED3);
            attributes(this.stepperItemContainer, { "tabindex": "-1", "aria-disabled": "true" });
          }
          if (item.label && (!item.iconCss || !this.element.classList.contains(STEPINDICATOR)) && isRender) {
            if (!item.iconCss && !item.text && this.element.classList.contains(STEPINDICATOR)) {
              this.checkValidState(item, stepSpan, true);
            } else if (!(this.element.classList.contains(LABELINDICATOR) && item.text) || this.element.classList.contains(LABELINDICATOR) && item.label) {
              this.labelContainer = this.createElement("span", { className: STEPLABEL });
              var labelSpan = this.createElement("span", { className: LABEL });
              labelSpan.innerText = item.label;
              this.labelContainer.appendChild(labelSpan);
              this.stepperItemContainer.classList.add(STEPSLABEL);
              this.updateLabelPosition();
              if (!item.iconCss && !item.text || this.element.classList.contains(LABELINDICATOR)) {
                this.stepperItemContainer.classList.add("e-step-label-only");
                if (item.isValid !== null) {
                  var iconSpan = this.createElement("span", { className: "e-step-validation-icon e-icons" });
                  this.labelContainer.appendChild(iconSpan);
                }
              }
            }
          }
          if (item.optional) {
            var optionalSpan = this.createElement("span", { className: OPTIONAL });
            this.l10n.setLocale(this.locale);
            var optionalContent = this.l10n.getConstant("optional");
            optionalSpan.innerText = optionalContent;
            if (item.label && (this.labelContainer && (this.element.classList.contains(LABELAFTER) && !this.stepperItemContainer.classList.contains("e-step-label-only") || this.element.classList.contains(HORIZSTEP) && this.element.classList.contains(LABELBEFORE) && !this.stepperItemContainer.classList.contains("e-step-label-only"))) || this.element.classList.contains(VERTICALSTEP) && this.element.classList.contains(LABELBEFORE)) {
              this.labelContainer.appendChild(optionalSpan);
            } else {
              this.stepperItemContainer.appendChild(optionalSpan);
            }
          }
          if (item.isValid !== null) {
            item.isValid ? this.stepperItemContainer.classList.add("e-step-valid") : this.stepperItemContainer.classList.add("e-step-error");
          }
        }
        this.renderItemContent(index, false);
        if (this.stepperItemContainer.classList.contains(INPROGRESS)) {
          attributes(this.stepperItemContainer, { "tabindex": "0", "aria-current": "true" });
        } else {
          attributes(this.stepperItemContainer, { "tabindex": "-1" });
        }
        this.wireItemsEvents(this.stepperItemContainer, index);
        this.stepperItemElements.push(this.stepperItemContainer);
        var eventArgs = { element: this.stepperItemContainer, index };
        this.trigger("beforeStepRender", eventArgs, function(args) {
          _this.stepperItemList.appendChild(args.element);
        });
        if (this.isAngular && this.template) {
          setTimeout(function() {
            _this.calculateProgressBarPosition();
          });
        } else {
          this.calculateProgressBarPosition();
        }
      }
      if (this.element.classList.contains(VERTICALSTEP)) {
        if (this.element.classList.contains(LABELBEFORE)) {
          var listItems = this.stepperItemList.querySelectorAll("." + LABEL);
          for (var i = 0; i < listItems.length; i++) {
            var labelEle = listItems[parseInt(i.toString(), 10)];
            labelEle.style.setProperty("--label-width", this.beforeLabelWidth + 5 + "px");
          }
        }
      }
    };
    Stepper2.prototype.calculateProgressBarPosition = function() {
      var isBeforeLabel = this.element.classList.contains(LABELBEFORE) ? true : false;
      var isStepVertical = this.element.classList.contains(VERTICALSTEP) ? true : false;
      if (isStepVertical) {
        var iconOnly = this.stepperItemContainer.classList.contains(STEPICON) && !this.stepperItemContainer.classList.contains(STEPTEXT) && !this.stepperItemContainer.classList.contains(STEPSLABEL) ? true : false;
        var textEle = this.stepperItemContainer.querySelector("." + TEXTCSS);
        if (textEle) {
          this.textEleWidth = this.textEleWidth < textEle.offsetWidth ? textEle.offsetWidth : this.textEleWidth;
        }
        if (isBeforeLabel) {
          var itemWidth = void 0;
          var labelWidth = this.stepperItemContainer.querySelector("." + LABEL).offsetWidth + 15;
          if (this.beforeLabelWidth < labelWidth) {
            this.beforeLabelWidth = labelWidth;
          }
          if (this.element.querySelector("ol").lastChild.querySelector("." + ICONCSS)) {
            itemWidth = this.beforeLabelWidth + this.stepperItemContainer.querySelector("." + ICONCSS).offsetWidth / 2;
          } else if (this.stepperItemContainer.querySelector("." + TEXTCSS)) {
            itemWidth = this.beforeLabelWidth + this.stepperItemContainer.querySelector("." + TEXTCSS).offsetWidth / 2;
          }
          if (this.progressBarPosition < itemWidth) {
            this.progressBarPosition = itemWidth;
          }
        } else if (this.progressBarPosition < (iconOnly ? this.stepperItemContainer.offsetWidth : this.element.querySelector("ol").lastChild.firstChild.offsetWidth)) {
          this.progressBarPosition = iconOnly ? this.stepperItemContainer.offsetWidth : this.element.querySelector("ol").lastChild.firstChild.offsetWidth;
        }
      }
    };
    Stepper2.prototype.checkValidState = function(item, stepSpan, isLabel) {
      if (item.isValid == null) {
        stepSpan.classList.add("e-step-content");
        if (isLabel) {
          stepSpan.innerHTML = item.label;
        } else {
          stepSpan.innerHTML = item.label ? item.label : item.text;
        }
        this.stepperItemContainer.appendChild(stepSpan);
      } else {
        stepSpan.classList.add(ICONCSS);
        this.stepperItemContainer.appendChild(stepSpan);
        this.stepperItemContainer.classList.add(STEPICON);
      }
    };
    Stepper2.prototype.updateCurrentLabel = function() {
      var currentLabelPos;
      if (this.element.classList.contains(HORIZSTEP)) {
        currentLabelPos = this.labelPosition.toLowerCase() === "top" ? "before" : this.labelPosition.toLowerCase() === "bottom" ? "after" : this.labelPosition.toLowerCase();
      } else {
        currentLabelPos = this.labelPosition.toLowerCase() === "start" ? "before" : this.labelPosition.toLowerCase() === "end" ? "after" : this.labelPosition.toLowerCase();
      }
      return currentLabelPos;
    };
    Stepper2.prototype.updateLabelPosition = function() {
      this.clearLabelPosition();
      this.labelContainer.classList.add("e-label-" + this.updateCurrentLabel());
      if (this.labelPosition.toLowerCase() === "start" && this.orientation.toLowerCase() === "vertical") {
        this.stepperItemContainer.firstChild ? this.stepperItemContainer.firstChild.before(this.labelContainer) : this.stepperItemContainer.appendChild(this.labelContainer);
      } else {
        this.stepperItemContainer.appendChild(this.labelContainer);
      }
      this.element.classList.add("e-label-" + this.updateCurrentLabel());
    };
    Stepper2.prototype.clearLabelPosition = function() {
      var removeCss = this.labelContainer.classList.value.match(/(e-label-[after|before]+)/g);
      if (removeCss) {
        removeClass([this.labelContainer], removeCss);
        removeClass([this.element], removeCss);
      }
    };
    Stepper2.prototype.checkValidStep = function() {
      for (var index = 0; index < this.steps.length; index++) {
        var item = this.steps[parseInt(index.toString(), 10)];
        var itemElement = this.stepperItemElements[parseInt(index.toString(), 10)];
        if (item.isValid !== null) {
          var indicatorEle = void 0;
          var iconEle = void 0;
          if (this.element.classList.contains(STEPINDICATOR) && !item.iconCss) {
            indicatorEle = itemElement.querySelector("." + ICONCSS);
          } else {
            iconEle = itemElement.querySelector("." + ICONCSS);
          }
          var textLabelIcon = itemElement.querySelector(".e-step-validation-icon");
          var itemIcon = item.iconCss.trim().split(" ");
          var validStep = itemElement.classList.contains("e-step-valid");
          if (indicatorEle) {
            indicatorEle.classList.add("e-icons", validStep ? "e-check" : "e-circle-info");
          }
          if (iconEle) {
            for (var i = 0; i < itemIcon.length; i++) {
              iconEle.classList.remove(itemIcon[parseInt(i.toString(), 10)]);
            }
            iconEle.classList.add("e-icons", validStep ? "e-check" : "e-circle-info");
          }
          if (textLabelIcon) {
            textLabelIcon.classList.add(validStep ? "e-circle-check" : "e-circle-info");
            if (this.element.classList.contains(VERTICALSTEP)) {
              var labelEle = itemElement.querySelector("." + LABEL);
              var textEle = itemElement.querySelector("." + TEXT);
              var itemWidth = textEle ? textEle.offsetWidth + textEle.getBoundingClientRect().left : labelEle.offsetWidth + labelEle.getBoundingClientRect().left;
              var validationIcon = itemElement.querySelector(".e-step-validation-icon");
              validationIcon.style.setProperty("--icon-position", itemWidth + 20 + "px");
            }
          }
        }
      }
    };
    Stepper2.prototype.updateTooltip = function() {
      if (this.showTooltip) {
        this.tooltipObj = new Tooltip({
          target: ".e-step-container",
          windowCollision: true,
          opensOn: "Custom",
          cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP,
          position: "TopCenter"
        });
        this.tooltipObj.appendTo(this.stepperItemList);
      } else {
        if (!isNullOrUndefined(this.tooltipObj)) {
          this.tooltipObj.destroy();
          this.tooltipObj = null;
        }
      }
    };
    Stepper2.prototype.wireItemsEvents = function(itemElement, index) {
      var _this = this;
      EventHandler.add(itemElement, "click", function(e) {
        if (_this.linear) {
          var linearModeValue = index - _this.activeStep;
          if (Math.abs(linearModeValue) === 1) {
            _this.stepClickHandler(index, e, itemElement);
          }
        } else {
          _this.stepClickHandler(index, e, itemElement);
        }
      }, this);
      EventHandler.add(itemElement, "mouseover", function() {
        return _this.openStepperTooltip(index);
      }, this);
      EventHandler.add(itemElement, "mouseleave", function() {
        return _this.closeStepperTooltip();
      }, this);
    };
    Stepper2.prototype.openStepperTooltip = function(index) {
      var currentStep = this.steps[parseInt(index.toString(), 10)];
      if (this.showTooltip && (currentStep.label || currentStep.text)) {
        if (!this.tooltipOpen) {
          this.updateTooltipContent(index);
          this.tooltipObj.open(this.stepperItemElements[parseInt(index.toString(), 10)]);
          if (this.stepType.toLocaleLowerCase() !== "label" && (this.stepType.toLocaleLowerCase() === "indicator" || currentStep.label !== "" && currentStep.iconCss !== "")) {
            var tooltipPopupClass = currentStep.status.toLowerCase() === "inprogress" ? STEPPERTOOLTIP + " " + STEPPERIPROGRESSTIP + " " + (this.cssClass ? this.cssClass : "") : STEPPERTOOLTIP + " " + (this.cssClass ? this.cssClass : "");
            this.tooltipObj.setProperties({ cssClass: tooltipPopupClass.trim() });
          }
          this.tooltipOpen = true;
        }
      }
    };
    Stepper2.prototype.closeStepperTooltip = function() {
      if (this.tooltipOpen) {
        this.tooltipObj.close();
        this.tooltipOpen = false;
      }
    };
    Stepper2.prototype.updateTooltipContent = function(index) {
      if (this.showTooltip) {
        if (this.isReact) {
          this.clearTemplate(["stepperTooltipTemplate"]);
        }
        var content = void 0;
        var currentStep = this.steps[parseInt(index.toString(), 10)];
        if (this.tooltipTemplate) {
          content = this.createElement("span", { className: "e-stepper-tooltip-content" });
          var templateFunction = this.getTemplateFunction(this.tooltipTemplate);
          append(templateFunction({ value: currentStep }, this, "stepperTooltipTemplate", this.element.id + "tooltipTemplate", this.isStringTemplate), content);
          this.tooltipObj.setProperties({ content }, true);
        } else {
          var content_1 = currentStep.label ? currentStep.label : currentStep.text;
          this.tooltipObj.setProperties({ content: initializeCSPTemplate(function() {
            return content_1;
          }) }, true);
        }
        this.renderReactTemplates();
      }
    };
    Stepper2.prototype.stepClickHandler = function(index, e, itemElement) {
      var clickEventArgs = {
        element: itemElement,
        event: e,
        previousStep: this.activeStep,
        activeStep: index
      };
      this.trigger("stepClick", clickEventArgs);
      this.navigateToStep(index, e, itemElement, true);
    };
    Stepper2.prototype.updateTemplateFunction = function() {
      this.templateFunction = this.template ? this.getTemplateFunction(this.template) : null;
    };
    Stepper2.prototype.renderItemContent = function(index, isrerender) {
      var listItems = this.stepperItemList.querySelectorAll("li");
      if (isrerender) {
        this.removeItemContent(listItems[parseInt(index.toString(), 10)]);
      }
      if (this.template) {
        isrerender ? listItems[parseInt(index.toString(), 10)].classList.add(TEMPLATE) : this.stepperItemContainer.classList.add(TEMPLATE);
        var item = this.steps[parseInt(index.toString(), 10)];
        append(this.templateFunction({ step: item, currentStep: index }, this, "stepperTemplate", this.element.id + "_stepperTemplate", this.isStringTemplate), isrerender ? listItems[parseInt(index.toString(), 10)] : this.stepperItemContainer);
      }
      this.renderReactTemplates();
    };
    Stepper2.prototype.removeItemContent = function(ele) {
      ele.classList.remove(TEMPLATE);
      var firstChild = ele.firstElementChild;
      for (var i = 0; i < ele.childElementCount; i++) {
        firstChild.remove();
      }
    };
    Stepper2.prototype.updateContent = function() {
      if (this.isReact) {
        this.clearTemplate(["stepperTemplate"]);
      }
      for (var i = 0; i < this.steps.length; i++) {
        this.renderItemContent(i, true);
      }
    };
    Stepper2.prototype.getTemplateFunction = function(template) {
      if (typeof template === "string") {
        var content = "";
        try {
          var tempEle = select(template);
          if (tempEle) {
            content = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
          } else {
            content = template;
          }
        } catch (e) {
          content = template;
        }
        return compile(content);
      } else {
        return compile(template);
      }
    };
    Stepper2.prototype.navigateToStep = function(index, e, itemElement, isInteracted, isUpdated) {
      var _this = this;
      var eventArgs = {
        element: itemElement,
        event: e,
        isInteracted,
        previousStep: this.activeStep,
        activeStep: index,
        cancel: false
      };
      if (isUpdated != false) {
        var previousStep_1 = this.activeStep;
        this.trigger("stepChanging", eventArgs, function(args) {
          if (args.cancel) {
            return;
          }
          _this.navigationHandler(index);
          var eventArgs2 = {
            element: itemElement,
            event: e,
            isInteracted,
            previousStep: previousStep_1,
            activeStep: _this.activeStep
          };
          _this.trigger("stepChanged", eventArgs2);
        });
      } else {
        this.navigationHandler(index);
      }
    };
    Stepper2.prototype.navigationHandler = function(index, stepStatus, isUpdated) {
      index = index >= this.steps.length - 1 ? this.steps.length - 1 : index;
      var Itemslength = this.stepperItemElements.length;
      if (index >= 0 && index < Itemslength - 1) {
        index = this.stepperItemElements[parseInt(index.toString(), 10)].classList.contains(DISABLED3) ? this.activeStep : index;
      }
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.activeStep = index;
      this.isProtectedOnChange = prevOnChange;
      for (var i = 0; i < this.steps.length; i++) {
        var itemElement = this.stepperItemElements[parseInt(i.toString(), 10)];
        var item = this.steps[parseInt(i.toString(), 10)];
        itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED, NOTSTARTED);
        if (i === this.activeStep) {
          itemElement.classList.add(SELECTED3);
        }
        if (this.activeStep >= 0 && this.progressbar) {
          if (this.element.classList.contains(HORIZSTEP)) {
            if ((this.element.classList.contains(LABELBEFORE) || this.element.classList.contains(LABELAFTER)) && !this.element.classList.contains(STEPINDICATOR) && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(STEPICON)) {
              var progressPos = this.element.querySelector(".e-stepper-progressbar");
              var selectedEle = this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].firstChild;
              var value = this.activeStep === 0 ? 0 : (selectedEle.offsetLeft - progressPos.offsetLeft + selectedEle.offsetWidth / 2) / progressPos.offsetWidth * 100;
              if (this.element.classList.contains(RTL6)) {
                var elementPos = this.stepperItemElements[0].firstChild;
                value = (progressPos.offsetWidth - selectedEle.offsetLeft + Math.abs(elementPos.offsetLeft + elementPos.offsetWidth - this.stepperItemList.offsetWidth)) / progressPos.offsetWidth * 100;
                this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
              } else {
                this.progressbar.style.setProperty(PROGRESSVALUE2, value + "%");
              }
            } else {
              var totalLiWidth = 0;
              var activeLiWidth = 0;
              for (var j = 0; j < this.stepperItemElements.length; j++) {
                totalLiWidth = totalLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth;
                if (j <= this.activeStep) {
                  if (j < this.activeStep) {
                    activeLiWidth = activeLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth;
                  } else if (j == this.activeStep && j !== 0) {
                    activeLiWidth = activeLiWidth + this.stepperItemElements[parseInt(j.toString(), 10)].offsetWidth / 2;
                  }
                }
              }
              var spaceWidth = (this.stepperItemList.offsetWidth - totalLiWidth) / (this.stepperItemElements.length - 1);
              var progressValue = (activeLiWidth + spaceWidth * this.activeStep) / this.stepperItemList.offsetWidth * 100;
              this.progressbar.style.setProperty(PROGRESSVALUE2, progressValue + "%");
            }
          } else {
            this.progressbar.style.setProperty(PROGRESSVALUE2, 100 / (this.steps.length - 1) * index + "%");
          }
        } else if (this.activeStep < 0 && this.progressbar) {
          this.progressbar.style.setProperty(PROGRESSVALUE2, "0%");
        }
        if (i === this.activeStep) {
          itemElement.classList.add(INPROGRESS);
        } else if (this.activeStep > 0 && i < this.activeStep) {
          itemElement.classList.add(COMPLETED);
        } else {
          itemElement.classList.add(NOTSTARTED);
        }
        if (itemElement.classList.contains(INPROGRESS)) {
          attributes(itemElement, { "tabindex": "0", "aria-current": "true" });
        } else {
          attributes(itemElement, { "tabindex": "-1", "aria-current": "false" });
        }
        var prevOnChange_1 = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        if (isUpdated !== false) {
          if (i < this.activeStep || this.steps.length - 1 === this.activeStep && item.status.toLowerCase() === "completed") {
            item.status = StepStatus.Completed;
          } else if (i === this.activeStep) {
            item.status = StepStatus.InProgress;
          } else if (i > this.activeStep) {
            item.status = StepStatus.NotStarted;
          }
          if (stepStatus && this.activeStep === i) {
            item.status = stepStatus;
          }
          if (item.status.toLowerCase() === "completed") {
            itemElement.classList.remove(SELECTED3, INPROGRESS, NOTSTARTED);
            itemElement.classList.add(COMPLETED);
          }
          if (item.status.toLowerCase() === "notstarted") {
            itemElement.classList.remove(SELECTED3, INPROGRESS, COMPLETED);
            itemElement.classList.add(NOTSTARTED);
          }
        }
        this.isProtectedOnChange = prevOnChange_1;
        if (this.renderDefault(i) && this.element.classList.contains(STEPINDICATOR)) {
          if (itemElement.classList.contains(COMPLETED)) {
            itemElement.firstChild.classList.remove("e-icons", "e-step-indicator");
            itemElement.firstChild.classList.add(ICONCSS, "e-icons", "e-check");
          } else if (itemElement.classList.contains(INPROGRESS) || itemElement.classList.contains(NOTSTARTED)) {
            itemElement.firstChild.classList.remove(ICONCSS, "e-icons", "e-check");
            itemElement.firstChild.classList.add("e-icons", "e-step-indicator");
          }
        }
      }
    };
    Stepper2.prototype.removeItemElements = function() {
      for (var i = 0; i < this.stepperItemElements.length; i++) {
        remove(this.stepperItemElements[parseInt(i.toString(), 10)]);
      }
      this.stepperItemElements = [];
    };
    Stepper2.prototype.nextStep = function() {
      if (this.activeStep !== this.steps.length - 1) {
        this.navigateToStep(this.activeStep + 1, null, null, false);
      }
    };
    Stepper2.prototype.previousStep = function() {
      if (this.activeStep > 0) {
        this.navigateToStep(this.activeStep - 1, null, null, false);
      }
    };
    Stepper2.prototype.reset = function() {
      if (this.activeStep !== 0) {
        var isDisabled = this.stepperItemElements[0].classList.contains(DISABLED3) ? true : false;
        this.navigateToStep(isDisabled ? -1 : 0, null, null, false);
      }
    };
    Stepper2.prototype.updateElementClassArray = function() {
      var classArray = [
        RTL6,
        READONLY,
        "e-steps-focus",
        LABELAFTER,
        LABELBEFORE,
        "e-label-top",
        "e-label-bottom",
        "e-label-start",
        "e-label-end",
        STEPINDICATOR,
        LABELINDICATOR,
        VERTICALSTEP,
        HORIZSTEP
      ];
      removeClass([this.element], classArray);
    };
    Stepper2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      EventHandler.remove(window, "resize", function() {
        if (_this.stepperItemList && _this.progressbar) {
          _this.setProgressPosition(_this.element, true);
        }
      });
      EventHandler.remove(window, "click", function() {
        _this.updateStepFocus();
      });
      this.removeItemElements();
      this.clearTemplate();
      if (this.stepperItemList) {
        remove(this.stepperItemList);
      }
      this.stepperItemList = null;
      if (this.progressStep) {
        remove(this.progressStep);
      }
      this.progressStep = null;
      this.progressbar = null;
      this.progressBarPosition = null;
      this.stepperItemContainer = null;
      this.textContainer = null;
      this.labelContainer = null;
      this.updateElementClassArray();
      this.element.removeAttribute("aria-label");
      if (this.showTooltip) {
        this.tooltipObj.destroy();
        this.tooltipObj = null;
      }
      if (this.keyboardModuleStepper) {
        this.keyboardModuleStepper.destroy();
      }
      this.keyboardModuleStepper = null;
    };
    Stepper2.prototype.wireKeyboardEvent = function() {
      this.keyboardModuleStepper = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    Stepper2.prototype.keyActionHandler = function(e) {
      if (this.readOnly) {
        return;
      }
      switch (e.action) {
        case "uparrow":
        case "downarrow":
        case "leftarrow":
        case "rightarrow":
        case "tab":
        case "shiftTab":
          this.handleNavigation(this.enableRtl && this.element.classList.contains(HORIZSTEP) ? e.action === "leftarrow" || e.action === "shiftTab" || e.action === "uparrow" : e.action === "rightarrow" || e.action === "tab" || e.action === "downarrow", e);
          break;
        case "space":
        case "enter":
        case "escape":
          this.handleNavigation(null, e);
          break;
        case "home":
        case "end":
          this.handleNavigation(null, e, this.enableRtl);
          break;
      }
    };
    Stepper2.prototype.handleNavigation = function(isNextStep, e, isRTL) {
      this.isKeyNavFocus = true;
      this.element.classList.add("e-steps-focus");
      var focusedEle = this.element.querySelector("." + FOCUS2);
      if (!focusedEle) {
        focusedEle = this.element.querySelector("." + SELECTED3);
      }
      var stepItems = Array.prototype.slice.call(this.stepperItemList.children);
      var index = stepItems.indexOf(focusedEle);
      if (e.action === "tab" || e.action === "shiftTab" || e.action === "downarrow" || e.action === "uparrow" || e.action === "space" || e.action === "home" || e.action === "end") {
        if (e.action === "tab" && index === stepItems.length - 1 || e.action === "shiftTab" && index === 0) {
          if (focusedEle.classList.contains(FOCUS2)) {
            this.updateStepFocus();
            return;
          }
        } else {
          e.preventDefault();
        }
      }
      if (e.action === "escape") {
        stepItems[parseInt(index.toString(), 10)].classList.remove(FOCUS2);
        this.element.classList.remove("e-steps-focus");
      }
      if (!(e.action === "space" || e.action === "enter")) {
        var prevIndex = index;
        index = isNextStep ? index + 1 : index - 1;
        while (index >= 0 && index < stepItems.length && stepItems[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
          index = isNextStep ? index + 1 : index - 1;
        }
        index = index < 0 ? 0 : index > stepItems.length - 1 ? stepItems.length - 1 : index;
        if (stepItems[parseInt(prevIndex.toString(), 10)].classList.contains(FOCUS2)) {
          stepItems[parseInt(prevIndex.toString(), 10)].classList.remove(FOCUS2);
        }
        if (e.action === "home" || e.action === "end") {
          if (e.action === "home") {
            isRTL ? index = stepItems.length - 1 : index = 0;
          } else {
            isRTL ? index = 0 : index = stepItems.length - 1;
          }
        }
        if (index >= 0 && index < stepItems.length) {
          stepItems[parseInt(index.toString(), 10)].classList.add(FOCUS2);
        }
      } else if (e.action === "space" || e.action === "enter") {
        var isupdateFocus = false;
        if (this.linear) {
          var linearModeValue = this.activeStep - index;
          if (Math.abs(linearModeValue) === 1) {
            this.navigateToStep(index, null, null, true);
            isupdateFocus = true;
          }
        } else {
          this.navigateToStep(index, null, null, true);
          isupdateFocus = true;
        }
        if (isupdateFocus) {
          this.updateStepFocus();
          this.stepperItemElements[index].focus();
        }
      }
    };
    Stepper2.prototype.renderStepperItems = function(isUpdate, isStepType) {
      this.updateElementClassArray();
      this.removeItemElements();
      this.element.querySelector(".e-stepper-progressbar").remove();
      isUpdate ? this.updatePosition() : null;
      isStepType ? this.updateStepType() : null;
      this.readOnly ? !this.element.classList.contains(READONLY) ? this.element.classList.add(READONLY) : null : null;
      this.enableRtl ? !this.element.classList.contains(RTL6) ? this.element.classList.add(RTL6) : null : null;
      this.updateOrientaion(this.element);
      this.renderItems();
      this.renderProgressBar(this.element);
      this.checkValidStep();
      this.updateAnimation();
      this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
    };
    Stepper2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "steps": {
            if (!(newProp.steps instanceof Array && oldProp.steps instanceof Array)) {
              var stepCounts = Object.keys(newProp.steps);
              for (var i = 0; i < stepCounts.length; i++) {
                var index = parseInt(Object.keys(newProp.steps)[i], 10);
                var changedPropsCount = Object.keys(newProp.steps[index]).length;
                for (var j = 0; j < changedPropsCount; j++) {
                  var property = Object.keys(newProp.steps[index])[j];
                  if (property === "status") {
                    if (this.activeStep === index) {
                      this.navigationHandler(index, newProp.steps[index].status);
                    } else {
                      this.steps[index].status = oldProp.steps[index].status;
                    }
                  } else {
                    this.removeItemElements();
                    this.renderItems();
                    this.updateStepperStatus();
                  }
                  this.checkValidStep();
                }
              }
            } else {
              this.renderStepperItems(true, true);
            }
            break;
          }
          case "orientation":
            this.updateOrientaion(this.element);
            this.renderStepperItems(true);
            break;
          case "activeStep":
            this.activeStep = newProp.activeStep > this.steps.length - 1 || newProp.activeStep < -1 ? oldProp.activeStep : this.activeStep;
            if (this.activeStep >= 0 && this.stepperItemElements[parseInt(this.activeStep.toString(), 10)].classList.contains(DISABLED3)) {
              this.activeStep = oldProp.activeStep;
            }
            if (this.linear) {
              var linearModeValue = oldProp.activeStep - this.activeStep;
              if (Math.abs(linearModeValue) === 1) {
                this.navigateToStep(this.activeStep, null, null, true);
              }
            } else {
              this.navigateToStep(this.activeStep, null, this.stepperItemElements[this.activeStep], true);
            }
            break;
          case "enableRtl":
            this.element.classList[this.enableRtl ? "add" : "remove"](RTL6);
            break;
          case "readOnly":
            this.element.classList[this.readOnly ? "add" : "remove"](READONLY);
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.trim().split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.trim().split(" "));
            }
            if (this.tooltipObj) {
              this.tooltipObj.setProperties({ cssClass: this.cssClass ? STEPPERTOOLTIP + " " + this.cssClass : STEPPERTOOLTIP });
            }
            break;
          case "labelPosition":
            this.renderStepperItems(true);
            break;
          case "showTooltip":
            this.updateTooltip();
            break;
          case "stepType":
            this.renderStepperItems(true, true);
            break;
          case "template":
            this.updateTemplateFunction();
            this.updateContent();
            break;
          case "animation":
            this.updateAnimation();
            break;
        }
      }
    };
    __decorate20([
      Property(0)
    ], Stepper2.prototype, "activeStep", void 0);
    __decorate20([
      Complex({}, StepperAnimationSettings)
    ], Stepper2.prototype, "animation", void 0);
    __decorate20([
      Property(false)
    ], Stepper2.prototype, "linear", void 0);
    __decorate20([
      Property(false)
    ], Stepper2.prototype, "showTooltip", void 0);
    __decorate20([
      Property("")
    ], Stepper2.prototype, "template", void 0);
    __decorate20([
      Property("")
    ], Stepper2.prototype, "tooltipTemplate", void 0);
    __decorate20([
      Property(StepLabelPosition.Bottom)
    ], Stepper2.prototype, "labelPosition", void 0);
    __decorate20([
      Property(StepType.Default)
    ], Stepper2.prototype, "stepType", void 0);
    __decorate20([
      Event()
    ], Stepper2.prototype, "stepChanged", void 0);
    __decorate20([
      Event()
    ], Stepper2.prototype, "stepChanging", void 0);
    __decorate20([
      Event()
    ], Stepper2.prototype, "stepClick", void 0);
    __decorate20([
      Event()
    ], Stepper2.prototype, "beforeStepRender", void 0);
    Stepper2 = __decorate20([
      NotifyPropertyChanges
    ], Stepper2);
    return Stepper2;
  }(StepperBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL7 = "e-rtl";
var DROPDOWNTREE = "e-ddt";
var HIDDENELEMENT = "e-ddt-hidden";
var DROPDOWNICON = "e-input-group-icon e-ddt-icon e-icons";
var SHOW_CHIP = "e-show-chip";
var SHOW_CLEAR = "e-show-clear";
var SHOW_DD_ICON = "e-show-dd-icon";
var CHIP_INPUT = "e-chip-input";
var INPUTFOCUS = "e-input-focus";
var INPUTGROUP2 = "e-input-group";
var ICONANIMATION = "e-icon-anim";
var CLOSEICON_CLASS = "e-clear-icon e-icons";
var CHIP_WRAPPER = "e-chips-wrapper";
var CHIP_COLLECTION = "e-chips-collection";
var CHIP = "e-chips";
var CHIP_CONTENT = "e-chipcontent";
var CHIP_CLOSE = "e-chips-close";
var HIDEICON = "e-icon-hide";
var DDTHIDEICON = "e-ddt-icon-hide";
var POPUP_CLASS = "e-ddt e-popup";
var PARENTITEM2 = "e-list-parent";
var CONTENT2 = "e-popup-content";
var DROPDOWN = "e-dropdown";
var DISABLED4 = "e-disabled";
var ICONS2 = "e-icons";
var CHECKALLPARENT = "e-selectall-parent";
var CHECKALLHIDE = "e-hide-selectall";
var BIGGER2 = "e-bigger";
var SMALL2 = "e-small";
var ALLTEXT = "e-all-text";
var CHECKBOXFRAME2 = "e-frame";
var CHECK2 = "e-check";
var CHECKBOXWRAP2 = "e-checkbox-wrapper";
var FILTERWRAP = "e-filter-wrap";
var DDTICON = "e-ddt-icon";
var FOOTER = "e-ddt-footer";
var HEADER2 = "e-ddt-header";
var NODATACONTAINER = "e-ddt-nodata";
var NODATA = "e-no-data";
var HEADERTEMPLATE = "HeaderTemplate";
var FOOTERTEMPLATE = "FooterTemplate";
var NORECORDSTEMPLATE = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE = "ActionFailureTemplate";
var CUSTOMTEMPLATE = "CustomTemplate";
var REMAIN_WRAPPER = "e-remain";
var OVERFLOW_VIEW = "e-overflow";
var SHOW_TEXT = "e-show-text";
var TOTAL_COUNT_WRAPPER = "e-total-count";
var REMAIN_COUNT = "e-wrap-count";
var Fields = (
  /** @class */
  function(_super) {
    __extends21(Fields2, _super);
    function Fields2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property("child")
    ], Fields2.prototype, "child", void 0);
    __decorate21([
      Property([])
    ], Fields2.prototype, "dataSource", void 0);
    __decorate21([
      Property("expanded")
    ], Fields2.prototype, "expanded", void 0);
    __decorate21([
      Property("hasChildren")
    ], Fields2.prototype, "hasChildren", void 0);
    __decorate21([
      Property("htmlAttributes")
    ], Fields2.prototype, "htmlAttributes", void 0);
    __decorate21([
      Property("iconCss")
    ], Fields2.prototype, "iconCss", void 0);
    __decorate21([
      Property("imageUrl")
    ], Fields2.prototype, "imageUrl", void 0);
    __decorate21([
      Property("parentValue")
    ], Fields2.prototype, "parentValue", void 0);
    __decorate21([
      Property(null)
    ], Fields2.prototype, "query", void 0);
    __decorate21([
      Property("selectable")
    ], Fields2.prototype, "selectable", void 0);
    __decorate21([
      Property("selected")
    ], Fields2.prototype, "selected", void 0);
    __decorate21([
      Property(null)
    ], Fields2.prototype, "tableName", void 0);
    __decorate21([
      Property("text")
    ], Fields2.prototype, "text", void 0);
    __decorate21([
      Property("tooltip")
    ], Fields2.prototype, "tooltip", void 0);
    __decorate21([
      Property("value")
    ], Fields2.prototype, "value", void 0);
    return Fields2;
  }(ChildProperty)
);
var TreeSettings = (
  /** @class */
  function(_super) {
    __extends21(TreeSettings2, _super);
    function TreeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property(false)
    ], TreeSettings2.prototype, "autoCheck", void 0);
    __decorate21([
      Property("Auto")
    ], TreeSettings2.prototype, "expandOn", void 0);
    __decorate21([
      Property(false)
    ], TreeSettings2.prototype, "loadOnDemand", void 0);
    return TreeSettings2;
  }(ChildProperty)
);
var DropDownTree = (
  /** @class */
  function(_super) {
    __extends21(DropDownTree2, _super);
    function DropDownTree2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.filterTimer = null;
      _this.isFilteredData = false;
      _this.isFilterRestore = false;
      _this.selectedData = [];
      _this.filterDelayTime = 300;
      _this.isClicked = false;
      _this.isCheckAllCalled = false;
      _this.isFromFilterChange = false;
      return _this;
    }
    DropDownTree2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    DropDownTree2.prototype.getLocaleName = function() {
      return "drop-down-tree";
    };
    DropDownTree2.prototype.preRender = function() {
      this.inputFocus = false;
      this.isPopupOpen = false;
      this.isFirstRender = true;
      this.isInitialized = false;
      this.currentText = null;
      this.currentValue = null;
      this.oldValue = null;
      this.removeValue = false;
      this.selectedText = [];
      this.treeItems = [];
      this.dataValue = null;
      this.isNodeSelected = false;
      this.isDynamicChange = false;
      this.clearIconWidth = 0;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE;
      this.customTemplateId = "" + this.element.id + CUSTOMTEMPLATE;
      this.keyConfigs = {
        escape: "escape",
        altUp: "alt+uparrow",
        altDown: "alt+downarrow",
        tab: "tab",
        shiftTab: "shift+tab",
        end: "end",
        enter: "enter",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        ctrlA: "ctrl+A"
      };
    };
    DropDownTree2.prototype.render = function() {
      var isTree = select("#" + this.element.id + "_tree", document);
      if (isTree) {
        var popupDiv = select("#" + this.element.id + "_options", document);
        detach(popupDiv ? popupDiv : isTree.parentElement);
      }
      if (this.element.tagName === "INPUT") {
        this.inputEle = this.element;
        if (isNullOrUndefined(this.inputEle.getAttribute("role"))) {
          this.inputEle.setAttribute("aria-expanded", "false");
          this.inputEle.setAttribute("role", "combobox");
          this.inputEle.setAttribute("aria-haspopup", "tree");
          this.inputEle.setAttribute("aria-controls", this.element.id + "_options");
        }
        if (isNullOrUndefined(this.inputEle.getAttribute("type"))) {
          this.inputEle.setAttribute("type", "text");
        }
      } else {
        this.inputEle = this.createElement("input", { attrs: { role: "textbox", type: "text" } });
        this.element.parentElement.insertBefore(this.inputEle, this.element);
      }
      this.inputObj = Input.createInput({
        element: this.inputEle,
        floatLabelType: this.floatLabelType,
        buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,
        properties: {
          readonly: true,
          placeholder: this.placeholder,
          enabled: this.enabled,
          cssClass: this.cssClass,
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputWrapper = this.inputObj.container;
      if (!this.inputWrapper.classList.contains(INPUTGROUP2)) {
        this.inputWrapper.classList.add(INPUTGROUP2);
      }
      if (this.showDropDownIcon) {
        this.inputWrapper.classList.add(SHOW_DD_ICON);
      }
      if (this.element.tagName === this.getDirective()) {
        this.element.appendChild(this.inputWrapper);
      }
      this.createHiddenElement();
      this.createClearIcon();
      this.inputWrapper.classList.add(DROPDOWNTREE);
      this.setElementWidth(this.width);
      this.updateDataAttribute();
      this.setHTMLAttributes();
      this.setAttributes();
      this.popupDiv = this.createElement("div", { className: CONTENT2 });
      this.popupDiv.classList.add(DROPDOWN);
      this.tree = this.createElement("div", { id: this.element.id + "_tree" });
      this.popupDiv.appendChild(this.tree);
      document.body.appendChild(this.popupDiv);
      this.wireTreeEvents();
      addClass([this.popupDiv], DDTHIDEICON);
      this.renderTree();
      this.isRemoteData = this.fields.dataSource instanceof DataManager;
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter") {
          this.createChip();
        }
        if (!this.wrapText && this.mode !== "Custom") {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
          if (this.mode !== "Box") {
            addClass([this.overFlowWrapper], SHOW_TEXT);
          }
        }
      }
      if (!this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
      }
      this.wireEvents();
      var firstUl = select("." + PARENTITEM2, this.treeObj.element);
      if (firstUl && firstUl.getAttribute("aria-multiselectable")) {
        firstUl.removeAttribute("aria-multiselectable");
      }
      this.oldValue = this.value;
      this.isInitialized = true;
      this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate || this.noRecordsTemplate || this.customTemplate;
      this.renderComplete();
    };
    DropDownTree2.prototype.hideCheckAll = function(flag) {
      var checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector("." + CHECKALLPARENT) : null;
      if (!isNullOrUndefined(checkAllEle)) {
        if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {
          addClass([checkAllEle], CHECKALLHIDE);
        } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {
          removeClass([checkAllEle], CHECKALLHIDE);
        }
      }
    };
    DropDownTree2.prototype.renderFilter = function() {
      this.filterContainer = this.createElement("div", {
        id: this.element.id + "_filter_wrap",
        className: FILTERWRAP
      });
      var filterInput2 = this.createElement("input", {
        id: this.element.id + "_filter",
        attrs: { autocomplete: "off", "aria-label": this.filterBarPlaceholder }
      });
      this.filterContainer.appendChild(filterInput2);
      prepend([this.filterContainer], this.popupEle);
      this.filterObj = new TextBox({
        value: "",
        showClearButton: true,
        placeholder: this.filterBarPlaceholder,
        input: this.filterChangeHandler.bind(this)
      });
      this.filterObj.appendTo("#" + this.element.id + "_filter");
    };
    DropDownTree2.prototype.filterChangeHandler = function(args) {
      var _this = this;
      if (!isNullOrUndefined(args.value)) {
        window.clearTimeout(this.filterTimer);
        this.filterTimer = window.setTimeout(function() {
          _this.filterHandler(args.value, args.event);
        }, this.filterDelayTime);
      }
    };
    DropDownTree2.prototype.isChildObject = function() {
      if (typeof this.treeObj.fields.child === "object") {
        return true;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.filterHandler = function(value, event2) {
      var _this = this;
      this.isFromFilterChange = true;
      if (!this.isFilteredData) {
        if (this.isRemoteData) {
          this.treeObj.expandedNodes = [];
        }
        this.treeData = this.treeObj.getTreeData();
      }
      var filterFields = this.cloneFields(this.fields);
      var args = {
        cancel: false,
        preventDefaultAction: false,
        event: event2,
        text: value,
        fields: filterFields
      };
      this.trigger("filtering", args, function(args2) {
        if (!args2.cancel) {
          var flag = false;
          var fields = void 0;
          _this.isFilteredData = true;
          if (value === "") {
            _this.isFilteredData = false;
            _this.isFilterRestore = true;
            fields = _this.cloneFields(_this.fields);
          } else if (args2.preventDefaultAction) {
            fields = args2.fields;
          } else {
            if (_this.treeDataType === 1) {
              fields = _this.selfReferencefilter(value, args2.fields);
            } else {
              if (_this.fields.dataSource instanceof DataManager) {
                fields = _this.remoteDataFilter(value, args2.fields);
                fields.child = _this.fields.child;
                _this.treeObj.fields = _this.getTreeFields(args2.fields);
                _this.treeObj.dataBind();
                flag = true;
              } else {
                fields = _this.nestedFilter(value, args2.fields);
              }
            }
          }
          _this.hideCheckAll(_this.isFilteredData);
          if (flag) {
            return;
          }
          if (_this.isRemoteData) {
            if (_this.isChildObject()) {
              fields.child = _this.fields.child;
            } else {
              fields = args2.fields;
            }
          }
          _this.treeObj.fields = _this.getTreeFields(fields);
          _this.treeObj.dataBind();
          if (_this.hasTemplate && _this.portals && _this.treeObj.portals) {
            for (var i = 0; i < _this.treeObj.portals.length; i++) {
              if (_this.portals.indexOf(_this.treeObj.portals[i]) == -1) {
                _this.portals.push(_this.treeObj.portals[i]);
              }
            }
            if (_this.isReact) {
              _this.renderReactTemplates();
            }
          }
        }
      });
    };
    DropDownTree2.prototype.remoteDataFilter = function(value, filteredFields) {
      var _this = this;
      filteredFields.dataSource = this.treeData.map(function(item) {
        return _this.remoteChildFilter(value, item);
      }).filter(function(filteredChild) {
        return !isNullOrUndefined(filteredChild);
      });
      return filteredFields;
    };
    DropDownTree2.prototype.remoteChildFilter = function(value, node, isChild, isChildFiltering) {
      var children = this.isChildObject() ? node["child"] : node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node, isChild, isChildFiltering) ? node : null;
      }
      var matchedChildren = [];
      for (var i = 0; i < children.length; i++) {
        var filteredChild = this.remoteChildFilter(value, children[i], true, true);
        if (!isNullOrUndefined(filteredChild)) {
          matchedChildren.push(filteredChild);
        }
      }
      var filteredItems = Object.assign({}, node);
      isChildFiltering = false;
      if (matchedChildren.length !== 0) {
        filteredItems.child = matchedChildren;
      } else {
        filteredItems.child = null;
        filteredItems = this.isMatchedNode(value, filteredItems) ? filteredItems : null;
      }
      return filteredItems;
    };
    DropDownTree2.prototype.nestedFilter = function(value, filteredFields) {
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        var filteredChild = this.nestedChildFilter(value, this.treeData[i]);
        if (!isNullOrUndefined(filteredChild)) {
          matchedDataSource.push(filteredChild);
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.nestedChildFilter = function(value, node) {
      var children = node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node) ? node : null;
      } else {
        var matchedChildren = [];
        for (var i = 0; i < children.length; i++) {
          var filteredChild = this.nestedChildFilter(value, children[i]);
          if (!isNullOrUndefined(filteredChild)) {
            matchedChildren.push(filteredChild);
          }
        }
        var filteredItems = Object.assign({}, node);
        if (matchedChildren.length !== 0) {
          filteredItems[this.fields.child] = matchedChildren;
          return filteredItems;
        } else {
          filteredItems[this.fields.child] = null;
          return this.isMatchedNode(value, filteredItems) ? filteredItems : null;
        }
      }
    };
    DropDownTree2.prototype.selfReferencefilter = function(value, filteredFields) {
      var matchedData = [];
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        if (this.isMatchedNode(value, this.treeData[i])) {
          matchedData.push(this.treeData[i]);
        }
      }
      for (var i = 0; i < matchedData.length; i++) {
        if (matchedDataSource.indexOf(matchedData[i]) === -1) {
          matchedDataSource.push(matchedData[i]);
          var parentId = matchedData[i][this.fields.parentValue];
          while (!isNullOrUndefined(parentId)) {
            var parent_1 = null;
            for (var j = 0; j < this.treeData.length; j++) {
              var value_1 = this.treeData[j][this.fields.value];
              if (!isNullOrUndefined(value_1) && value_1 === parentId) {
                parent_1 = this.treeData[j];
                break;
              }
            }
            if (!isNullOrUndefined(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {
              matchedDataSource.push(parent_1);
              parentId = parent_1[this.fields.parentValue];
            } else {
              break;
            }
          }
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.isMatchedNode = function(value, node, isChild, isChildFiltering) {
      var checkValue;
      var isObjectValue = isChild && isChildFiltering && this.isChildObject();
      checkValue = isObjectValue ? node[this.fields.child.text] : node[this.fields.text];
      if (!checkValue) {
        var tempChild = this.fields.child;
        while (!node[tempChild.text]) {
          tempChild = tempChild.child;
        }
        checkValue = node[tempChild.text];
      }
      if (this.ignoreCase) {
        checkValue = checkValue.toLowerCase();
        value = value.toLowerCase();
      }
      if (this.ignoreAccent) {
        checkValue = DataUtil.ignoreDiacritics(checkValue);
        value = DataUtil.ignoreDiacritics(value);
      }
      if (this.filterType === "StartsWith") {
        return checkValue.slice(0, value.length) === value;
      } else if (this.filterType === "EndsWith") {
        return checkValue.slice(-value.length) === value;
      } else {
        return checkValue.indexOf(value) !== -1;
      }
    };
    DropDownTree2.prototype.wireEvents = function() {
      EventHandler.add(this.inputWrapper, "mouseup", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper, "blur", this.focusOut, this);
      EventHandler.add(this.inputWrapper, "mousemove", this.mouseIn, this);
      EventHandler.add(this.inputWrapper, "mouseout", this.onMouseLeave, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      this.keyboardModule = new KeyboardEvents(this.inputWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireTreeEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.tree, {
        keyAction: this.treeAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireCheckAllWrapperEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.checkAllParent, {
        keyAction: this.checkAllAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.unWireEvents = function() {
      EventHandler.remove(this.inputWrapper, "mouseup", this.dropDownClick);
      EventHandler.remove(this.inputWrapper, "focus", this.focusIn);
      EventHandler.remove(this.inputWrapper, "blur", this.focusOut);
      EventHandler.remove(this.inputWrapper, "mousemove", this.mouseIn);
      EventHandler.remove(this.inputWrapper, "mouseout", this.onMouseLeave);
      EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      EventHandler.remove(window, "resize", this.windowResize);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
    };
    DropDownTree2.prototype.dropDownClick = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
        return;
      }
      if (this.isPopupOpen) {
        this.hidePopup();
      } else {
        this.focusIn(e);
        this.renderPopup();
      }
      this.showOverAllClear();
    };
    DropDownTree2.prototype.mouseIn = function() {
      if (this.enabled || !this.readonly) {
        this.showOverAllClear();
      }
    };
    DropDownTree2.prototype.onMouseLeave = function() {
      if (!this.inputFocus) {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
    };
    DropDownTree2.prototype.getDirective = function() {
      return "EJS-DROPDOWNTREE";
    };
    DropDownTree2.prototype.focusOut = function(e) {
      if (!this.enabled || this.readonly || !this.inputFocus) {
        return;
      }
      if ((Browser.isIE || Browser.info.name === "edge") && e.target === this.inputWrapper) {
        return;
      }
      var target = e.relatedTarget;
      if (target !== this.inputEle && isNullOrUndefined(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {
        this.onFocusOut(e);
      }
    };
    DropDownTree2.prototype.onFocusOut = function(event2) {
      this.inputFocus = false;
      if (this.isPopupOpen) {
        this.hidePopup();
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
      }
      if (this.showClearButton) {
        this.clearIconWidth = select(".e-clear-icon", this.inputWrapper).offsetWidth;
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      removeClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (this.mode !== "Delimiter" && this.mode !== "Custom") {
          if (this.chipWrapper && this.mode === "Default") {
            addClass([this.chipWrapper], HIDEICON);
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          }
        }
        if (!this.wrapText && isValue) {
          this.updateView();
        }
      }
      if (this.changeOnBlur) {
        this.triggerChangeEvent(event2);
      }
      this.removeValue = false;
      this.oldValue = this.value;
      this.trigger("blur");
    };
    DropDownTree2.prototype.updateView = function() {
      if (!this.showCheckBox && !this.allowMultiSelection || this.mode === "Custom" || this.inputFocus) {
        return;
      }
      if (this.mode !== "Box") {
        addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);
      } else {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      if (this.value && this.value.length !== 0) {
        if (this.inputWrapper.contains(this.chipWrapper)) {
          addClass([this.chipWrapper], HIDEICON);
        }
        addClass([this.inputEle], CHIP_INPUT);
        this.updateOverFlowView();
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.triggerChangeEvent = function(event2) {
      var isEqual = this.ddtCompareValues(this.oldValue, this.value);
      if ((!isEqual || this.isChipDelete) && !this.removeValue) {
        var eventArgs = {
          e: event2,
          oldValue: this.oldValue,
          value: this.value,
          isInteracted: event2 ? true : false,
          element: this.element
        };
        this.trigger("change", eventArgs);
        this.oldValue = this.value;
      }
    };
    DropDownTree2.prototype.ddtCompareValues = function(oldValue, newValue) {
      if (oldValue === null || newValue === null) {
        var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;
        return isValid;
      } else if (oldValue.length !== newValue.length) {
        return false;
      }
      for (var i = 0; i < oldValue.length; i++) {
        if (oldValue[i] !== newValue[i]) {
          return false;
        }
      }
      return true;
    };
    DropDownTree2.prototype.focusIn = function(e) {
      if (!this.enabled || this.readonly || this.inputFocus) {
        return;
      }
      this.showOverAllClear();
      this.inputFocus = true;
      addClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter" && this.inputFocus) {
          if (this.chipWrapper && (this.value && this.value.length !== 0)) {
            removeClass([this.chipWrapper], HIDEICON);
            addClass([this.inputEle], CHIP_INPUT);
          }
          addClass([this.inputWrapper], SHOW_CHIP);
          if (this.popupObj) {
            this.popupObj.refreshPosition();
          }
        }
        if (!this.wrapText && this.mode !== "Custom") {
          if (this.inputWrapper.contains(this.overFlowWrapper)) {
            addClass([this.overFlowWrapper], HIDEICON);
          }
          if (this.mode === "Delimiter") {
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          } else {
            addClass([this.inputWrapper], SHOW_CHIP);
          }
          removeClass([this.inputWrapper], SHOW_TEXT);
          this.ensurePlaceHolder();
        }
      }
      var args = { isInteracted: e ? true : false, event: e };
      this.trigger("focus", args);
    };
    DropDownTree2.prototype.treeAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              _this.inputWrapper.focus();
              e.preventDefault();
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "tab":
            case "shiftTab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
              if (!_this.showCheckBox) {
                _this.isValueChange = true;
                _this.keyEventArgs = e;
              }
              break;
            case "space":
              _this.isValueChange = true;
              _this.keyEventArgs = e;
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                _this.selectAll(true);
              }
              break;
            case "moveRight":
            case "moveLeft":
            case "shiftDown":
            case "moveDown":
            case "ctrlDown":
            case "csDown":
            case "shiftUp":
            case "moveUp":
            case "ctrlUp":
            case "csUp":
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
          }
        } else {
          e.stopImmediatePropagation();
        }
      });
    };
    DropDownTree2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "shiftTab":
            case "tab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              if (_this.inputFocus) {
                _this.onFocusOut();
              }
              break;
            case "altDown":
              if (!_this.isPopupOpen) {
                _this.showPopup();
                e.preventDefault();
              }
              break;
            case "moveDown":
              if (_this.showSelectAll && _this.showCheckBox) {
                _this.checkAllParent.focus();
              }
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.checkAllAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              _this.clickHandler(e);
              break;
            case "moveDown":
              var focusedElement = _this.treeObj.element.querySelector("li");
              focusedElement.focus();
              addClass([focusedElement], ["e-node-focus"]);
          }
        }
      });
    };
    DropDownTree2.prototype.windowResize = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ width: this.setWidth() });
        this.popupObj.refreshPosition();
      }
    };
    DropDownTree2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputWrapper, "form");
      if (formElement && e.target === formElement) {
        this.isDynamicChange = true;
        this.setProperties({ value: null }, true);
        this.resetValue(true);
        this.isDynamicChange = false;
      }
    };
    DropDownTree2.prototype.getAriaAttributes = function() {
      return {};
    };
    DropDownTree2.prototype.updateOverFlowView = function() {
      this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
      removeClass([this.overFlowWrapper], HIDEICON);
      if (this.value && this.value.length) {
        var data = "";
        var overAllContainer = void 0;
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        this.overFlowWrapper.innerHTML = "";
        var l10nLocale = { overflowCountTemplate: "+${count} more..", totalCountTemplate: "${count} selected" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        var remainContent = this.l10n.getConstant("overflowCountTemplate");
        var totalContent = this.l10n.getConstant("totalCountTemplate");
        var remainElement = this.createElement("span", { className: REMAIN_WRAPPER });
        this.overFlowWrapper.appendChild(remainElement);
        remainElement.innerText = remainContent.replace("${count}", this.value.length.toString());
        var remainSize = remainElement.offsetWidth;
        remove(remainElement);
        if (this.showDropDownIcon) {
          downIconWidth = select("." + DDTICON, this.inputWrapper).offsetWidth;
        }
        if (!isNullOrUndefined(this.value)) {
          if (this.mode !== "Box") {
            for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.overFlowWrapper.innerHTML;
              if (this.enableHtmlSanitizer) {
                this.overFlowWrapper.innerText = SanitizeHtmlHelper.sanitize(data);
              } else {
                this.overFlowWrapper.innerHTML = data;
              }
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  index = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - index;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);
                  textArr.pop();
                  this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = index;
              } else if (index === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          } else {
            addClass([this.chipWrapper], HIDEICON);
            var ele = this.chipWrapper.cloneNode(true);
            var chips = selectAll("." + CHIP, ele);
            for (var i = 0; i < chips.length; i++) {
              temp = this.overFlowWrapper.innerHTML;
              this.overFlowWrapper.appendChild(chips[i]);
              data = this.overFlowWrapper.innerHTML;
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  i = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - i;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = i;
              } else if (i === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          }
        }
        if (remaining > 0) {
          this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));
        }
        if (this.mode === "Box" && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([remainElement], REMAIN_COUNT);
        }
      } else {
        this.overFlowWrapper.innerHTML = "";
        addClass([this.overFlowWrapper], HIDEICON);
      }
      this.updateDelimMode();
    };
    DropDownTree2.prototype.updateRemainTemplate = function(remainElement, remaining, remainContent, totalContent) {
      if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === "") {
        this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);
      }
      remainElement.innerHTML = "";
      remainElement.innerText = this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box") ? remainContent.replace("${count}", remaining.toString()) : totalContent.replace("${count}", remaining.toString());
      if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box")) {
        removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
      } else {
        addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
        removeClass([this.overFlowWrapper], REMAIN_COUNT);
      }
      return remainElement;
    };
    DropDownTree2.prototype.getOverflowVal = function(index) {
      var selectedData = this.getSelectedData(this.value[index]);
      return getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
    };
    DropDownTree2.prototype.updateDelimMode = function() {
      if (this.mode !== "Box") {
        if (select("." + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([this.overFlowWrapper], REMAIN_COUNT);
          addClass([this.overFlowWrapper], SHOW_TEXT);
        } else {
          this.overFlowWrapper.classList.remove(REMAIN_COUNT);
          removeClass([this.overFlowWrapper], REMAIN_COUNT);
        }
      } else if (select("." + REMAIN_WRAPPER, this.overFlowWrapper)) {
        this.overFlowWrapper.classList.remove(REMAIN_COUNT);
      }
    };
    DropDownTree2.prototype.createHiddenElement = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "class": HIDDENELEMENT, "tabindex": "-1", "multiple": "" }
        });
      } else {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "tabindex": "-1", "class": HIDDENELEMENT }
        });
      }
      prepend([this.hiddenElement], this.inputWrapper);
      this.validationAttribute();
    };
    DropDownTree2.prototype.createClearIcon = function() {
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS
      });
      addClass([this.overAllClear], HIDEICON);
      removeClass([this.inputWrapper], SHOW_CLEAR);
      if (this.showClearButton) {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.validationAttribute = function() {
      var name = this.inputEle.getAttribute("name") ? this.inputEle.getAttribute("name") : this.inputEle.getAttribute("id");
      this.hiddenElement.setAttribute("name", name);
      this.inputEle.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        var attr = this.inputEle.getAttribute(attributes2[i]);
        if (attr) {
          this.hiddenElement.setAttribute(attributes2[i], attr);
          this.inputEle.removeAttribute(attributes2[i]);
        }
      }
    };
    DropDownTree2.prototype.createChip = function() {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.chipWrapper = this.createElement("span", {
          className: CHIP_WRAPPER
        });
        this.chipCollection = this.createElement("span", {
          className: CHIP_COLLECTION
        });
        this.chipWrapper.appendChild(this.chipCollection);
        this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);
        addClass([this.inputWrapper], SHOW_CHIP);
        var isValid = this.getValidMode();
        if (isValid && this.value !== null && (this.value && this.value.length !== 0)) {
          addClass([this.inputEle], CHIP_INPUT);
        } else if (this.value === null || this.value && this.value.length === 0 || this.checkWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.getValidMode = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return this.mode === "Box" ? true : this.mode === "Default" && this.inputFocus ? true : false;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.createSelectAllWrapper = function() {
      this.checkAllParent = this.createElement("div", {
        className: CHECKALLPARENT,
        attrs: { "tabindex": "0" }
      });
      this.selectAllSpan = this.createElement("span", {
        className: ALLTEXT
      });
      this.selectAllSpan.textContent = "";
      var ele = closest(this.element, "." + BIGGER2);
      var touchClass = isNullOrUndefined(ele) ? "" : SMALL2;
      this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });
      this.checkBoxElement.setAttribute("role", "checkbox");
      this.checkAllParent.appendChild(this.checkBoxElement);
      this.checkAllParent.appendChild(this.selectAllSpan);
      this.setLocale();
      EventHandler.add(this.checkAllParent, "mouseup", this.clickHandler, this);
      this.wireCheckAllWrapperEvents();
    };
    DropDownTree2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.target;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP2);
      if (!isNullOrUndefined(this.checkWrapper)) {
        this.isClicked = true;
        var checkElement = select("." + CHECKBOXFRAME2, this.checkWrapper);
        this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK2) ? "uncheck" : "check", e);
        this.isClicked = false;
      }
      e.preventDefault();
    };
    DropDownTree2.prototype.changeState = function(wrapper, state, e) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME2)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.add(CHECK2);
        ariaState = "true";
        if (!this.isReverseUpdate) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(true);
      } else if (state === "uncheck" && frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.remove(CHECK2);
        ariaState = "false";
        if (!this.isReverseUpdate) {
          this.treeObj.uncheckAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(false);
      }
      this.setMultiSelect();
      this.ensurePlaceHolder();
      ariaState = state === "check" ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        wrapper.parentElement.setAttribute("aria-checked", ariaState);
      }
    };
    DropDownTree2.prototype.setLocale = function(unSelect) {
      if (!this.selectAllSpan) {
        return;
      }
      if (this.selectAllText !== "Select All" || this.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.unSelectAllText : this.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this, templateName, null, !this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;
      }
    };
    DropDownTree2.prototype.setAttributes = function() {
      this.inputEle.setAttribute("tabindex", "-1");
      var id = this.element.getAttribute("id");
      this.hiddenElement.id = id + "_hidden";
      this.inputWrapper.setAttribute("tabindex", "0");
      attributes(this.inputWrapper, this.getAriaAttributes());
    };
    DropDownTree2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            this.inputWrapper.classList.add(this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.setProperties({ enabled: false }, true);
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.setProperties({ readonly: true }, true);
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "aria-placeholder",
              "role",
              "autocorrect",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputEle);
              } else {
                this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
    };
    DropDownTree2.prototype.updateDataAttribute = function() {
      var value = this.htmlAttributes;
      var invalidAttr = ["class", "style", "id", "type"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownTree2.prototype.showOverAllClear = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.overAllClear) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (isValue && this.showClearButton) {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        } else {
          addClass([this.overAllClear], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CLEAR);
        }
      }
    };
    DropDownTree2.prototype.setTreeValue = function() {
      if (this.value !== null && this.value.length !== 0) {
        var data = void 0;
        if (this.showCheckBox || this.allowMultiSelection) {
          for (var i = 0; i < this.value.length; i++) {
            data = this.treeObj.getTreeData(this.value[i])[0];
            if (isNullOrUndefined(data)) {
              this.value.splice(this.value.indexOf(this.value[i]), 1);
            }
          }
          if (this.value.length !== 0) {
            this.setValidValue();
          }
        } else {
          data = this.treeObj.getTreeData(this.value[0])[0];
          if (!isNullOrUndefined(data)) {
            this.setProperties({ text: data[this.fields.text] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ value: this.currentValue }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setTreeText = function() {
      if (this.value !== null && !this.isInitialized) {
        return;
      }
      if (this.text !== null) {
        var data = void 0;
        var valArr = [];
        if (this.showCheckBox || this.allowMultiSelection) {
          var textArr = this.text.split(this.delimiterChar);
          for (var i = 0; i < textArr.length; i++) {
            data = this.getItems(textArr[i]);
            if (!isNullOrUndefined(data)) {
              valArr.push(data[this.fields.value].toString());
            }
          }
          if (valArr.length !== 0) {
            this.oldValue = this.value;
            this.setProperties({ value: valArr }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        } else {
          data = this.getItems(this.text);
          if (!isNullOrUndefined(data)) {
            this.oldValue = this.value;
            this.setProperties({ value: [data[this.fields.value].toString()] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setSelectedValue = function() {
      if (this.value != null) {
        return;
      }
      if (!this.isInitialized) {
        this.oldValue = this.value;
        if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {
          this.setProperties({ value: this.treeObj.selectedNodes }, true);
          if (this.allowMultiSelection) {
            this.updateMode();
          }
        } else if (this.showCheckBox && this.treeObj.checkedNodes) {
          if (this.treeObj.checkedNodes.length > 0) {
            this.setProperties({ value: this.treeObj.checkedNodes }, true);
            setValue("selectedNodes", [], this.treeObj);
            this.treeObj.dataBind();
            this.updateMode();
          }
        }
        this.updateSelectedValues();
        this.currentText = this.text;
        this.currentValue = this.value;
      }
    };
    DropDownTree2.prototype.setValidValue = function() {
      var _this = this;
      if (!this.showCheckBox && !this.allowMultiSelection) {
        Input.setValue(this.text, this.inputEle, this.floatLabelType);
        var id = this.value[0].toString();
        if (this.treeObj.selectedNodes[0] !== id) {
          setValue("selectedNodes", [id], this.treeObj);
        }
      } else {
        if (this.showCheckBox) {
          var difference = this.value.filter(function(e) {
            return _this.treeObj.checkedNodes.indexOf(e) === -1;
          });
          if (difference.length > 0 || this.treeSettings.autoCheck) {
            this.treeObj.checkedNodes = this.value.slice();
            this.treeObj.dataBind();
            this.setMultiSelect();
          }
        } else {
          this.treeObj.selectedNodes = this.value.slice();
          this.selectedText = [];
          this.updateSelectedValues();
        }
        this.treeObj.dataBind();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (this.isInitialized) {
        this.triggerChangeEvent();
      }
    };
    DropDownTree2.prototype.getItems = function(givenText) {
      var data;
      if (this.treeDataType === 1) {
        for (var i = 0; i < this.treeItems.length; i++) {
          var text = getValue(this.fields.text, this.treeItems[i]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {
            data = this.treeItems[i];
            break;
          }
        }
      } else {
        data = this.getNestedItems(this.treeItems, this.fields, givenText);
      }
      return data;
    };
    DropDownTree2.prototype.getNestedItems = function(data, field, givenText) {
      var newData;
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        var dataId = getValue(this.fields.text, data[i]);
        if (data[i] && dataId && dataId.toString() === givenText) {
          return data[i];
        } else if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, data[i]))) {
          var childData = getValue(field.child, data[i]);
          newData = this.getNestedItems(childData, this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", data[i]))) {
          var child = "child";
          newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        }
      }
      return newData;
    };
    DropDownTree2.prototype.getChildType = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.renderTree = function() {
      this.treeObj = new TreeView({
        fields: this.getTreeFields(this.fields),
        enableRtl: this.enableRtl,
        nodeSelected: this.onNodeSelected.bind(this),
        nodeChecked: this.onNodeChecked.bind(this),
        nodeChecking: this.beforeCheck.bind(this),
        nodeExpanded: this.onNodeExpanded.bind(this),
        actionFailure: this.onActionFailure.bind(this),
        nodeClicked: this.onNodeClicked.bind(this),
        dataBound: this.OnDataBound.bind(this),
        allowMultiSelection: this.allowMultiSelection,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        showCheckBox: this.showCheckBox,
        autoCheck: this.treeSettings.autoCheck,
        sortOrder: this.sortOrder,
        expandOn: this.treeSettings.expandOn,
        loadOnDemand: this.treeSettings.loadOnDemand,
        nodeSelecting: this.onBeforeSelect.bind(this),
        nodeTemplate: this.itemTemplate
      });
      this.treeObj.root = this.root ? this.root : this;
      this.treeObj.appendTo("#" + this.tree.id);
    };
    DropDownTree2.prototype.renderPopup = function() {
      var _this = this;
      if (this.isFilteredData) {
        this.filterObj.value = "";
        this.treeObj.fields = this.getTreeFields(this.fields);
        this.isFilterRestore = true;
        this.isFilteredData = false;
        this.hideCheckAll(false);
      }
      var isCancelled = false;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          addClass([_this.inputWrapper], [ICONANIMATION]);
          if (_this.isFirstRender) {
            _this.popupEle = _this.createElement("div", {
              id: _this.element.id + "_options",
              className: POPUP_CLASS + " " + (_this.cssClass != null ? _this.cssClass : "")
            });
            _this.popupEle.setAttribute("role", "region");
            _this.popupEle.setAttribute("aria-label", _this.element.id);
            document.body.appendChild(_this.popupEle);
            _this.createPopup(_this.popupEle);
          } else {
            _this.popupEle = _this.popupObj.element;
            if (_this.isReact && _this.isFilterRestore) {
              _this.treeObj.refresh();
              _this.isFilteredData = true;
              _this.popupEle.removeChild(_this.filterContainer);
            }
          }
        } else {
          isCancelled = true;
        }
        if (_this.isFirstRender && !isCancelled || _this.isFilteredData) {
          _this.isFilteredData = false;
          prepend([_this.popupDiv], _this.popupEle);
          removeClass([_this.popupDiv], DDTHIDEICON);
          if (_this.allowFiltering) {
            _this.renderFilter();
          }
          if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {
            _this.createSelectAllWrapper();
            _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);
          }
          if (_this.headerTemplate) {
            _this.setHeaderTemplate();
          }
          if (_this.footerTemplate) {
            _this.setFooterTemplate();
          }
          _this.isFirstRender = false;
          if (_this.hasTemplate && _this.portals) {
            _this.portals = _this.portals.concat(_this.treeObj.portals);
            _this.renderReactTemplates();
          }
        }
        if (!isCancelled) {
          attributes(_this.inputEle, { "aria-expanded": "true" });
          _this.popupObj.show(null, _this.zIndex === 1e3 ? _this.inputEle : null);
          removeClass([_this.popupEle], DDTHIDEICON);
          _this.updatePopupHeight();
          _this.popupObj.refreshPosition();
          if (!(_this.showCheckBox && _this.showSelectAll) && (!_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0)) {
            var focusedElement = _this.treeObj.element.querySelector("li");
            focusedElement.focus();
            addClass([focusedElement], ["e-node-focus"]);
          }
          if (_this.checkSelectAll && _this.checkBoxElement) {
            var wrap = closest(_this.checkBoxElement, "." + CHECKBOXWRAP2);
            _this.changeState(wrap, "check");
            _this.checkSelectAll = false;
          }
          if (_this.allowFiltering) {
            removeClass([_this.inputWrapper], [INPUTFOCUS]);
            _this.filterObj.element.focus();
          }
          var eventArgs = { popup: _this.popupObj };
          _this.trigger("open", eventArgs);
        }
      });
    };
    DropDownTree2.prototype.updatePopupHeight = function() {
      if (this.isFirstRender) {
        return;
      }
      var popupHeight = this.getHeight();
      this.popupEle.style.maxHeight = popupHeight;
      if (this.allowFiltering) {
        var height = Math.round(this.filterContainer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.headerTemplate) {
        var height = Math.round(this.header.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.showCheckBox && this.showSelectAll && !this.popupDiv.classList.contains(NODATA)) {
        var height = Math.round(this.checkAllParent.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.footerTemplate) {
        var height = Math.round(this.footer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);
      border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);
      popupHeight = formatUnit(parseInt(popupHeight, 10) - border + "px");
      this.popupDiv.style.maxHeight = popupHeight;
    };
    DropDownTree2.prototype.createPopup = function(element) {
      var _this = this;
      if (this.isFirstRender) {
        this.popupObj = new Popup(element, {
          width: this.setWidth(),
          targetType: "relative",
          collision: { X: "flip", Y: "flip" },
          relateTo: this.inputWrapper,
          zIndex: this.zIndex,
          enableRtl: this.enableRtl,
          position: { X: "left", Y: "bottom" },
          close: function() {
            _this.isPopupOpen = false;
          },
          open: function() {
            EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
            _this.isPopupOpen = true;
          },
          targetExitViewport: function() {
            if (!Browser.isDevice) {
              _this.hidePopup();
            }
          }
        });
      }
    };
    DropDownTree2.prototype.setElementWidth = function(inputWidth) {
      var ddElement = this.inputWrapper;
      if (!isNullOrUndefined(inputWidth)) {
        if (typeof inputWidth === "number") {
          ddElement.style.width = formatUnit(inputWidth);
        } else if (typeof inputWidth === "string") {
          ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);
        }
      }
    };
    DropDownTree2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + "px";
      } else if (typeof this.popupWidth === "string") {
        width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;
      }
      return width;
    };
    DropDownTree2.prototype.getHeight = function() {
      var height = formatUnit(this.popupHeight);
      if (height.indexOf("%") > -1) {
        height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + "px";
      } else if (typeof this.popupHeight === "string") {
        height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;
      }
      return height;
    };
    DropDownTree2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var isTree = closest(target, "." + PARENTITEM2);
      var isFilter = closest(target, "." + FILTERWRAP);
      var isHeader = closest(target, "." + HEADER2);
      var isFooter = closest(target, "." + FOOTER);
      var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, ".e-ddt .e-popup") || matches(target, ".e-ddt .e-treeview");
      if (this.isPopupOpen && (!isNullOrUndefined(this.inputWrapper) && this.inputWrapper.contains(target) || isTree || isScroller || isHeader || isFooter) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME2)))) {
        this.isDocumentClick = false;
        e.preventDefault();
      } else if (!isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {
        this.focusOut(e);
      }
    };
    DropDownTree2.prototype.onActionFailure = function(e) {
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      addClass([this.popupDiv], NODATA);
    };
    DropDownTree2.prototype.OnDataBound = function(args) {
      this.treeItems = args.data;
      if (this.treeItems.length <= 0) {
        this.l10nUpdate();
        addClass([this.popupDiv], NODATA);
        this.hideCheckAll(true);
      } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {
        removeClass([this.popupDiv], NODATA);
        this.hideCheckAll(false);
      }
      this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);
      if (this.isFirstRender && this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
        this.treeObj.element.focus();
      }
      var eventArgs = { data: args.data };
      this.trigger("dataBound", eventArgs);
      if (this.filterObj === null) {
        this.isFilteredData = false;
      }
      if (this.isFilteredData) {
        this.treeObj.expandAll();
      }
      if (this.isFilterRestore) {
        this.restoreFilterSelection();
        this.isFilterRestore = false;
      }
    };
    DropDownTree2.prototype.restoreFilterSelection = function() {
      if (this.showCheckBox) {
        this.treeObj.checkedNodes = this.value ? this.value : [];
      } else {
        this.treeObj.selectedNodes = this.value ? this.value : [];
      }
    };
    DropDownTree2.prototype.setCssClass = function(newClass, oldClass) {
      var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass(elements, newClass.split(" "));
      }
    };
    DropDownTree2.prototype.setEnableRTL = function(state) {
      if (state) {
        this.inputWrapper.classList.add(RTL7);
      } else {
        this.inputWrapper.classList.remove(RTL7);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
      if (this.treeObj) {
        this.treeObj.enableRtl = state;
        this.treeObj.dataBind();
      }
    };
    DropDownTree2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputEle);
      if (this.enabled) {
        removeClass([this.inputWrapper], DISABLED4);
        this.inputEle.setAttribute("aria-disabled", "false");
        this.inputWrapper.setAttribute("aria-disabled", "false");
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        addClass([this.inputWrapper], DISABLED4);
        if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {
          removeClass([this.inputWrapper], [INPUTFOCUS]);
        }
        this.inputEle.setAttribute("aria-disabled", "true");
        this.inputWrapper.setAttribute("aria-disabled", "true");
      }
    };
    DropDownTree2.prototype.cloneFields = function(fields) {
      var clonedField = {
        dataSource: fields.dataSource,
        value: fields.value,
        text: fields.text,
        parentValue: fields.parentValue,
        child: this.cloneChildField(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selected: fields.selected,
        selectable: fields.selectable,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return clonedField;
    };
    DropDownTree2.prototype.cloneChildField = function(fields) {
      if (typeof fields === "string") {
        return fields;
      } else {
        var clonedField = {
          dataSource: fields.dataSource,
          value: fields.value,
          text: fields.text,
          parentValue: fields.parentValue,
          child: fields.child ? this.cloneChildField(fields.child) : null,
          hasChildren: fields.hasChildren,
          expanded: fields.expanded,
          iconCss: fields.iconCss,
          imageUrl: fields.imageUrl,
          htmlAttributes: fields.htmlAttributes,
          query: fields.query,
          selected: fields.selected,
          selectable: fields.selectable,
          tableName: fields.tableName,
          tooltip: fields.tooltip
        };
        return clonedField;
      }
    };
    DropDownTree2.prototype.getTreeFields = function(fields) {
      var treeFields = {
        dataSource: fields.dataSource,
        id: fields.value,
        text: fields.text,
        parentID: fields.parentValue,
        child: this.getTreeChildren(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        isChecked: fields.selected,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selectable: fields.selectable,
        selected: fields.selected,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return treeFields;
    };
    DropDownTree2.prototype.getTreeChildren = function(mapper) {
      if (typeof mapper === "string") {
        return mapper;
      } else if (!isNullOrUndefined(mapper)) {
        mapper = this.getActualProperties(mapper);
        var childFields = mapper;
        if (mapper.value) {
          childFields.id = mapper.value;
        }
        if (mapper.parentValue) {
          childFields.parentID = mapper.parentValue;
        }
        if (mapper.child) {
          childFields.child = this.getTreeChildren(mapper.child);
        }
        if (mapper.selected && this.showCheckBox) {
          childFields.isChecked = mapper.selected;
        }
        return childFields;
      }
      return null;
    };
    DropDownTree2.prototype.getTreeDataType = function(ds, field) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (typeof field.child === "string" && isNullOrUndefined(getValue(field.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      if (isNullOrUndefined(this.fields.dataSource))
        this.fields.dataSource = [];
      for (var i = 0, len = this.fields.dataSource.length; i < len; i++) {
        if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, this.fields.dataSource[i]))) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(field.parentValue, this.fields.dataSource[i])) || !isNullOrUndefined(getValue(field.hasChildren, this.fields.dataSource[i]))) {
          return 1;
        }
      }
      return 1;
    };
    DropDownTree2.prototype.setFields = function() {
      this.resetValue();
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      this.treeObj.fields = this.getTreeFields(this.fields);
      this.treeObj.dataBind();
    };
    DropDownTree2.prototype.getEventArgs = function(args) {
      var checkData = args.data;
      var selectData = args.nodeData;
      var state;
      if (this.showCheckBox) {
        if (args.action === "check") {
          state = "select";
        } else if (args.action === "uncheck") {
          state = "un-select";
        }
      }
      var eventArgs = {
        action: this.showCheckBox ? state : args.action,
        isInteracted: this.isClicked ? true : args.isInteracted,
        item: args.node,
        itemData: this.showCheckBox ? checkData[0] : selectData
      };
      return eventArgs;
    };
    DropDownTree2.prototype.onBeforeSelect = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
        if (this.value === null) {
          this.setProperties({ value: [] }, true);
        }
      }
    };
    DropDownTree2.prototype.updateHiddenValue = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return;
      }
      if (this.value && this.value.length) {
        this.hiddenElement.innerHTML = '<option selected value ="' + this.value[0] + '">' + this.text + "</option>";
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownTree2.prototype.onNodeSelected = function(args) {
      if (this.showCheckBox) {
        return;
      }
      var selectedText;
      if (args.isInteracted) {
        var id = getValue("id", args.nodeData).toString();
        if (!this.allowMultiSelection) {
          this.hiddenElement.innerHTML = "";
          this.setProperties({ value: [id] }, true);
          if (this.itemTemplate) {
            selectedText = getValue("text", this.treeObj.getNode(id));
          } else {
            selectedText = getValue("text", args.nodeData).toString();
          }
          Input.setValue(selectedText, this.inputEle, this.floatLabelType);
          this.setProperties({ text: selectedText }, true);
          this.currentText = this.text;
          this.currentValue = this.value;
          attributes(this.inputWrapper, { "aria-describedby": this.element.id });
          attributes(this.inputWrapper, { "aria-activedescendant": id.toString() });
          this.updateHiddenValue();
          this.showOverAllClear();
          this.hidePopup();
          this.isNodeSelected = true;
        } else if (this.allowMultiSelection) {
          this.setMultiSelect();
        }
      }
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.onNodeClicked = function(args) {
      if (!this.changeOnBlur && this.isNodeSelected) {
        this.triggerChangeEvent(args.event);
        this.isNodeSelected = false;
      }
      var target = args.event.target;
      if ((target.classList.contains("e-fullrow") || target.classList.contains("e-list-text")) && this.showCheckBox) {
        this.isClicked = true;
        var getNodeDetails = this.treeObj.getNode(args.node);
        if (getNodeDetails.isChecked === "true") {
          this.treeObj.uncheckAll([args.node]);
        } else {
          this.treeObj.checkAll([args.node]);
        }
        this.isClicked = false;
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {
        this.triggerChangeEvent(args.event);
      }
    };
    DropDownTree2.prototype.onNodeChecked = function(args) {
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isFilteredData && args.action === "uncheck") {
        var id = getValue("id", args.data[0]).toString();
        this.removeSelectedData(id, true);
      }
      if (!this.isChipDelete && args.isInteracted) {
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (this.showSelectAll && this.checkBoxElement) {
        var nodes = this.treeObj.element.querySelectorAll("li");
        var checkedNodes = this.treeObj.element.querySelectorAll("li[aria-checked=true]");
        var wrap = closest(this.checkBoxElement, "." + CHECKBOXWRAP2);
        if (wrap && args.action === "uncheck" && (args.isInteracted || checkedNodes.length === 0 || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "false")) {
          this.isReverseUpdate = true;
          this.changeState(wrap, "uncheck");
          this.isReverseUpdate = false;
        } else if (wrap && args.action === "check" && checkedNodes.length === nodes.length && (args.isInteracted || this.isCheckAllCalled || !isNullOrUndefined(args.data[0]) && args.data[0].isChecked === "true")) {
          this.isReverseUpdate = true;
          this.isCheckAllCalled = false;
          this.changeState(wrap, "check");
          this.isReverseUpdate = false;
        }
      }
    };
    DropDownTree2.prototype.beforeCheck = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
      }
    };
    DropDownTree2.prototype.onNodeExpanded = function(args) {
      if (this.hasTemplate && this.portals && this.treeObj.portals) {
        for (var i = 0; i < this.treeObj.portals.length; i++) {
          if (this.portals.indexOf(this.treeObj.portals[i]) == -1) {
            this.portals.push(this.treeObj.portals[i]);
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownTree2.prototype.updateClearButton = function(state) {
      if (state) {
        if (!this.inputWrapper.contains(this.overAllClear)) {
          this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);
        } else {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        }
      } else {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        var chipClose = selectAll("." + CHIP_CLOSE, this.chipWrapper);
        for (var i = 0; i < chipClose.length; i++) {
          if (!state) {
            addClass([chipClose[i]], HIDEICON);
          } else {
            removeClass([chipClose[i]], HIDEICON);
          }
        }
      }
    };
    DropDownTree2.prototype.updateDropDownIconState = function(state) {
      var spinIcon = select("." + DDTICON, this.inputWrapper);
      if (state) {
        if (!spinIcon) {
          Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);
        } else {
          removeClass([spinIcon], HIDEICON);
        }
        addClass([this.inputWrapper], SHOW_DD_ICON);
      } else {
        addClass([spinIcon], HIDEICON);
        removeClass([this.inputWrapper], SHOW_DD_ICON);
      }
    };
    DropDownTree2.prototype.updateMode = function() {
      if (this.mode === "Custom") {
        return;
      }
      if (this.mode !== "Delimiter") {
        if (!this.inputWrapper.contains(this.chipWrapper)) {
          this.createChip();
        }
        var isValid = this.getValidMode();
        if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {
          removeClass([this.chipWrapper], HIDEICON);
          addClass([this.inputWrapper], SHOW_CHIP);
        } else if (!isValid) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
        var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;
        if (isValid && isValue) {
          addClass([this.inputEle], CHIP_INPUT);
        } else {
          removeClass([this.inputEle], CHIP_INPUT);
        }
      } else if (this.inputEle.classList.contains(CHIP_INPUT)) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
    };
    DropDownTree2.prototype.ensurePlaceHolder = function() {
      if (isNullOrUndefined(this.value) || this.value && this.value.length === 0) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.ensureClearIconPosition = function(floatLabelType) {
      if (floatLabelType !== "Never") {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.setMultiSelectValue = function(newValues) {
      if (!this.isFilteredData) {
        this.setProperties({ value: this.isFromFilterChange && newValues && newValues.length == 0 ? this.value : newValues }, true);
        this.isFromFilterChange = false;
        if (newValues && newValues.length !== 0 && !this.showCheckBox) {
          this.treeObj.selectedNodes = this.value.slice();
          this.treeObj.dataBind();
        }
      } else {
        var selectedValues = isNullOrUndefined(this.value) ? [] : this.value;
        for (var i = 0; i < newValues.length; i++) {
          if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {
            selectedValues.push(newValues[i]);
          }
        }
        this.setProperties({ value: selectedValues }, true);
      }
    };
    DropDownTree2.prototype.setMultiSelect = function() {
      if (this.showCheckBox && !this.isDynamicChange) {
        this.setMultiSelectValue(this.treeObj.checkedNodes.slice());
      } else {
        var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;
        this.setMultiSelectValue(ddtValue);
        if (this.showCheckBox && this.value !== null) {
          this.treeObj.checkedNodes = this.value;
          this.treeObj.dataBind();
        }
      }
      this.selectedText = [];
      var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {
        removeClass([this.inputEle], CHIP_INPUT);
        detach(this.chipWrapper);
      }
      var isValid = this.getValidMode();
      if (isValid && this.value !== null) {
        addClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          removeClass([this.chipWrapper], HIDEICON);
        }
      }
      var isValue = this.value ? this.value.length ? true : false : false;
      if (this.chipWrapper && (this.mode === "Box" && !isValue)) {
        addClass([this.chipWrapper], HIDEICON);
        removeClass([this.inputEle], CHIP_INPUT);
      }
      this.updateSelectedValues();
    };
    DropDownTree2.prototype.getSelectedData = function(value) {
      var data = null;
      if (this.isFilteredData) {
        for (var i = 0; i < this.selectedData.length; i++) {
          if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
            data = this.selectedData[i];
            break;
          }
        }
      }
      if (isNullOrUndefined(data)) {
        if (this.treeSettings.loadOnDemand) {
          data = this.getNodeData(value);
        } else {
          data = this.treeObj.getNode(value);
        }
        if (!isNullOrUndefined(data)) {
          this.selectedData.push(data);
        }
      }
      return data;
    };
    DropDownTree2.prototype.getNodeData = function(id) {
      var childItems;
      if (isNullOrUndefined(id)) {
        return childItems;
      } else if (this.treeDataType === 1) {
        for (var i = 0, objlen = this.treeItems.length; i < objlen; i++) {
          var dataId = getValue(this.fields.value, this.treeItems[i]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeItems[i];
          }
        }
      } else {
        return this.getChildNodeData(this.treeItems, this.fields, id);
      }
      return childItems;
    };
    DropDownTree2.prototype.getChildNodeData = function(obj, mapper, id) {
      var newChildItems;
      if (isNullOrUndefined(obj)) {
        return newChildItems;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataValue = getValue(mapper.value, obj[i]);
        if (obj[i] && dataValue && dataValue.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childNodeData = getValue(mapper.child, obj[i]);
          newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        }
      }
      return newChildItems;
    };
    DropDownTree2.prototype.getChildMapperFields = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.removeSelectedData = function(value, muteOnChange) {
      var selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();
      selectedValues.splice(selectedValues.indexOf(value), 1);
      this.setProperties({ value: selectedValues }, muteOnChange);
      for (var i = 0; i < this.selectedData.length; i++) {
        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
          this.selectedData.splice(i, 1);
          break;
        }
      }
    };
    DropDownTree2.prototype.updateSelectedValues = function() {
      this.dataValue = "";
      var temp;
      var text;
      var textValue = "";
      var selectedData;
      this.hiddenElement.innerHTML = "";
      var hiddenInputValue = "";
      if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {
        this.chipCollection.innerHTML = "";
      }
      if (!this.isFilteredData) {
        this.selectedData = [];
      }
      if (!isNullOrUndefined(this.value)) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          selectedData = this.getSelectedData(this.value[i]);
          text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
          this.selectedText.push(text);
          temp = this.selectedText[this.selectedText.length - 1];
          if (this.selectedText.length > 1) {
            this.dataValue += this.delimiterChar + " " + temp;
            textValue += "," + temp;
          } else {
            this.dataValue += temp;
            textValue += temp;
          }
          if (this.mode !== "Custom" && this.mode !== "Delimiter" && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {
            this.setChipValues(temp, this.value[i]);
          }
          hiddenInputValue += '<option selected value ="' + this.value[i] + '">' + this.selectedText[this.selectedText.length - 1] + "</option>";
        }
        if (this.selectedText.length >= 1) {
          this.setProperties({ text: textValue }, true);
        }
        this.hiddenElement.innerHTML = hiddenInputValue;
        if (this.mode === "Custom" && (this.allowMultiSelection || this.showCheckBox)) {
          this.setTagValues();
        }
      }
      var isValid = this.getValidMode();
      if (this.mode !== "Custom" && this.mode !== "Box" && (this.allowMultiSelection || this.showCheckBox) && !isValid) {
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
      Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);
      if (textValue === "") {
        this.setProperties({ text: null }, true);
      } else {
        this.setProperties({ text: textValue }, true);
      }
      if (this.showClearButton && this.inputFocus) {
        this.showOverAllClear();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
    };
    DropDownTree2.prototype.setChipValues = function(text, value) {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      var chip = this.createElement("span", {
        className: CHIP,
        attrs: { "data-value": value }
      });
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE + " " + ICONS2 });
      if (this.enableHtmlSanitizer) {
        chipContent.innerText = SanitizeHtmlHelper.sanitize(text);
      } else {
        chipContent.innerHTML = text;
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
      if (this.showClearButton) {
        chip.appendChild(chipClose);
        EventHandler.add(chipClose, "mousedown", this.removeChip, this);
      }
    };
    DropDownTree2.prototype.setTagValues = function() {
      if (this.value === null || this.text == null) {
        return;
      }
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      var chip = this.createElement("span", {
        className: CHIP
      });
      if (!this.inputEle.classList.contains(CHIP_INPUT)) {
        addClass([this.inputEle], CHIP_INPUT);
      }
      if (this.chipWrapper.classList.contains(HIDEICON)) {
        removeClass([this.chipWrapper], HIDEICON);
      }
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var template = this.customTemplate;
      var templateId = this.customTemplateId;
      var templatestring = "customTemplate";
      var compiledString = this.templateComplier(template);
      var tempArr = compiledString({ "value": this.value, "text": this.text }, this, templatestring, templateId, this.isStringTemplate, void 0, chipContent);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, chipContent);
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
    };
    DropDownTree2.prototype.setSelectAllWrapper = function(state) {
      if (this.isFirstRender) {
        return;
      }
      if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {
        this.createSelectAllWrapper();
        this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);
      } else if (this.popupEle.contains(this.checkAllParent)) {
        detach(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    DropDownTree2.prototype.setHeaderTemplate = function() {
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], HEADER2);
      }
      var compiledString = this.templateComplier(this.headerTemplate);
      var tempArr = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, void 0, this.header);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.header);
      }
      this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);
    };
    DropDownTree2.prototype.templateComplier = function(template) {
      if (template) {
        var e = void 0;
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e2) {
          return compile(template);
        }
      }
      return compile(template);
    };
    DropDownTree2.prototype.setFooterTemplate = function() {
      if (this.footer) {
        this.footer.innerHTML = "";
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], FOOTER);
      }
      var compiledString = this.templateComplier(this.footerTemplate);
      var tempArr = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, void 0, this.footer);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.footer);
      }
      append([this.footer], this.popupEle);
    };
    DropDownTree2.prototype.clearAll = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      this.resetValue();
      this.showOverAllClear();
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.popupObj) {
          this.popupObj.refreshPosition();
        }
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
      }
      if (e) {
        this.isClearButtonClick = true;
      }
      if (!this.changeOnBlur) {
        this.triggerChangeEvent(e);
      }
    };
    DropDownTree2.prototype.removeChip = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      var element = e.target.parentElement;
      var value = element.getAttribute("data-value");
      if (this.chipCollection) {
        if (element) {
          remove(element);
        }
      }
      this.isChipDelete = true;
      this.isClearButtonClick = true;
      this.removeSelectedData(value, true);
      this.selectedText = [];
      if (this.allowMultiSelection) {
        this.treeObj.selectedNodes = this.value.slice();
        this.updateSelectedValues();
      }
      if (this.showCheckBox) {
        this.treeObj.uncheckAll([value]);
        this.clearCheckAll();
        this.setMultiSelect();
      }
      this.triggerChangeEvent(e);
      this.isChipDelete = false;
      this.ensurePlaceHolder();
    };
    DropDownTree2.prototype.resetValue = function(isDynamicChange) {
      if (this.value == [] && this.text == null) {
        return;
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      if (!isDynamicChange) {
        this.oldValue = this.value;
        this.setProperties({ value: [] }, true);
      }
      this.dataValue = null;
      this.setProperties({ text: null }, true);
      this.selectedData = [];
      setValue("selectedNodes", [], this.treeObj);
      this.hiddenElement.innerHTML = "";
      if (this.showCheckBox) {
        this.treeObj.uncheckAll();
        this.setMultiSelect();
        this.clearCheckAll();
      }
      if (this.oldValue === null && !isDynamicChange) {
        this.removeValue = true;
      } else if (isDynamicChange) {
        this.triggerChangeEvent();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        this.chipCollection.innerHTML = "";
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.clearCheckAll = function() {
      if (this.showSelectAll && this.value && this.value.length === 0) {
        this.setLocale(false);
      }
    };
    DropDownTree2.prototype.selectAllItems = function(state) {
      if (this.showCheckBox) {
        if (state) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
        } else {
          this.treeObj.uncheckAll();
        }
        this.checkSelectAll = state;
      } else if (this.allowMultiSelection) {
        if (!state) {
          this.treeObj.selectedNodes = [];
        } else {
          var li = selectAll("li", this.treeObj.element);
          var id = void 0;
          var arr = [];
          for (var i = 0; i < li.length; i++) {
            id = li[i].getAttribute("data-uid").toString();
            arr.push(id);
          }
          this.treeObj.selectedNodes = arr;
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText) {
        if (state) {
          this.updateView();
        } else {
          this.updateOverflowWrapper(true);
        }
      }
    };
    DropDownTree2.prototype.updateTreeSettings = function(prop) {
      var value = Object.keys(prop.treeSettings)[0];
      if (value === "autoCheck") {
        this.treeObj.autoCheck = this.treeSettings.autoCheck;
      } else if (value === "loadOnDemand") {
        this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;
      } else if (value === "expandOn") {
        this.treeObj.expandOn = this.treeSettings.expandOn;
        this.treeObj.dataBind();
        return;
      }
      this.treeObj.dataBind();
      this.setMultiSelect();
      this.updateValue(this.value);
    };
    DropDownTree2.prototype.updateCheckBoxState = function(checkBox) {
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.showCheckBox = checkBox;
      this.treeObj.dataBind();
      this.isDynamicChange = true;
      this.setSelectAllWrapper(this.showSelectAll);
      if (this.showSelectAll) {
        this.setLocale();
      }
      if (this.showCheckBox) {
        this.updateMode();
      }
      this.setMultiSelect();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateTemplate = function() {
      if (this.popupObj) {
        this.clearTemplate();
        this.portals = [];
        this.popupObj.destroy();
        if (this.isPopupOpen) {
          this.hidePopup();
          this.isFirstRender = true;
          this.renderPopup();
        } else {
          this.isFirstRender = true;
        }
      }
    };
    DropDownTree2.prototype.l10nUpdate = function(actionFailure) {
      if (this.noRecord) {
        this.noRecord.innerHTML = "";
      } else {
        this.noRecord = this.createElement("div");
      }
      if (this.noRecordsTemplate !== "No Records Found" || this.actionFailureTemplate !== "The Request Failed") {
        var template = actionFailure ? this.actionFailureTemplate : this.noRecordsTemplate;
        var templateId = actionFailure ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        var templatestring = actionFailure ? "actionFailureTemplate" : "noRecordsTemplate";
        var compiledString = this.templateComplier(template);
        var tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, void 0, this.noRecord);
        if (tempArr) {
          tempArr = Array.prototype.slice.call(tempArr);
          append(tempArr, this.noRecord);
        }
      } else {
        var l10nLocale = { noRecordsTemplate: "No Records Found", actionFailureTemplate: "The Request Failed" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        this.noRecord.innerHTML = actionFailure ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
      }
      addClass([this.noRecord], NODATACONTAINER);
      prepend([this.noRecord], this.popupDiv);
    };
    DropDownTree2.prototype.updateRecordTemplate = function(action) {
      if (this.treeItems && this.treeItems.length <= 0) {
        this.l10nUpdate(action);
        if (this.hasTemplate) {
          this.updateTemplate();
        }
      }
    };
    DropDownTree2.prototype.updateOverflowWrapper = function(state) {
      if (!state) {
        if (!this.inputWrapper.contains(this.overFlowWrapper)) {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
        }
      } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {
        this.overFlowWrapper.innerHTML = "";
      }
    };
    DropDownTree2.prototype.updateMultiSelection = function(state) {
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.allowMultiSelection = state;
      this.treeObj.dataBind();
      this.updateOption();
      if (this.allowMultiSelection) {
        this.updateMode();
      }
      this.setMultiSelect();
    };
    DropDownTree2.prototype.updateAllowFiltering = function(state) {
      if (!this.isFirstRender) {
        if (state) {
          this.renderFilter();
        } else {
          this.destroyFilter();
        }
      }
    };
    DropDownTree2.prototype.updateFilterPlaceHolder = function() {
      if (this.filterObj) {
        this.filterObj.placeholder = this.filterBarPlaceholder;
        this.filterObj.element.setAttribute("aria-label", this.filterBarPlaceholder);
      }
    };
    DropDownTree2.prototype.updateValue = function(value) {
      this.isDynamicChange = true;
      if (isNullOrUndefined(value) || value.length === 0) {
        this.resetValue(true);
      } else {
        this.setTreeValue();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateText = function(text) {
      if (isNullOrUndefined(text)) {
        this.resetValue();
      } else {
        this.setTreeText();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
    };
    DropDownTree2.prototype.updateModelMode = function() {
      var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (!validMode) {
        return;
      }
      if (!this.wrapText) {
        var overFlow = select("." + OVERFLOW_VIEW, this.inputWrapper);
        if (overFlow) {
          overFlow.innerHTML = "";
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText && (this.value && this.value.length !== 0)) {
        this.updateOverFlowView();
        addClass([this.inputEle], CHIP_INPUT);
        if (this.mode === "Box") {
          removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        } else {
          addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        }
      }
    };
    DropDownTree2.prototype.updateOption = function() {
      if (!this.hiddenElement.hasAttribute("multiple") && (this.allowMultiSelection || this.showCheckBox)) {
        this.hiddenElement.setAttribute("multiple", "");
      } else if (this.hiddenElement.hasAttribute("multiple") && (!this.allowMultiSelection && !this.showCheckBox)) {
        this.hiddenElement.removeAttribute("multiple");
      }
    };
    DropDownTree2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputEle);
            break;
          case "cssClass":
            this.setCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRTL(this.enableRtl);
            break;
          case "fields":
            this.setFields();
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.inputEle);
            break;
          case "enabled":
            this.setEnable();
            break;
          case "floatLabelType":
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);
            this.ensureClearIconPosition(newProp.floatLabelType);
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "allowFiltering":
            this.updateAllowFiltering(newProp.allowFiltering);
            break;
          case "filterBarPlaceholder":
            this.updateFilterPlaceHolder();
            break;
          case "value":
            this.oldValue = oldProp.value;
            this.updateValue(newProp.value);
            break;
          case "text":
            this.updateText(newProp.text);
            break;
          case "allowMultiSelection":
            this.updateMultiSelection(newProp.allowMultiSelection);
            break;
          case "mode":
            if (!this.showCheckBox && !this.allowMultiSelection) {
              return;
            }
            if (this.mode === "Custom") {
              if (this.overFlowWrapper) {
                detach(this.overFlowWrapper);
              }
              if (this.chipWrapper) {
                detach(this.chipWrapper);
              }
              this.setTagValues();
            } else {
              if (oldProp.mode === "Custom") {
                this.updateOverflowWrapper(this.wrapText);
              }
              this.updateModelMode();
            }
            break;
          case "delimiterChar":
            if (this.mode === "Box") {
              return;
            }
            if (this.showCheckBox || this.allowMultiSelection) {
              this.setMultiSelect();
            }
            break;
          case "selectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale();
            }
            break;
          case "unSelectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale(false);
            }
            break;
          case "showSelectAll":
            if (this.showCheckBox) {
              this.setSelectAllWrapper(newProp.showSelectAll);
              this.updatePopupHeight();
            }
            break;
          case "showCheckBox":
            this.updateCheckBoxState(newProp.showCheckBox);
            if (!this.wrapText) {
              this.updateOverflowWrapper(true);
            }
            this.updatePopupHeight();
            this.updateOption();
            break;
          case "treeSettings":
            this.updateTreeSettings(newProp);
            break;
          case "customTemplate":
            if (this.mode !== "Custom") {
              return;
            }
            this.chipCollection.innerHTML = "";
            this.setTagValues();
            break;
          case "sortOrder":
            if (this.hasTemplate) {
              this.updateTemplate();
            }
            this.treeObj.sortOrder = newProp.sortOrder;
            this.treeObj.dataBind();
            this.updateValue(this.value);
            break;
          case "showDropDownIcon":
            this.updateDropDownIconState(newProp.showDropDownIcon);
            break;
          case "popupWidth":
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "popupHeight":
            if (this.popupObj) {
              this.updatePopupHeight();
            }
            break;
          case "zIndex":
            if (this.popupObj) {
              this.popupObj.zIndex = newProp.zIndex;
              this.popupObj.dataBind();
            }
            break;
          case "headerTemplate":
            this.updateTemplate();
            break;
          case "footerTemplate":
            this.updateTemplate();
            break;
          case "itemTemplate":
            this.updateTemplate();
            this.treeObj.nodeTemplate = newProp.itemTemplate;
            this.treeObj.dataBind();
            break;
          case "noRecordsTemplate":
            this.updateRecordTemplate();
            break;
          case "actionFailureTemplate":
            this.updateRecordTemplate(true);
            break;
          case "htmlAttributes":
            this.setHTMLAttributes();
            break;
          case "wrapText":
            this.updateOverflowWrapper(this.wrapText);
            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
              this.updateView();
            } else {
              addClass([this.overFlowWrapper], HIDEICON);
              if (this.chipWrapper && this.mode === "Box") {
                removeClass([this.chipWrapper], HIDEICON);
              } else {
                removeClass([this.inputWrapper], SHOW_CHIP);
                removeClass([this.inputEle], CHIP_INPUT);
              }
              this.ensurePlaceHolder();
            }
            break;
        }
      }
    };
    DropDownTree2.prototype.clear = function() {
      this.clearAll();
      if (this.inputFocus) {
        this.onFocusOut();
      } else {
        if (this.changeOnBlur) {
          this.triggerChangeEvent();
        }
        this.removeValue = false;
      }
    };
    DropDownTree2.prototype.destroy = function() {
      this.clearTemplate();
      this.unWireEvents();
      this.setCssClass(null, this.cssClass);
      this.setProperties({ text: null }, true);
      this.treeObj.destroy();
      this.destroyFilter();
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
      if (this.element.tagName !== this.getDirective()) {
        this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      detach(this.inputWrapper);
      detach(this.popupDiv);
      detach(this.hiddenElement);
      this.element.classList.remove("e-input");
      if (this.showCheckBox || this.allowMultiSelection) {
        this.element.classList.remove(CHIP_INPUT);
      }
      this.inputObj = null;
      while (this.hiddenElement.options.length > 0) {
        this.hiddenElement.remove(0);
      }
      this.hiddenElement.innerHTML = "";
      this.hiddenElement = null;
      this.inputWrapper = null;
      this.popupDiv = null;
      this.tree = null;
      this.popupObj = null;
      this.treeObj = null;
      this.overAllClear = null;
      this.chipWrapper = null;
      this.chipCollection = null;
      this.checkAllParent = null;
      this.selectAllSpan = null;
      this.checkBoxElement = null;
      this.checkWrapper = null;
      this.popupEle = null;
      this.header = null;
      this.footer = null;
      this.overFlowWrapper = null;
      this.keyboardModule = null;
      _super.prototype.destroy.call(this);
      this.setProperties({ value: [] }, true);
    };
    DropDownTree2.prototype.destroyFilter = function() {
      if (this.filterObj) {
        this.filterObj.destroy();
        detach(this.filterObj.element);
        detach(this.filterContainer);
        this.filterObj = null;
      }
    };
    DropDownTree2.prototype.ensureVisible = function(item) {
      this.treeObj.ensureVisible(item);
    };
    DropDownTree2.prototype.getData = function(item) {
      return this.treeObj.getTreeData(item);
    };
    DropDownTree2.prototype.hidePopup = function() {
      var eventArgs = { popup: this.popupObj };
      this.inputWrapper.classList.remove(ICONANIMATION);
      if (this.popupEle) {
        addClass([this.popupEle], DDTHIDEICON);
      }
      attributes(this.inputEle, { "aria-expanded": "false" });
      if (this.popupObj && this.isPopupOpen) {
        this.popupObj.hide();
        if (this.inputFocus) {
          this.inputWrapper.focus();
          if (this.allowFiltering) {
            addClass([this.inputWrapper], [INPUTFOCUS]);
          }
        }
        this.trigger("close", eventArgs);
      }
    };
    DropDownTree2.prototype.selectAll = function(state) {
      this.selectAllItems(state);
    };
    DropDownTree2.prototype.showPopup = function() {
      if (!this.enabled || this.readonly || this.isPopupOpen) {
        return;
      }
      this.renderPopup();
      this.focusIn();
    };
    DropDownTree2.prototype.getModuleName = function() {
      return "dropdowntree";
    };
    __decorate21([
      Property("The Request Failed")
    ], DropDownTree2.prototype, "actionFailureTemplate", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "allowFiltering", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "allowMultiSelection", void 0);
    __decorate21([
      Property(true)
    ], DropDownTree2.prototype, "changeOnBlur", void 0);
    __decorate21([
      Property("")
    ], DropDownTree2.prototype, "cssClass", void 0);
    __decorate21([
      Property("${value.length} item(s) selected")
    ], DropDownTree2.prototype, "customTemplate", void 0);
    __decorate21([
      Property(",")
    ], DropDownTree2.prototype, "delimiterChar", void 0);
    __decorate21([
      Property(true)
    ], DropDownTree2.prototype, "enabled", void 0);
    __decorate21([
      Complex({}, Fields)
    ], DropDownTree2.prototype, "fields", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "filterBarPlaceholder", void 0);
    __decorate21([
      Property("StartsWith")
    ], DropDownTree2.prototype, "filterType", void 0);
    __decorate21([
      Property("Never")
    ], DropDownTree2.prototype, "floatLabelType", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "footerTemplate", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "ignoreAccent", void 0);
    __decorate21([
      Property(true)
    ], DropDownTree2.prototype, "ignoreCase", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "headerTemplate", void 0);
    __decorate21([
      Property({})
    ], DropDownTree2.prototype, "htmlAttributes", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "itemTemplate", void 0);
    __decorate21([
      Property("Default")
    ], DropDownTree2.prototype, "mode", void 0);
    __decorate21([
      Property("No Records Found")
    ], DropDownTree2.prototype, "noRecordsTemplate", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "placeholder", void 0);
    __decorate21([
      Property("300px")
    ], DropDownTree2.prototype, "popupHeight", void 0);
    __decorate21([
      Property("100%")
    ], DropDownTree2.prototype, "popupWidth", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "readonly", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "showSelectAll", void 0);
    __decorate21([
      Property("Select All")
    ], DropDownTree2.prototype, "selectAllText", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "showCheckBox", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "enableHtmlSanitizer", void 0);
    __decorate21([
      Property(true)
    ], DropDownTree2.prototype, "showClearButton", void 0);
    __decorate21([
      Property(true)
    ], DropDownTree2.prototype, "showDropDownIcon", void 0);
    __decorate21([
      Property("None")
    ], DropDownTree2.prototype, "sortOrder", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "text", void 0);
    __decorate21([
      Complex({}, TreeSettings)
    ], DropDownTree2.prototype, "treeSettings", void 0);
    __decorate21([
      Property("Unselect All")
    ], DropDownTree2.prototype, "unSelectAllText", void 0);
    __decorate21([
      Property(null)
    ], DropDownTree2.prototype, "value", void 0);
    __decorate21([
      Property("100%")
    ], DropDownTree2.prototype, "width", void 0);
    __decorate21([
      Property(1e3)
    ], DropDownTree2.prototype, "zIndex", void 0);
    __decorate21([
      Property(false)
    ], DropDownTree2.prototype, "wrapText", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "actionFailure", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "beforeOpen", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "change", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "close", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "blur", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "created", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "dataBound", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "destroyed", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "filtering", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "focus", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "keyPress", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "open", void 0);
    __decorate21([
      Event()
    ], DropDownTree2.prototype, "select", void 0);
    DropDownTree2 = __decorate21([
      NotifyPropertyChanges
    ], DropDownTree2);
    return DropDownTree2;
  }(Component)
);

// node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SPINNER_CLASS = "e-atc-spinner-icon";
dropDownListClasses.root = "e-combobox";
var inputObject2 = {
  container: null,
  buttons: []
};
var ComboBox = (
  /** @class */
  function(_super) {
    __extends22(ComboBox2, _super);
    function ComboBox2(options, element) {
      return _super.call(this, options, element) || this;
    }
    ComboBox2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ComboBox2.prototype.getLocaleName = function() {
      return "combo-box";
    };
    ComboBox2.prototype.wireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this);
        EventHandler.add(this.inputWrapper.container, "blur", this.onBlurHandler, this);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this);
      }
      EventHandler.add(this.inputElement, "focus", this.targetFocus, this);
      if (!this.readonly) {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
        EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
        EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
        EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
        EventHandler.add(window, "resize", this.windowResize, this);
      }
      this.bindCommonEvent();
    };
    ComboBox2.prototype.preventBlur = function(e) {
      if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {
        e.preventDefault();
      }
    };
    ComboBox2.prototype.onBlurHandler = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {
        this.customValue(e);
      }
      _super.prototype.onBlurHandler.call(this, e);
    };
    ComboBox2.prototype.targetElement = function() {
      return this.inputElement;
    };
    ComboBox2.prototype.setOldText = function(text) {
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      this.customValue();
      this.removeSelection();
    };
    ComboBox2.prototype.setOldValue = function(value) {
      if (this.allowCustom) {
        this.valueMuteChange(this.value);
      } else {
        this.valueMuteChange(null);
      }
      this.removeSelection();
      this.setHiddenValue();
    };
    ComboBox2.prototype.valueMuteChange = function(value) {
      var inputValue = isNullOrUndefined(value) ? null : value.toString();
      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
      this.setProperties({ value, text: value, index: null }, true);
      this.activeIndex = this.index;
      var fields = this.fields;
      var dataItem = {};
      dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();
      dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();
      this.itemData = dataItem;
      this.item = null;
      if (this.previousValue !== this.value) {
        this.detachChangeEvent(null);
      }
    };
    ComboBox2.prototype.updateValues = function() {
      if (!isNullOrUndefined(this.value)) {
        var li = this.getElementByValue(this.value);
        var isExistItem = !isNullOrUndefined(li) ? true : false;
        if (this.enableVirtualization && this.value) {
          var fields = this.fields.value ? this.fields.value : "";
          if (this.dataSource instanceof DataManager && this.virtualGroupDataSource) {
            var getItem = new DataManager(this.virtualGroupDataSource).executeLocal(new Query().where(new Predicate(fields, "equal", this.value)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              isExistItem = true;
              var dataItem = this.getItemData();
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": dataItem.value });
              }
            }
          } else {
            var getItem = new DataManager(this.dataSource).executeLocal(new Query().where(new Predicate(fields, "equal", this.value)));
            if (getItem && getItem.length > 0) {
              this.itemData = getItem[0];
              isExistItem = true;
              var dataItem = this.getItemData();
              if (this.value === dataItem.value && this.text !== dataItem.text || this.value !== dataItem.value && this.text === dataItem.text) {
                this.setProperties({ "text": dataItem.text, "value": dataItem.value });
              }
            }
          }
        }
        if (li) {
          this.setSelection(li, null);
        } else if (!this.enableVirtualization && this.allowCustom || this.allowCustom && this.enableVirtualization && !isExistItem) {
          this.valueMuteChange(this.value);
        } else if (!this.enableVirtualization || this.enableVirtualization && !isExistItem) {
          this.valueMuteChange(null);
        }
      } else if (this.text && isNullOrUndefined(this.value)) {
        var li = this.getElementByText(this.text);
        if (li) {
          this.setSelection(li, null);
        } else {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          this.customValue();
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    ComboBox2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement && this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    ComboBox2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "role": "combobox",
        "aria-autocomplete": "both",
        "aria-labelledby": this.hiddenElement.id,
        "aria-expanded": "false",
        "aria-readonly": this.readonly.toString(),
        "autocomplete": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      return ariaAttributes;
    };
    ComboBox2.prototype.searchLists = function(e) {
      this.isTyped = true;
      if (this.isFiltering()) {
        _super.prototype.searchLists.call(this, e);
        if (this.ulElement && this.filterInput.value.trim() === "") {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
      } else {
        if (this.ulElement && this.inputElement.value === "" && this.preventAutoFill) {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
        this.incrementalSearch(e);
      }
    };
    ComboBox2.prototype.getNgDirective = function() {
      return "EJS-COMBOBOX";
    };
    ComboBox2.prototype.setSearchBox = function() {
      this.filterInput = this.inputElement;
      var searchBoxContainer = this.isFiltering() || this.isReact && this.getModuleName() === "combobox" ? this.inputWrapper : inputObject2;
      return searchBoxContainer;
    };
    ComboBox2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isSelectCustom) {
        this.removeSelection();
      }
      if (!this.preventAutoFill && this.getModuleName() === "combobox" && this.isTyped && !this.enableVirtualization) {
        setTimeout(function() {
          _this.inlineSearch();
        });
      }
    };
    ComboBox2.prototype.getFocusElement = function() {
      var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
      var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : this.list;
      var isSelected = dataItem.text && dataItem.text.toString() === this.inputElement.value && !isNullOrUndefined(selected);
      if (isSelected) {
        return selected;
      }
      if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
        var inputValue = this.inputElement.value;
        var dataSource = this.sortedData;
        var type = this.typeOfData(dataSource).typeof;
        var activeItem = Search(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type);
        if (this.enableVirtualization && inputValue !== "" && this.getModuleName() !== "autocomplete" && this.isTyped && !this.allowFiltering) {
          var updatingincrementalindex = false;
          if (this.viewPortInfo.endIndex >= this.incrementalEndIndex && this.incrementalEndIndex <= this.totalItemCount || this.incrementalEndIndex == 0) {
            updatingincrementalindex = true;
            this.incrementalStartIndex = this.incrementalEndIndex;
            if (this.incrementalEndIndex == 0) {
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
            } else {
              this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            }
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
          }
          if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
            this.updateIncrementalView(0, this.itemCount);
          }
          activeItem = Search(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
          while (isNullOrUndefined(activeItem) && this.incrementalEndIndex < this.totalItemCount) {
            this.incrementalStartIndex = this.incrementalEndIndex;
            this.incrementalEndIndex = this.incrementalEndIndex + 100 > this.totalItemCount ? this.totalItemCount : this.incrementalEndIndex + 100;
            this.updateIncrementalInfo(this.incrementalStartIndex, this.incrementalEndIndex);
            updatingincrementalindex = true;
            if (this.viewPortInfo.startIndex !== 0 || updatingincrementalindex) {
              this.updateIncrementalView(0, this.itemCount);
            }
            activeItem = Search(inputValue, this.incrementalLiCollections, this.filterType, true, dataSource, this.fields, type);
            if (!isNullOrUndefined(activeItem)) {
              break;
            }
            if (isNullOrUndefined(activeItem) && this.incrementalEndIndex >= this.totalItemCount) {
              this.incrementalStartIndex = 0;
              this.incrementalEndIndex = 100 > this.totalItemCount ? this.totalItemCount : 100;
              break;
            }
          }
          if (activeItem.index) {
            if (!(this.viewPortInfo.startIndex >= activeItem.index) || !(activeItem.index >= this.viewPortInfo.endIndex)) {
              var startIndex = activeItem.index - (this.itemCount / 2 - 2) > 0 ? activeItem.index - (this.itemCount / 2 - 2) : 0;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              if (startIndex != this.viewPortInfo.startIndex) {
                this.updateIncrementalView(startIndex, endIndex);
              }
            }
          }
          if (!isNullOrUndefined(activeItem.item)) {
            var index_1 = this.getIndexByValue(activeItem.item.getAttribute("data-value")) - this.skeletonCount;
            if (index_1 > this.itemCount / 2) {
              var startIndex = this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) < this.totalItemCount ? this.viewPortInfo.startIndex + (this.itemCount / 2 - 2) : this.totalItemCount;
              var endIndex = this.viewPortInfo.startIndex + this.itemCount > this.totalItemCount ? this.totalItemCount : this.viewPortInfo.startIndex + this.itemCount;
              this.updateIncrementalView(startIndex, endIndex);
            }
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          } else {
            this.updateIncrementalView(0, this.itemCount);
            this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
            this.list.scrollTop = 0;
          }
          if (activeItem && activeItem.item) {
            activeItem.item = this.getElementByValue(activeItem.item.getAttribute("data-value"));
          }
        }
        var activeElement = activeItem.item;
        if (!isNullOrUndefined(activeElement)) {
          var count = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1;
          var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
          if (!isNaN(height) && this.getModuleName() !== "autocomplete") {
            this.removeFocus();
            var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
            if (!this.enableVirtualization) {
              this.list.scrollTop = count * height + fixedHead;
            } else {
              this.list.getElementsByClassName("e-virtual-ddl-content")[0].style = this.getTransformValues();
              if (this.enableVirtualization && !this.fields.groupBy) {
                var selectedLiOffsetTop = this.virtualListInfo && this.virtualListInfo.startIndex ? activeElement.offsetTop + this.virtualListInfo.startIndex * activeElement.offsetHeight : activeElement.offsetTop;
                this.list.scrollTop = selectedLiOffsetTop - this.list.querySelectorAll(".e-virtual-list").length * activeElement.offsetHeight;
              }
            }
            addClass([activeElement], dropDownListClasses.focus);
          }
        } else {
          if (this.isSelectCustom && this.inputElement.value.trim() !== "") {
            this.removeFocus();
            if (!this.enableVirtualization) {
              this.list.scrollTop = 0;
            }
          }
        }
        return activeElement;
      } else {
        return null;
      }
    };
    ComboBox2.prototype.setValue = function(e) {
      if (e && e.type === "keydown" && e.action === "enter") {
        this.removeFillSelection();
      }
      if (this.autofill && this.getModuleName() === "combobox" && e && e.type === "keydown" && e.action !== "enter") {
        this.preventAutoFill = false;
        this.inlineSearch(e);
        return false;
      } else {
        return _super.prototype.setValue.call(this, e);
      }
    };
    ComboBox2.prototype.checkCustomValue = function() {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();
      if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {
        this.setProperties({ "value": dataItem.value }, !this.allowCustom);
      }
    };
    ComboBox2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = this.getModuleName() === "autocomplete" ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon " + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    ComboBox2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    ComboBox2.prototype.setAutoFill = function(activeElement, isHover) {
      if (!isHover) {
        this.setHoverList(activeElement);
      }
      if (this.autofill && !this.preventAutoFill) {
        var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString();
        var currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
        if (this.getModuleName() === "combobox") {
          if (!this.isSelected && this.previousValue !== currentFillValue) {
            this.updateSelectedItem(activeElement, null);
            this.isSelected = true;
            this.previousValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
          } else {
            this.updateSelectedItem(activeElement, null, true);
          }
        }
        if (!this.isAndroidAutoFill(currentValue)) {
          this.setAutoFillSelection(currentValue, isHover);
        }
      }
    };
    ComboBox2.prototype.isAndroidAutoFill = function(value) {
      if (Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;
        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    ComboBox2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
      if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {
        this.searchLists(e);
      }
    };
    ComboBox2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    ComboBox2.prototype.inlineSearch = function(e) {
      var isKeyNavigate = e && (e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown");
      var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
      if (!isNullOrUndefined(activeElement)) {
        if (!isKeyNavigate) {
          var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
          this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;
        }
        this.preventAutoFill = this.inputElement.value === "" ? false : this.preventAutoFill;
        this.setAutoFill(activeElement, isKeyNavigate);
      } else if (this.inputElement.value === "") {
        this.activeIndex = null;
        if (!isNullOrUndefined(this.list)) {
          if (!this.enableVirtualization) {
            this.list.scrollTop = 0;
          }
          var focusItem = this.list.querySelector("." + dropDownListClasses.li);
          this.setHoverList(focusItem);
        }
      } else {
        this.activeIndex = null;
        this.removeSelection();
        if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {
          this.removeFocus();
        }
      }
    };
    ComboBox2.prototype.incrementalSearch = function(e) {
      this.showPopup(e);
      if (!isNullOrUndefined(this.listData)) {
        this.inlineSearch(e);
        e.preventDefault();
      }
    };
    ComboBox2.prototype.setAutoFillSelection = function(currentValue, isKeyNavigate) {
      if (isKeyNavigate === void 0) {
        isKeyNavigate = false;
      }
      var selection = this.getSelectionPoints();
      var value = this.inputElement.value.substr(0, selection.start);
      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);
        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
      } else if (isKeyNavigate) {
        Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
      }
    };
    ComboBox2.prototype.getValueByText = function(text) {
      return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);
    };
    ComboBox2.prototype.unWireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur);
        EventHandler.remove(this.inputWrapper.container, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick);
      }
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "focus", this.targetFocus);
        if (!this.readonly) {
          EventHandler.remove(this.inputElement, "input", this.onInput);
          EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
          EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
          EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
          EventHandler.remove(window, "resize", this.windowResize);
        }
      }
      this.unBindCommonEvent();
    };
    ComboBox2.prototype.setSelection = function(li, e) {
      _super.prototype.setSelection.call(this, li, e);
      if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {
        this.removeFocus();
      }
    };
    ComboBox2.prototype.selectCurrentItem = function(e) {
      var li;
      if (this.isPopupOpen) {
        if (this.isSelected) {
          li = this.list.querySelector("." + dropDownListClasses.selected);
        } else {
          li = this.list.querySelector("." + dropDownListClasses.focus);
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
      }
      if (e.action === "enter" && this.inputElement.value.trim() === "") {
        this.clearAll(e);
      } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {
        this.customValue(e);
      }
      this.hidePopup(e);
    };
    ComboBox2.prototype.setHoverList = function(li) {
      this.removeSelection();
      if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {
        this.removeFocus();
        li.classList.add(dropDownListClasses.focus);
      }
    };
    ComboBox2.prototype.targetFocus = function(e) {
      if (Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = false;
      }
      this.onFocus(e);
      Input.calculateWidth(this.inputElement, this.inputWrapper.container);
    };
    ComboBox2.prototype.dropDownClick = function(e) {
      e.preventDefault();
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.dropDownClick.call(this, e);
    };
    ComboBox2.prototype.customValue = function(e) {
      var _this = this;
      var value = this.getValueByText(this.inputElement.value);
      if (!this.allowCustom && this.inputElement.value !== "") {
        var previousValue = this.previousValue;
        var currentValue = this.value;
        this.setProperties({ value });
        if (isNullOrUndefined(this.value)) {
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }
        if (this.autofill && previousValue === this.value && currentValue !== this.value) {
          this.onChangeEvent(null);
        }
      } else if (this.inputElement.value.trim() !== "") {
        var previousValue_1 = this.value;
        if (isNullOrUndefined(value)) {
          var value_1 = this.inputElement.value === "" ? null : this.inputElement.value;
          var eventArgs = { text: value_1, item: {} };
          if (!this.initial) {
            this.trigger("customValueSpecifier", eventArgs, function(eventArgs2) {
              _this.updateCustomValueCallback(value_1, eventArgs2, previousValue_1, e);
            });
          } else {
            this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);
          }
        } else {
          this.isSelectCustom = false;
          this.setProperties({ value });
          if (previousValue_1 !== this.value) {
            this.onChangeEvent(e);
          }
        }
      } else if (this.allowCustom) {
        this.isSelectCustom = true;
      }
    };
    ComboBox2.prototype.updateCustomValueCallback = function(value, eventArgs, previousValue, e) {
      var fields = this.fields;
      var item = eventArgs.item;
      var dataItem = {};
      if (item && getValue(fields.text, item) && getValue(fields.value, item)) {
        dataItem = item;
      } else {
        setValue(fields.text, value, dataItem);
        setValue(fields.value, value, dataItem);
      }
      this.itemData = dataItem;
      var changeData = {
        text: getValue(fields.text, this.itemData),
        value: getValue(fields.value, this.itemData),
        index: null
      };
      this.setProperties(changeData, true);
      this.setSelection(null, null);
      this.isSelectCustom = true;
      if (previousValue !== this.value) {
        this.onChangeEvent(e);
      }
    };
    ComboBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "combobox") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            if (this.readonly) {
              EventHandler.remove(this.inputElement, "input", this.onInput);
              EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
              EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
            } else {
              EventHandler.add(this.inputElement, "input", this.onInput, this);
              EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
              EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
            }
            this.setReadOnly();
            break;
          case "allowFiltering":
            this.setSearchBox();
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              _super.prototype.renderList.call(this);
            }
            break;
          case "allowCustom":
            break;
          default: {
            var comboProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
            if (this.isFiltering() && prop === "dataSource" && isNullOrUndefined(this.list) && this.itemTemplate && this.getModuleName() === "combobox") {
              _super.prototype.renderList.call(this);
            }
            break;
          }
        }
      }
    };
    ComboBox2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.setSearchBox();
      if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this);
      }
      this.renderComplete();
    };
    ComboBox2.prototype.getModuleName = function() {
      return "combobox";
    };
    ComboBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ComboBox2.prototype.filter = function(dataSource, query, fields) {
      _super.prototype.filter.call(this, dataSource, query, fields);
    };
    ComboBox2.prototype.showPopup = function(e) {
      _super.prototype.showPopup.call(this, e);
    };
    ComboBox2.prototype.hidePopup = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData)) {
        var isEscape = this.isEscapeKey;
        if (this.isEscapeKey) {
          Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);
          this.isEscapeKey = false;
        }
        if (this.autofill) {
          this.removeFillSelection();
        }
        var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
        var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : null;
        if (this.inputElement && dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {
          if (this.isSelected) {
            this.onChangeEvent(e);
            this.isSelectCustom = false;
          }
          _super.prototype.hidePopup.call(this, e);
          return;
        }
        if (this.getModuleName() === "combobox" && this.inputElement.value.trim() !== "") {
          var dataSource = this.sortedData;
          var type = this.typeOfData(dataSource).typeof;
          var searchItem = Search(this.inputElement.value, this.liCollections, "Equal", true, dataSource, this.fields, type);
          this.selectedLI = searchItem.item;
          if (isNullOrUndefined(searchItem.index)) {
            searchItem.index = Search(this.inputElement.value, this.liCollections, "StartsWith", true, dataSource, this.fields, type).index;
          }
          this.activeIndex = searchItem.index;
          if (!isNullOrUndefined(this.selectedLI)) {
            this.updateSelectedItem(this.selectedLI, null, true);
          } else if (isEscape) {
            this.isSelectCustom = true;
            this.removeSelection();
          }
        }
        if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
          this.customValue(e);
        }
      }
      if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {
        this.customValue();
      }
      _super.prototype.hidePopup.call(this, e);
    };
    ComboBox2.prototype.focusIn = function() {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.focusIn.call(this);
    };
    ComboBox2.prototype.clear = function() {
      this.value = null;
    };
    ComboBox2.prototype.focusOut = function(e) {
      _super.prototype.focusOut.call(this, e);
    };
    ComboBox2.prototype.getItems = function() {
      return _super.prototype.getItems.call(this);
    };
    ComboBox2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    ComboBox2.prototype.renderHightSearch = function() {
    };
    __decorate22([
      Property(false)
    ], ComboBox2.prototype, "autofill", void 0);
    __decorate22([
      Property(true)
    ], ComboBox2.prototype, "allowCustom", void 0);
    __decorate22([
      Property({})
    ], ComboBox2.prototype, "htmlAttributes", void 0);
    __decorate22([
      Property(false)
    ], ComboBox2.prototype, "allowFiltering", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "query", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "index", void 0);
    __decorate22([
      Property(true)
    ], ComboBox2.prototype, "showClearButton", void 0);
    __decorate22([
      Property(false)
    ], ComboBox2.prototype, "enableRtl", void 0);
    __decorate22([
      Event()
    ], ComboBox2.prototype, "customValueSpecifier", void 0);
    __decorate22([
      Event()
    ], ComboBox2.prototype, "filtering", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "valueTemplate", void 0);
    __decorate22([
      Property("Never")
    ], ComboBox2.prototype, "floatLabelType", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "cssClass", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "headerTemplate", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "footerTemplate", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "placeholder", void 0);
    __decorate22([
      Property("100%")
    ], ComboBox2.prototype, "width", void 0);
    __decorate22([
      Property("300px")
    ], ComboBox2.prototype, "popupHeight", void 0);
    __decorate22([
      Property("100%")
    ], ComboBox2.prototype, "popupWidth", void 0);
    __decorate22([
      Property(false)
    ], ComboBox2.prototype, "readonly", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "text", void 0);
    __decorate22([
      Property(null)
    ], ComboBox2.prototype, "value", void 0);
    ComboBox2 = __decorate22([
      NotifyPropertyChanges
    ], ComboBox2);
    return ComboBox2;
  }(DropDownList)
);

// node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
dropDownListClasses.root = "e-autocomplete";
dropDownListClasses.icon = "e-input-group-icon e-ddl-icon e-search-icon";
var AutoComplete = (
  /** @class */
  function(_super) {
    __extends23(AutoComplete2, _super);
    function AutoComplete2(options, element) {
      var _this_1 = _super.call(this, options, element) || this;
      _this_1.isFiltered = false;
      _this_1.searchList = false;
      return _this_1;
    }
    AutoComplete2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    AutoComplete2.prototype.getLocaleName = function() {
      return "auto-complete";
    };
    AutoComplete2.prototype.getNgDirective = function() {
      return "EJS-AUTOCOMPLETE";
    };
    AutoComplete2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.value) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.value) ? this.value : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else if (!this.enableVirtualization || this.enableVirtualization && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.virtualGroupDataSource)) {
          var mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount) && !this.enableVirtualization) {
        if (this.suggestionCount !== 20) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      if (this.enableVirtualization && (!(this.dataSource instanceof DataManager) || this.dataSource instanceof DataManager && this.virtualGroupDataSource)) {
        var takeValue = this.getTakeValue();
        filterQuery.skip(this.virtualItemStartIndex);
        filterQuery.take(takeValue);
        filterQuery.requiresCount();
      }
      return filterQuery;
    };
    AutoComplete2.prototype.searchLists = function(e) {
      var _this_1 = this;
      this.isTyped = true;
      this.isDataFetched = this.isSelectCustom = false;
      this.checkAndResetCache();
      if (isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this, e, true);
      }
      this.queryString = this.filterInput.value;
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields, null, e);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this_1.isFiltered = true;
          _this_1.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this_1.isFiltered && !eventArgs2.preventDefaultAction) {
          _this_1.searchList = true;
          _this_1.filterAction(_this_1.dataSource, null, _this_1.fields, e);
        }
      });
    };
    AutoComplete2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.filterAction(dataSource, query, fields);
    };
    AutoComplete2.prototype.filterAction = function(dataSource, query, fields, e) {
      this.beforePopupOpen = true;
      var isNoDataElement = this.list.classList.contains("e-nodata");
      if (this.queryString !== "" && this.queryString.length >= this.minLength) {
        if (this.enableVirtualization && this.isFiltering() && this.isTyped) {
          this.isPreventScrollAction = true;
          this.list.scrollTop = 0;
          this.previousStartIndex = 0;
          this.virtualListInfo = null;
        }
        this.resetList(dataSource, fields, query, e);
        if (this.enableVirtualization && isNoDataElement && !this.list.classList.contains("e-nodata")) {
          if (!this.list.querySelector(".e-virtual-ddl-content")) {
            this.list.appendChild(this.createElement("div", {
              className: "e-virtual-ddl-content",
              styles: this.getTransformValues()
            })).appendChild(this.list.querySelector(".e-list-parent"));
          }
          if (!this.list.querySelector(".e-virtual-ddl")) {
            var virualElement = this.createElement("div", {
              id: this.element.id + "_popup",
              className: "e-virtual-ddl",
              styles: this.GetVirtualTrackHeight()
            });
            document.getElementsByClassName("e-popup")[0].querySelector(".e-dropdownbase").appendChild(virualElement);
          }
        }
        if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
          this.getFilteringSkeletonCount();
        }
      } else {
        this.hidePopup(e);
        this.beforePopupOpen = false;
      }
      this.renderReactTemplates();
    };
    AutoComplete2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
        this.checkAndResetCache();
      }
      if (this.beforePopupOpen) {
        this.hidePopup();
      }
    };
    AutoComplete2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      if (!this.enableVirtualization) {
        this.fixedHeaderElement = null;
      }
      if (this.getModuleName() === "autocomplete" && !(this.dataSource instanceof DataManager) || this.getModuleName() === "autocomplete" && this.dataSource instanceof DataManager && this.totalItemCount != 0) {
        this.getFilteringSkeletonCount();
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      var item = this.list.querySelector("." + dropDownListClasses.li);
      if (!isNullOrUndefined(item)) {
        removeClass([item], dropDownListClasses.focus);
      }
      this.postBackAction();
    };
    AutoComplete2.prototype.postBackAction = function() {
      if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {
        var items = [this.liCollections[0]];
        var dataSource = this.listData;
        var type = this.typeOfData(dataSource).typeof;
        var searchItem = Search(this.inputElement.value, items, "StartsWith", this.ignoreCase, dataSource, this.fields, type);
        this.searchList = false;
        if (!isNullOrUndefined(searchItem.item)) {
          _super.prototype.setAutoFill.call(this, this.liCollections[0], true);
        }
      }
    };
    AutoComplete2.prototype.setSelection = function(li, e) {
      if (!this.isValidLI(li)) {
        this.selectedLI = li;
        return;
      }
      if (!isNullOrUndefined(e) && e.type === "keydown" && e.action !== "enter" && e.action !== "tab" && this.isValidLI(li)) {
        var value = this.getFormattedValue(li.getAttribute("data-value"));
        this.activeIndex = this.getIndexByValue(value);
        this.setHoverList(li);
        this.selectedLI = li;
        this.setScrollPosition(e);
        if (this.autofill && this.isPopupOpen) {
          this.preventAutoFill = false;
          var isKeyNavigate = e && e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown";
          _super.prototype.setAutoFill.call(this, li, isKeyNavigate);
        }
      } else {
        _super.prototype.setSelection.call(this, li, e);
      }
    };
    AutoComplete2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this_1 = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            if (_this_1.element.tagName === _this_1.getNgDirective() && _this_1.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
              }, 0);
            } else {
              var isHtmlElement = /<[^>]*>/g.test(e.item.innerText);
              if (isHtmlElement) {
                e.item.innerText = e.item.innerText.replace(/[\u00A0-\u9999<>&]/g, function(match) {
                  return "&#" + match.charCodeAt(0) + ";";
                });
              }
              highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
          }
          itemCreated_1.apply(_this_1, [e]);
        };
      }
      return fields;
    };
    AutoComplete2.prototype.isFiltering = function() {
      return true;
    };
    AutoComplete2.prototype.renderPopup = function(e) {
      if (!this.enableVirtualization) {
        this.list.scrollTop = 0;
      }
      _super.prototype.renderPopup.call(this, e);
    };
    AutoComplete2.prototype.isEditTextBox = function() {
      return false;
    };
    AutoComplete2.prototype.isPopupButton = function() {
      return this.showPopupButton;
    };
    AutoComplete2.prototype.isSelectFocusItem = function(element) {
      return false;
    };
    AutoComplete2.prototype.setInputValue = function(newProp, oldProp) {
      var oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;
      var value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;
      if (value && this.typedString === "" && !this.allowCustom && !(this.dataSource instanceof DataManager)) {
        var checkFields_1_1 = this.typeOfData(this.dataSource).typeof === "string" ? "" : this.fields.value;
        var listLength_1 = this.getItems().length;
        var query = new Query();
        var _this_2 = this;
        new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields_1_1, "equal", value))).then(function(e) {
          if (e.result.length > 0) {
            _this_2.value = checkFields_1_1 !== "" ? e.result[0][_this_2.fields.value].toString() : e.result[0].toString();
            _this_2.addItem(e.result, listLength_1);
            _this_2.updateValues();
          } else {
            newProp && newProp.text ? _this_2.setOldText(oldValue) : newProp && newProp.value ? _this_2.setOldValue(oldValue) : _this_2.updateValues();
          }
        });
      } else if (newProp) {
        newProp.text ? this.setOldText(oldValue) : this.setOldValue(oldValue);
      }
    };
    AutoComplete2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      this.preventAutoFill = true;
      if (isNullOrUndefined(this.list)) {
        this.renderList(e);
      } else {
        this.resetList(this.dataSource, this.fields, null, e);
      }
    };
    AutoComplete2.prototype.hidePopup = function(e) {
      _super.prototype.hidePopup.call(this, e);
      this.activeIndex = null;
      this.virtualListInfo = this.viewPortInfo;
      this.previousStartIndex = this.viewPortInfo.startIndex;
      this.startIndex = this.viewPortInfo.startIndex;
      this.previousEndIndex = this.viewPortInfo.endIndex;
    };
    AutoComplete2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "autocomplete") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "showPopupButton":
            if (this.showPopupButton) {
              var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);
              this.inputWrapper.buttons[0] = button;
              Input.calculateWidth(this.inputElement, this.inputWrapper.container);
              if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
                this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
              }
              if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {
                EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
              }
            } else {
              detach(this.inputWrapper.buttons[0]);
              this.inputWrapper.buttons[0] = null;
            }
            break;
          default: {
            var atcProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
            break;
          }
        }
      }
    };
    AutoComplete2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    AutoComplete2.prototype.getModuleName = function() {
      return "autocomplete";
    };
    AutoComplete2.prototype.render = function() {
      _super.prototype.render.call(this);
    };
    __decorate23([
      Complex({ value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], AutoComplete2.prototype, "fields", void 0);
    __decorate23([
      Property(true)
    ], AutoComplete2.prototype, "ignoreCase", void 0);
    __decorate23([
      Property(false)
    ], AutoComplete2.prototype, "showPopupButton", void 0);
    __decorate23([
      Property(false)
    ], AutoComplete2.prototype, "highlight", void 0);
    __decorate23([
      Property(20)
    ], AutoComplete2.prototype, "suggestionCount", void 0);
    __decorate23([
      Property({})
    ], AutoComplete2.prototype, "htmlAttributes", void 0);
    __decorate23([
      Property(null)
    ], AutoComplete2.prototype, "query", void 0);
    __decorate23([
      Property(1)
    ], AutoComplete2.prototype, "minLength", void 0);
    __decorate23([
      Property("Contains")
    ], AutoComplete2.prototype, "filterType", void 0);
    __decorate23([
      Event()
    ], AutoComplete2.prototype, "filtering", void 0);
    __decorate23([
      Property(null)
    ], AutoComplete2.prototype, "index", void 0);
    __decorate23([
      Property("Never")
    ], AutoComplete2.prototype, "floatLabelType", void 0);
    __decorate23([
      Property(null)
    ], AutoComplete2.prototype, "valueTemplate", void 0);
    __decorate23([
      Property(null)
    ], AutoComplete2.prototype, "filterBarPlaceholder", void 0);
    __decorate23([
      Property(false)
    ], AutoComplete2.prototype, "allowFiltering", void 0);
    __decorate23([
      Property(null)
    ], AutoComplete2.prototype, "text", void 0);
    AutoComplete2 = __decorate23([
      NotifyPropertyChanges
    ], AutoComplete2);
    return AutoComplete2;
  }(ComboBox)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/float-label.js
var FLOATLINE = "e-float-line";
var FLOATTEXT = "e-float-text";
var LABELTOP = "e-label-top";
var LABELBOTTOM = "e-label-bottom";
function createFloatLabel(overAllWrapper, searchWrapper, element, inputElement, value, floatLabelType, placeholder) {
  var floatLinelement = createElement("span", { className: FLOATLINE });
  var floatLabelElement = createElement("label", { className: FLOATTEXT });
  var id = element.getAttribute("id") ? element.getAttribute("id") : getUniqueID("ej2_multiselect");
  element.id = id;
  if (!isNullOrUndefined(element.id) && element.id !== "") {
    floatLabelElement.id = "label_" + element.id.replace(/ /g, "_");
    attributes(inputElement, { "aria-labelledby": floatLabelElement.id });
  }
  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== "") {
    floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);
    inputElement.removeAttribute("placeholder");
  }
  floatLabelElement.innerText = encodePlaceholder(placeholder);
  searchWrapper.appendChild(floatLinelement);
  searchWrapper.appendChild(floatLabelElement);
  overAllWrapper.classList.add("e-float-input");
  updateFloatLabelState(value, floatLabelElement);
  if (floatLabelType === "Always") {
    if (floatLabelElement.classList.contains(LABELBOTTOM)) {
      removeClass([floatLabelElement], LABELBOTTOM);
    }
    addClass([floatLabelElement], LABELTOP);
  }
}
function updateFloatLabelState(value, label) {
  if (value && value.length > 0) {
    addClass([label], LABELTOP);
    removeClass([label], LABELBOTTOM);
  } else {
    removeClass([label], LABELTOP);
    addClass([label], LABELBOTTOM);
  }
}
function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
  var placeholderElement = componentWrapper.querySelector("." + FLOATTEXT);
  var floatLine = componentWrapper.querySelector("." + FLOATLINE);
  var placeholderText;
  if (!isNullOrUndefined(placeholderElement)) {
    placeholderText = placeholderElement.innerText;
    detach(searchWrapper.querySelector("." + FLOATTEXT));
    setPlaceHolder(value, inputElement, placeholderText);
    if (!isNullOrUndefined(floatLine)) {
      detach(searchWrapper.querySelector("." + FLOATLINE));
    }
  } else {
    placeholderText = placeholder !== null ? placeholder : "";
    setPlaceHolder(value, inputElement, placeholderText);
  }
  overAllWrapper.classList.remove("e-float-input");
}
function setPlaceHolder(value, inputElement, placeholder) {
  if (value && value.length) {
    inputElement.placeholder = "";
  } else {
    inputElement.placeholder = placeholder;
  }
}
function floatLabelFocus(overAllWrapper, componentWrapper) {
  overAllWrapper.classList.add("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (!isNullOrUndefined(label)) {
    addClass([label], LABELTOP);
    if (label.classList.contains(LABELBOTTOM)) {
      removeClass([label], LABELBOTTOM);
    }
  }
}
function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
  overAllWrapper.classList.remove("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (value && value.length <= 0 && floatLabelType === "Auto" && !isNullOrUndefined(label)) {
    if (label.classList.contains(LABELTOP)) {
      removeClass([label], LABELTOP);
    }
    addClass([label], LABELBOTTOM);
  }
}
function encodePlaceholder(placeholder) {
  var result = "";
  if (!isNullOrUndefined(placeholder) && placeholder !== "") {
    var spanElement = document.createElement("span");
    spanElement.innerHTML = '<input  placeholder="' + placeholder + '"/>';
    var hiddenInput = spanElement.children[0];
    result = hiddenInput.placeholder;
  }
  return result;
}

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/multi-select.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FOCUS3 = "e-input-focus";
var DISABLED5 = "e-disabled";
var OVER_ALL_WRAPPER = "e-multiselect e-input-group e-control-wrapper";
var ELEMENT_WRAPPER = "e-multi-select-wrapper";
var ELEMENT_MOBILE_WRAPPER = "e-mob-wrapper";
var HIDE_LIST = "e-hide-listitem";
var DELIMITER_VIEW = "e-delim-view";
var CHIP_WRAPPER2 = "e-chips-collection";
var CHIP2 = "e-chips";
var CHIP_CONTENT2 = "e-chipcontent";
var CHIP_CLOSE2 = "e-chips-close";
var CHIP_SELECTED = "e-chip-selected";
var SEARCHBOX_WRAPPER = "e-searcher";
var DELIMITER_VIEW_WRAPPER = "e-delimiter";
var ZERO_SIZE = "e-zero-size";
var REMAIN_WRAPPER2 = "e-remain";
var CLOSEICON_CLASS2 = "e-chips-close e-close-hooker";
var DELIMITER_WRAPPER = "e-delim-values";
var POPUP_WRAPPER = "e-ddl e-popup e-multi-select-list-wrapper";
var INPUT_ELEMENT = "e-dropdownbase";
var RTL_CLASS = "e-rtl";
var CLOSE_ICON_HIDE = "e-close-icon-hide";
var MOBILE_CHIP = "e-mob-chip";
var FOOTER2 = "e-ddl-footer";
var HEADER3 = "e-ddl-header";
var DISABLE_ICON = "e-ddl-disable-icon";
var SPINNER_CLASS2 = "e-ms-spinner-icon";
var HIDDEN_ELEMENT = "e-multi-hidden";
var destroy = "destroy";
var dropdownIcon = "e-input-group-icon e-ddl-icon";
var iconAnimation = "e-icon-anim";
var TOTAL_COUNT_WRAPPER2 = "e-delim-total";
var BOX_ELEMENT = "e-multiselect-box";
var FILTERPARENT = "e-filter-parent";
var CUSTOM_WIDTH = "e-search-custom-width";
var FILTERINPUT = "e-input-filter";
var MultiSelect = (
  /** @class */
  function(_super) {
    __extends24(MultiSelect2, _super);
    function MultiSelect2(option, element) {
      var _this = _super.call(this, option, element) || this;
      _this.clearIconWidth = 0;
      _this.previousFilterText = "";
      _this.isValidKey = false;
      _this.selectAllEventData = [];
      _this.selectAllEventEle = [];
      _this.resetMainList = null;
      _this.resetFilteredData = false;
      _this.scrollFocusStatus = false;
      _this.keyDownStatus = false;
      return _this;
    }
    MultiSelect2.prototype.enableRTL = function(state) {
      if (state) {
        this.overAllWrapper.classList.add(RTL_CLASS);
      } else {
        this.overAllWrapper.classList.remove(RTL_CLASS);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
    };
    MultiSelect2.prototype.requiredModules = function() {
      var modules = [];
      if (this.mode === "CheckBox") {
        this.isGroupChecking = this.enableGroupCheckBox;
        if (this.enableGroupCheckBox) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.enableSelectionOrder = false;
          this.isProtectedOnChange = prevOnChange;
        }
        this.allowCustomValue = false;
        this.hideSelectedItem = false;
        this.closePopupOnSelect = false;
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    MultiSelect2.prototype.updateHTMLAttribute = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          switch (htmlAttr) {
            case "class": {
              var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.overAllWrapper], updatedClassValue.split(" "));
                addClass([this.popupWrapper], updatedClassValue.split(" "));
              }
              break;
            }
            case "disabled":
              this.enable(false);
              break;
            case "placeholder":
              if (!this.placeholder) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
                this.setProperties({ placeholder: this.inputElement.placeholder }, true);
                this.refreshPlaceHolder();
              }
              break;
            default: {
              var defaultAttr = ["id"];
              var validateAttr = ["name", "required", "aria-required", "form"];
              var containerAttr = ["title", "role", "style", "class"];
              if (defaultAttr.indexOf(htmlAttr) > -1) {
                this.element.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (containerAttr.indexOf(htmlAttr) > -1) {
                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr !== "size" && !isNullOrUndefined(this.inputElement)) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
              break;
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateReadonly = function(state) {
      if (!isNullOrUndefined(this.inputElement)) {
        if (state || this.mode === "CheckBox") {
          this.inputElement.setAttribute("readonly", "true");
        } else {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    MultiSelect2.prototype.updateClearButton = function(state) {
      if (state) {
        if (this.overAllClear.parentNode) {
          this.overAllClear.style.display = "";
        } else {
          this.componentWrapper.appendChild(this.overAllClear);
        }
        this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
      } else {
        this.overAllClear.style.display = "none";
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
    };
    MultiSelect2.prototype.updateCssClass = function() {
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        var updatedCssClassValues = this.cssClass;
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
        if (updatedCssClassValues !== "") {
          addClass([this.overAllWrapper], updatedCssClassValues.split(" "));
          addClass([this.popupWrapper], updatedCssClassValues.split(" "));
        }
      }
    };
    MultiSelect2.prototype.updateOldPropCssClass = function(oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
        if (oldClass !== "") {
          removeClass([this.overAllWrapper], oldClass.split(" "));
          removeClass([this.popupWrapper], oldClass.split(" "));
        }
      }
    };
    MultiSelect2.prototype.onPopupShown = function(e) {
      var _this = this;
      if (Browser.isDevice && (this.mode === "CheckBox" && this.allowFiltering)) {
        var proxy_1 = this;
        window.onpopstate = function() {
          proxy_1.hidePopup();
          proxy_1.inputElement.focus();
        };
        history.pushState({}, "");
      }
      var animModel = { name: "FadeIn", duration: 100 };
      var eventArgs = { popup: this.popupObj, event: e, cancel: false, animation: animModel };
      this.trigger("open", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.focusAtFirstListItem();
          if (_this.popupObj) {
            document.body.appendChild(_this.popupObj.element);
          }
          if (_this.mode === "CheckBox" && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {
            _this.updateListItems(_this.list.querySelectorAll("li.e-list-item"), _this.mainList.querySelectorAll("li.e-list-item"));
          }
          if (_this.mode === "CheckBox" || _this.showDropDownIcon) {
            addClass([_this.overAllWrapper], [iconAnimation]);
          }
          _this.refreshPopup();
          _this.renderReactTemplates();
          if (_this.popupObj) {
            _this.popupObj.show(eventArgs2.animation, _this.zIndex === 1e3 ? _this.element : null);
          }
          attributes(_this.inputElement, { "aria-expanded": "true", "aria-owns": _this.element.id + "_popup", "aria-controls": _this.element.id });
          _this.updateAriaActiveDescendant();
          if (_this.isFirstClick) {
            _this.loadTemplate();
          }
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            EventHandler.add(_this.popupObj.element, "click", _this.clickHandler, _this);
          }
        }
      });
    };
    MultiSelect2.prototype.updateListItems = function(listItems, mainListItems) {
      for (var i = 0; i < listItems.length; i++) {
        this.findGroupStart(listItems[i]);
        this.findGroupStart(mainListItems[i]);
      }
      this.deselectHeader();
    };
    MultiSelect2.prototype.loadTemplate = function() {
      this.refreshListItems(null);
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
      this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
    };
    MultiSelect2.prototype.setScrollPosition = function() {
      if ((!this.hideSelectedItem && this.mode !== "CheckBox" || this.mode === "CheckBox" && !this.enableSelectionOrder) && (!isNullOrUndefined(this.value) && this.value.length > 0)) {
        var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", this.value[this.value.length - 1]);
        if (!isNullOrUndefined(valueEle)) {
          this.scrollBottom(valueEle);
        }
      }
    };
    MultiSelect2.prototype.focusAtFirstListItem = function() {
      if (this.ulElement && this.ulElement.querySelector("li." + dropDownBaseClasses.li)) {
        var element = void 0;
        if (this.mode === "CheckBox") {
          this.removeFocus();
          return;
        } else {
          element = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
        }
        if (element !== null) {
          this.removeFocus();
          this.addListFocus(element);
        }
      }
    };
    MultiSelect2.prototype.focusAtLastListItem = function(data) {
      var activeElement;
      if (data) {
        activeElement = Search(data, this.liCollections, "StartsWith", this.ignoreCase);
      } else {
        if (this.value && this.value.length) {
          Search(this.value[this.value.length - 1], this.liCollections, "StartsWith", this.ignoreCase);
        } else {
          activeElement = null;
        }
      }
      if (activeElement && activeElement.item !== null) {
        this.addListFocus(activeElement.item);
        if ((this.allowCustomValue || this.allowFiltering) && this.isPopupOpen() && this.closePopupOnSelect || this.closePopupOnSelect) {
          this.scrollBottom(activeElement.item, activeElement.index);
        }
      }
    };
    MultiSelect2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false"
      };
      return ariaAttributes;
    };
    MultiSelect2.prototype.updateListARIA = function() {
      if (!isNullOrUndefined(this.ulElement)) {
        attributes(this.ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false", "aria-label": "list" });
      }
      var disableStatus = !isNullOrUndefined(this.inputElement) && this.inputElement.disabled ? true : false;
      if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, this.getAriaAttributes());
      }
      if (disableStatus) {
        attributes(this.inputElement, { "aria-disabled": "true" });
      }
      this.ensureAriaDisabled(disableStatus ? "true" : "false");
    };
    MultiSelect2.prototype.ensureAriaDisabled = function(status) {
      if (this.htmlAttributes && this.htmlAttributes["aria-disabled"]) {
        var attr = this.htmlAttributes;
        extend(attr, { "aria-disabled": status }, attr);
        this.setProperties({ htmlAttributes: attr }, true);
      }
    };
    MultiSelect2.prototype.removelastSelection = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem !== null) {
        this.removeSelectedChip(e);
        return;
      }
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var value = elements[elements.length - 1].getAttribute("data-value");
      if (!isNullOrUndefined(this.value)) {
        this.tempValues = this.value.slice();
      }
      var customValue = this.getFormattedValue(value);
      if (this.allowCustomValue && (value !== "false" && customValue === false || !isNullOrUndefined(customValue) && customValue.toString() === "NaN")) {
        customValue = value;
      }
      this.removeValue(customValue, e);
      this.removeChipSelection();
      this.updateDelimeter(this.delimiterChar, e);
      this.makeTextBoxEmpty();
      if (this.mainList && this.listData) {
        this.refreshSelection();
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      this.renderPopup();
      this.onPopupShown();
    };
    MultiSelect2.prototype.targetElement = function() {
      this.targetInputElement = this.inputElement;
      if (this.mode === "CheckBox" && this.allowFiltering) {
        this.notify("targetElement", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      return this.targetInputElement.value;
    };
    MultiSelect2.prototype.getForQuery = function(valuecheck) {
      var predicate;
      var field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
      for (var i = 0; i < valuecheck.length; i++) {
        if (i === 0) {
          predicate = new Predicate(field, "equal", valuecheck[i]);
        } else {
          predicate = predicate.or(field, "equal", valuecheck[i]);
        }
      }
      if (this.dataSource instanceof DataManager && this.dataSource.adaptor instanceof JsonAdaptor) {
        return new Query().where(predicate);
      } else {
        return this.getQuery(this.query).clone().where(predicate);
      }
    };
    MultiSelect2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      this.updateSelectElementData(this.allowFiltering);
      var proxy = this;
      if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
        for (var i = 0; i < this.value.length; i++) {
          var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", proxy.value[i]);
          if (!checkEle && !(this.dataSource instanceof DataManager)) {
            this.value.splice(i, 1);
            i -= 1;
          }
        }
      }
      var valuecheck = [];
      if (!isNullOrUndefined(this.value)) {
        valuecheck = this.presentItemValue(this.ulElement);
      }
      if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {
        this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
      } else {
        this.updateActionList(ulElement, list, e);
      }
      if (this.dataSource instanceof DataManager && this.allowCustomValue && !this.isCustomRendered && this.inputElement.value && this.inputElement.value !== "") {
        var query = new Query();
        query = this.allowFiltering ? query.where(this.fields.text, "startswith", this.inputElement.value, this.ignoreCase, this.ignoreAccent) : query;
        this.checkForCustomValue(query, this.fields);
        this.isCustomRendered = true;
      }
      if (this.dataSource instanceof DataManager && this.mode === "CheckBox" && this.allowFiltering) {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.updateActionList = function(ulElement, list, e, isUpdated) {
      if (this.mode === "CheckBox" && this.showSelectAll) {
        this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      if (!this.mainList && !this.mainData) {
        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
        this.mainData = list;
        this.mainListCollection = this.liCollections;
      } else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {
        this.mainData = list;
      }
      if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== "") {
        this.checkForCustomValue(this.tempQuery, this.fields);
        if (this.isCustomRendered) {
          return;
        }
      }
      if (this.value && this.value.length && (this.mode !== "CheckBox" && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== "" || this.mode === "CheckBox" || (this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering && this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === "")) {
        this.refreshSelection();
      }
      this.updateListARIA();
      this.unwireListEvents();
      this.wireListEvents();
      if (!isNullOrUndefined(this.setInitialValue)) {
        this.setInitialValue();
      }
      if (!isNullOrUndefined(this.selectAllAction)) {
        this.selectAllAction();
      }
      if (this.setDynValue) {
        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.initialTextUpdate();
        }
        this.initialValueUpdate();
        this.initialUpdate();
        this.refreshPlaceHolder();
        if (this.mode !== "CheckBox" && this.changeOnBlur) {
          this.updateValueState(null, this.value, null);
        }
      }
      this.renderPopup();
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.onPopupShown(e);
      }
    };
    MultiSelect2.prototype.refreshSelection = function() {
      var value;
      var element;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (!isNullOrUndefined(this.value)) {
        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
          value = this.value[index];
          element = this.findListElement(this.list, "li", "data-value", value);
          if (element) {
            addClass([element], className);
            if (this.hideSelectedItem && element.previousSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element.nextElementSibling || element.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {
              addClass([element.previousElementSibling], className);
            }
            if (this.hideSelectedItem && this.fields.groupBy && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
              this.hideGroupItem(value);
            }
            if (this.hideSelectedItem && element.classList.contains(dropDownBaseClasses.focus)) {
              removeClass([element], dropDownBaseClasses.focus);
              var listEle = element.parentElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
              if (listEle.length > 0) {
                addClass([listEle[0]], dropDownBaseClasses.focus);
                this.updateAriaActiveDescendant();
              } else {
                if (!(this.list && this.list.querySelectorAll("." + dropDownBaseClasses.li).length > 0)) {
                  this.l10nUpdate();
                  addClass([this.list], dropDownBaseClasses.noData);
                }
              }
            }
            element.setAttribute("aria-selected", "true");
            if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
              var ariaValue = element.getElementsByClassName("e-check").length;
              if (ariaValue === 0) {
                var args = {
                  module: "CheckBoxSelection",
                  enable: this.mode === "CheckBox",
                  li: element,
                  e: null
                };
                this.notify("updatelist", args);
              }
            }
          }
        }
      }
      this.checkSelectAll();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.hideGroupItem = function(value) {
      var element;
      var element1;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      element1 = element = this.findListElement(this.ulElement, "li", "data-value", value);
      var i = 0;
      var j = 0;
      var temp = true;
      var temp1 = true;
      do {
        if (element && element.previousElementSibling && (!element.previousElementSibling.classList.contains(HIDE_LIST) && element.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp = false;
        }
        if (!temp || !element || element.previousElementSibling && element.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {
          i = 10;
        } else {
          element = element.previousElementSibling;
        }
        if (element1 && element1.nextElementSibling && (!element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp1 = false;
        }
        if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {
          j = 10;
        } else {
          element1 = element1.nextElementSibling;
        }
      } while (i < 10 || j < 10);
      if (temp && temp1 && !element.previousElementSibling.classList.contains(HIDE_LIST)) {
        addClass([element.previousElementSibling], className);
      } else if (temp && temp1 && element.previousElementSibling.classList.contains(HIDE_LIST)) {
        removeClass([element.previousElementSibling], className);
      }
    };
    MultiSelect2.prototype.getValidLi = function() {
      var liElement = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
      return !isNullOrUndefined(liElement) ? liElement : this.liCollections[0];
    };
    MultiSelect2.prototype.checkSelectAll = function() {
      var groupItemLength = this.list.querySelectorAll("li.e-list-group-item.e-active").length;
      var listItem = this.list.querySelectorAll("li.e-list-item");
      var searchCount = this.list.querySelectorAll("li." + dropDownBaseClasses.li).length;
      var searchActiveCount = this.list.querySelectorAll("li." + dropDownBaseClasses.selected).length;
      if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        searchActiveCount = searchActiveCount - groupItemLength;
      }
      if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && (this.mode === "CheckBox" && this.showSelectAll)) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "check" });
      } else if (searchCount !== searchActiveCount && (this.mode === "CheckBox" && this.showSelectAll)) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
      }
      if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
        for (var i = 0; i < listItem.length; i++) {
          this.findGroupStart(listItem[i]);
        }
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.openClick = function(e) {
      if (!this.openOnClick && this.mode !== "CheckBox" && !this.isPopupOpen()) {
        if (this.targetElement() !== "") {
          this.showPopup();
        } else {
          this.hidePopup(e);
        }
      } else if (!this.openOnClick && this.mode === "CheckBox" && !this.isPopupOpen()) {
        this.showPopup();
      }
    };
    MultiSelect2.prototype.keyUp = function(e) {
      if (this.mode === "CheckBox" && !this.openOnClick) {
        var char = String.fromCharCode(e.keyCode);
        var isWordCharacter = char.match(/\w/);
        if (!isNullOrUndefined(isWordCharacter)) {
          this.isValidKey = true;
        }
      }
      this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;
      this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        this.expandTextbox();
        this.showOverAllClear();
        switch (e.keyCode) {
          default:
            this.search(e);
        }
      }
    };
    MultiSelect2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.remoteFilterAction = true;
      this.dataUpdater(dataSource, query, fields);
    };
    MultiSelect2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.filterAction) {
        if (this.targetElement() !== null) {
          var dataType = this.typeOfData(this.dataSource).typeof;
          if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
            filterQuery.where("", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          } else {
            var fields = this.fields;
            filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : "", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          }
        }
        return filterQuery;
      } else {
        return query ? query : this.query ? this.query : new Query();
      }
    };
    MultiSelect2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      if (this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.backCommand) {
          this.remoteCustomValue = false;
          if (this.allowCustomValue && list.querySelectorAll("li").length == 0 && this.mainData.length > 0) {
            this.mainData = [];
          }
          this.onActionComplete(list, this.mainData);
          if (this.value && this.value.length) {
            this.refreshSelection();
          }
          if (this.keyCode !== 8) {
            this.focusAtFirstListItem();
          }
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
        }
      } else {
        this.resetList(dataSource, fields, query);
        if (this.allowCustomValue) {
          if (!(dataSource instanceof DataManager)) {
            this.checkForCustomValue(query, fields);
          } else {
            this.remoteCustomValue = true;
            this.tempQuery = query;
          }
        }
      }
      this.refreshPopup();
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.checkForCustomValue = function(query, fields) {
      var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);
      var field = fields ? fields : this.fields;
      if (this.allowCustomValue && dataChecks) {
        var value = this.inputElement.value;
        var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;
        if (customData && typeof customData !== "string" && typeof customData !== "number" && typeof customData !== "boolean") {
          var dataItem = {};
          setValue(field.text, value, dataItem);
          if (typeof getValue(this.fields.value ? this.fields.value : "value", customData) === "number") {
            setValue(field.value, Math.random(), dataItem);
          } else {
            setValue(field.value, value, dataItem);
          }
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, dataItem);
          this.resetList(tempData, field, query);
        } else if (this.listData) {
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, this.inputElement.value);
          tempData[0] = typeof customData === "number" && !isNaN(parseFloat(tempData[0])) ? parseFloat(tempData[0]) : tempData[0];
          tempData[0] = typeof customData === "boolean" ? tempData[0] === "true" ? true : tempData[0] === "false" ? false : tempData[0] : tempData[0];
          this.resetList(tempData, field);
        }
      } else if (this.listData && this.mainData && !dataChecks && this.allowCustomValue) {
        if (this.allowFiltering && this.isRemoteSelection && this.remoteCustomValue) {
          this.isRemoteSelection = false;
          this.resetList(this.listData, field, query);
        } else if (!this.allowFiltering && this.list) {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var activeElement = Search(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
          }
        }
      }
      if (this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.getNgDirective = function() {
      return "EJS-MULTISELECT";
    };
    MultiSelect2.prototype.wrapperClick = function(e) {
      this.setDynValue = false;
      if (!this.enabled) {
        return;
      }
      if (e.target === this.overAllClear) {
        e.preventDefault();
        return;
      }
      if (!this.inputFocus) {
        this.inputElement.focus();
      }
      if (!this.readonly) {
        if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE2) !== -1) {
          if (this.isPopupOpen()) {
            this.refreshPopup();
          }
          return;
        }
        if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
          this.showPopup(e);
        } else {
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.showOverAllClear();
            this.inputFocus = true;
            if (!this.overAllWrapper.classList.contains(FOCUS3)) {
              this.overAllWrapper.classList.add(FOCUS3);
            }
          }
        }
      }
      if (!(this.targetElement() && this.targetElement() !== "")) {
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.enable = function(state) {
      if (state) {
        this.overAllWrapper.classList.remove(DISABLED5);
        this.inputElement.removeAttribute("disabled");
        attributes(this.inputElement, { "aria-disabled": "false" });
        this.ensureAriaDisabled("false");
      } else {
        this.overAllWrapper.classList.add(DISABLED5);
        this.inputElement.setAttribute("disabled", "true");
        attributes(this.inputElement, { "aria-disabled": "true" });
        this.ensureAriaDisabled("true");
      }
      if (this.enabled !== state) {
        this.enabled = state;
      }
      this.hidePopup();
    };
    MultiSelect2.prototype.onBlurHandler = function(eve, isDocClickFromCheck) {
      var target;
      if (!isNullOrUndefined(eve)) {
        target = eve.relatedTarget;
      }
      if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        } else if (this.floatLabelType === "Auto" && (this.overAllWrapper.classList.contains("e-outline") || this.overAllWrapper.classList.contains("e-filled"))) {
          addClass([this.overAllWrapper], "e-valid-input");
        }
        return;
      }
      if (this.floatLabelType === "Auto" && this.overAllWrapper.classList.contains("e-outline") && this.mode === "CheckBox" && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        removeClass([this.overAllWrapper], "e-valid-input");
      }
      if (this.mode === "CheckBox" && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {
        this.inputFocus = false;
        this.overAllWrapper.classList.remove(FOCUS3);
        return;
      }
      if (this.scrollFocusStatus) {
        if (!isNullOrUndefined(eve)) {
          eve.preventDefault();
        }
        this.inputElement.focus();
        this.scrollFocusStatus = false;
        return;
      }
      this.inputFocus = false;
      this.overAllWrapper.classList.remove(FOCUS3);
      if (this.addTagOnBlur) {
        var dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);
        var listLiElement = this.findListElement(this.list, "li", "data-value", dataChecks);
        var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
        var allowChipAddition = listLiElement && !listLiElement.classList.contains(className) ? true : false;
        if (allowChipAddition) {
          this.updateListSelection(listLiElement, eve);
          if (this.mode === "Delimiter") {
            this.updateDelimeter(this.delimiterChar);
          }
        }
      }
      this.updateDataList();
      if (this.resetMainList) {
        this.mainList = this.resetMainList;
        this.resetMainList = null;
      }
      this.refreshListItems(null);
      if (this.mode !== "Box" && this.mode !== "CheckBox") {
        this.updateDelimView();
      }
      if (this.changeOnBlur) {
        this.updateValueState(eve, this.value, this.tempValues);
        this.dispatchEvent(this.hiddenElement, "change");
      }
      this.overAllClear.style.display = "none";
      if (this.isPopupOpen()) {
        this.hidePopup(eve);
      }
      this.makeTextBoxEmpty();
      this.trigger("blur");
      this.focused = true;
      if (Browser.isDevice && this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.removeChipFocus();
      }
      this.removeChipSelection();
      this.refreshInputHight();
      floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
      this.refreshPlaceHolder();
      if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === "CheckBox") && !isNullOrUndefined(this.mainList)) {
        this.ulElement = this.mainList;
      }
      this.checkPlaceholderSize();
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
    };
    MultiSelect2.prototype.calculateWidth = function() {
      var elementWidth;
      if (this.overAllWrapper) {
        if (!this.showDropDownIcon || this.overAllWrapper.querySelector(".e-label-top")) {
          elementWidth = this.overAllWrapper.clientWidth - 2 * parseInt(getComputedStyle(this.inputElement).paddingRight);
        } else {
          var downIconWidth = this.dropIcon.offsetWidth + parseInt(getComputedStyle(this.dropIcon).marginRight);
          elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * parseInt(getComputedStyle(this.inputElement).paddingRight));
        }
        if (this.floatLabelType === "Auto") {
          Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());
        }
      }
    };
    MultiSelect2.prototype.checkPlaceholderSize = function() {
      if (this.showDropDownIcon) {
        var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        this.setPlaceholderSize(downIconWidth);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);
        }
      }
    };
    MultiSelect2.prototype.setPlaceholderSize = function(downIconWidth) {
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        if (this.dropIcon.offsetWidth !== 0) {
          this.searchWrapper.style.width = "calc(100% - " + (downIconWidth + 10) + "px";
        } else {
          addClass([this.searchWrapper], CUSTOM_WIDTH);
        }
      } else if (!isNullOrUndefined(this.value)) {
        this.searchWrapper.removeAttribute("style");
        removeClass([this.searchWrapper], CUSTOM_WIDTH);
      }
    };
    MultiSelect2.prototype.refreshInputHight = function() {
      if (!isNullOrUndefined(this.searchWrapper)) {
        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === "")) {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        } else {
          this.searchWrapper.classList.add(ZERO_SIZE);
        }
      }
    };
    MultiSelect2.prototype.validateValues = function(newValue, oldValue) {
      return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
    };
    MultiSelect2.prototype.updateValueState = function(event2, newVal, oldVal) {
      var newValue = newVal ? newVal : [];
      var oldValue = oldVal ? oldVal : [];
      if (this.initStatus && this.validateValues(newValue, oldValue)) {
        var eventArgs = {
          e: event2,
          oldValue: oldVal,
          value: newVal,
          isInteracted: event2 ? true : false,
          element: this.element,
          event: event2
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
        this.updateTempValue();
        if (!this.changeOnBlur) {
          this.dispatchEvent(this.hiddenElement, "change");
        }
      }
    };
    MultiSelect2.prototype.updateTempValue = function() {
      if (!this.value) {
        this.tempValues = this.value;
      } else {
        this.tempValues = this.value.slice();
      }
    };
    MultiSelect2.prototype.updateAriaActiveDescendant = function() {
      if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.inputElement, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      }
    };
    MultiSelect2.prototype.getPagingCount = function() {
      var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
      return Math.round(this.list.offsetHeight / parseInt(height, 10));
    };
    MultiSelect2.prototype.pageUpSelection = function(steps) {
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
    };
    MultiSelect2.prototype.pageDownSelection = function(steps) {
      var list = this.getItems();
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
    };
    MultiSelect2.prototype.getItems = function() {
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      return this.ulElement && this.ulElement.querySelectorAll("." + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")") : [];
    };
    MultiSelect2.prototype.focusInHandler = function(e) {
      var _this = this;
      if (this.enabled) {
        this.showOverAllClear();
        this.inputFocus = true;
        if (this.value && this.value.length) {
          if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
            this.chipCollectionWrapper.style.display = "";
          } else {
            this.showDelimWrapper();
          }
          if (this.mode !== "CheckBox") {
            this.viewWrapper.style.display = "none";
          }
        }
        if (this.mode !== "CheckBox") {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        }
        this.checkPlaceholderSize();
        if (this.focused) {
          var args = { isInteracted: e ? true : false, event: e };
          this.trigger("focus", args);
          this.focused = false;
        }
        if (!this.overAllWrapper.classList.contains(FOCUS3)) {
          this.overAllWrapper.classList.add(FOCUS3);
        }
        floatLabelFocus(this.overAllWrapper, this.componentWrapper);
        if (this.isPopupOpen()) {
          this.refreshPopup();
        }
        setTimeout(function() {
          _this.calculateWidth();
        }, 150);
        return true;
      } else {
        return false;
      }
    };
    MultiSelect2.prototype.showDelimWrapper = function() {
      if (this.mode === "CheckBox") {
        this.viewWrapper.style.display = "";
      } else {
        this.delimiterWrapper.style.display = "";
      }
      this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.hideDelimWrapper = function() {
      this.delimiterWrapper.style.display = "none";
      this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.expandTextbox = function() {
      var size = 5;
      if (this.placeholder) {
        size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;
      }
      if (this.inputElement.value.length > size) {
        this.inputElement.size = this.inputElement.value.length;
      } else {
        this.inputElement.size = size;
      }
    };
    MultiSelect2.prototype.isPopupOpen = function() {
      return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
    };
    MultiSelect2.prototype.refreshPopup = function() {
      if (this.popupObj && this.mobFilter) {
        this.popupObj.setProperties({ width: this.calcPopupWidth() });
        this.popupObj.refreshPosition(this.overAllWrapper);
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.checkTextLength = function() {
      return this.targetElement().length < 1;
    };
    MultiSelect2.prototype.popupKeyActions = function(e) {
      switch (e.keyCode) {
        case 38:
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.inputElement.focus();
          }
          e.preventDefault();
          break;
        case 40:
          if (!this.isPopupOpen()) {
            this.showPopup(e);
            e.preventDefault();
          }
          break;
      }
    };
    MultiSelect2.prototype.updateAriaAttribute = function() {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(focusedItem)) {
        this.inputElement.setAttribute("aria-activedescendant", focusedItem.id);
        if (this.allowFiltering) {
          var filterInput2 = this.popupWrapper.querySelector("." + FILTERINPUT);
          filterInput2 && filterInput2.setAttribute("aria-activedescendant", focusedItem.id);
        } else if (this.mode == "CheckBox") {
          this.overAllWrapper.setAttribute("aria-activedescendant", focusedItem.id);
        }
      }
    };
    MultiSelect2.prototype.homeNavigation = function(isHome) {
      this.removeFocus();
      var scrollEle = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (scrollEle.length > 0) {
        var element = scrollEle[isHome ? 0 : scrollEle.length - 1];
        element.classList.add(dropDownBaseClasses.focus);
        this.scrollBottom(element);
        this.updateAriaActiveDescendant();
      }
    };
    MultiSelect2.prototype.onKeyDown = function(e) {
      if (this.readonly || !this.enabled && this.mode !== "CheckBox") {
        return;
      }
      this.keyCode = e.keyCode;
      this.keyDownStatus = true;
      if (e.keyCode > 111 && e.keyCode < 124) {
        return;
      }
      if (e.altKey) {
        this.popupKeyActions(e);
        return;
      } else if (this.isPopupOpen()) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        var activeIndex = void 0;
        switch (e.keyCode) {
          case 36:
          case 35:
            this.homeNavigation(e.keyCode === 36 ? true : false);
            break;
          case 33:
            e.preventDefault();
            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageUpSelection(activeIndex - this.getPagingCount());
              this.updateAriaAttribute();
            }
            return;
          case 34:
            e.preventDefault();
            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageDownSelection(activeIndex + this.getPagingCount());
              this.updateAriaAttribute();
            }
            return;
          case 38:
            this.arrowUp(e);
            break;
          case 40:
            this.arrowDown(e);
            break;
          case 27:
            e.preventDefault();
            this.hidePopup(e);
            if (this.mode === "CheckBox") {
              this.inputElement.focus();
            }
            return;
          case 13:
            e.preventDefault();
            if (this.mode !== "CheckBox") {
              this.selectByKey(e);
            }
            this.checkPlaceholderSize();
            return;
          case 32:
            this.spaceKeySelection(e);
            return;
          case 9:
            e.preventDefault();
            this.hidePopup(e);
            this.inputElement.focus();
            this.overAllWrapper.classList.add(FOCUS3);
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 9:
          case 16:
          case 17:
          case 20:
            return;
          case 40:
            if (this.openOnClick) {
              this.showPopup();
            }
            break;
          case 27:
            e.preventDefault();
            this.escapeAction();
            return;
        }
      }
      if (this.checkTextLength()) {
        this.keyNavigation(e);
      }
      if (this.mode === "CheckBox" && this.enableSelectionOrder) {
        if (this.allowFiltering) {
          this.previousFilterText = this.targetElement();
        }
        this.checkBackCommand(e);
      }
      this.expandTextbox();
      if (!(this.mode === "CheckBox" && this.showSelectAll)) {
        this.refreshPopup();
      }
    };
    MultiSelect2.prototype.arrowDown = function(e) {
      e.preventDefault();
      this.moveByList(1);
      this.keyAction = true;
      if (document.activeElement.classList.contains(FILTERINPUT) || this.mode === "CheckBox" && !this.allowFiltering && document.activeElement !== this.list) {
        EventHandler.add(this.list, "keydown", this.onKeyDown, this);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.arrowUp = function(e) {
      e.preventDefault();
      this.keyAction = true;
      var list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      }
      var focuseElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
      this.focusFirstListItem = !isNullOrUndefined(this.liCollections[0]) ? this.liCollections[0].classList.contains("e-item-focus") : false;
      var index = Array.prototype.slice.call(list).indexOf(focuseElem);
      if (index <= 0 && (this.mode === "CheckBox" && this.allowFiltering)) {
        this.keyAction = false;
        this.notify("inputFocus", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "focus" });
      }
      this.moveByList(-1);
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.spaceKeySelection = function(e) {
      if (this.mode === "CheckBox") {
        var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (!isNullOrUndefined(li) || selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
          e.preventDefault();
          this.keyAction = true;
        }
        this.selectByKey(e);
        if (this.keyAction) {
          var li_1 = this.list.querySelector("li." + dropDownBaseClasses.focus);
          if (!isNullOrUndefined(li_1) && selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
            li_1.classList.remove("e-item-focus");
          }
        }
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.checkBackCommand = function(e) {
      if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === "") {
        this.backCommand = false;
      } else {
        this.backCommand = true;
      }
    };
    MultiSelect2.prototype.keyNavigation = function(e) {
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox" && this.value && this.value.length) {
        switch (e.keyCode) {
          case 37:
            e.preventDefault();
            this.moveBy(-1, e);
            break;
          case 39:
            e.preventDefault();
            this.moveBy(1, e);
            break;
          case 8:
            this.removelastSelection(e);
            break;
          case 46:
            this.removeSelectedChip(e);
            break;
        }
      } else if (e.keyCode === 8 && this.mode === "Delimiter") {
        if (this.value && this.value.length) {
          e.preventDefault();
          var temp = this.value[this.value.length - 1];
          this.removeValue(temp, e);
          this.updateDelimeter(this.delimiterChar, e);
          this.focusAtLastListItem(temp);
        }
      }
    };
    MultiSelect2.prototype.selectByKey = function(e) {
      this.removeChipSelection();
      this.selectListByKey(e);
      if (this.hideSelectedItem) {
        this.focusAtFirstListItem();
      }
    };
    MultiSelect2.prototype.escapeAction = function() {
      var temp = this.tempValues ? this.tempValues.slice() : [];
      if (this.value && this.validateValues(this.value, temp)) {
        if (this.mode !== "CheckBox") {
          this.value = temp;
          this.initialValueUpdate();
        }
        if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
          this.chipCollectionWrapper.style.display = "";
        } else {
          this.showDelimWrapper();
        }
        this.refreshPlaceHolder();
        if (this.value.length) {
          this.showOverAllClear();
        } else {
          this.hideOverAllClear();
        }
      }
      this.makeTextBoxEmpty();
    };
    MultiSelect2.prototype.scrollBottom = function(selectedLI, activeIndex) {
      var currentOffset = this.list.offsetHeight;
      var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextBottom > currentOffset) {
        this.list.scrollTop = nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = nextOffset;
      }
    };
    MultiSelect2.prototype.scrollTop = function(selectedLI, activeIndex) {
      var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
      nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextOffset < 0) {
        this.list.scrollTop = this.list.scrollTop + nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
      }
    };
    MultiSelect2.prototype.selectListByKey = function(e) {
      var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
      var limit = this.value && this.value.length ? this.value.length : 0;
      var target;
      if (li !== null) {
        e.preventDefault();
        if (li.classList.contains("e-active")) {
          limit = limit - 1;
        }
        if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
          this.updateListSelection(li, e);
          this.addListFocus(li);
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
            this.checkPlaceholderSize();
            if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
              target = li.firstElementChild.lastElementChild;
              this.findGroupStart(target);
              this.deselectHeader();
            }
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.makeTextBoxEmpty();
          if (this.mode !== "CheckBox") {
            this.refreshListItems(li.textContent);
          }
          if (!this.changeOnBlur) {
            this.updateValueState(e, this.value, this.tempValues);
          }
          this.refreshPopup();
        } else {
          if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
            target = li.firstElementChild.lastElementChild;
            if (target.classList.contains("e-check")) {
              this.selectAllItem(false, e, li);
            } else {
              this.selectAllItem(true, e, li);
            }
          }
        }
        this.refreshSelection();
        if (this.closePopupOnSelect) {
          this.hidePopup(e);
        }
      }
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
        var selectAllCheckBox = selectAllParent.childNodes[0];
        if (!selectAllCheckBox.classList.contains("e-check")) {
          selectAllCheckBox.classList.add("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(true, e, li);
        } else {
          selectAllCheckBox.classList.remove("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(false, e, li);
        }
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshListItems = function(data) {
      if ((this.allowFiltering || this.mode === "CheckBox" && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
        this.focusAtLastListItem(data);
        if (this.value && this.value.length) {
          this.refreshSelection();
        }
      } else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.removeSelectedChip = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      var temp;
      if (selectedElem !== null) {
        if (!isNullOrUndefined(this.value)) {
          this.tempValues = this.value.slice();
        }
        temp = selectedElem.nextElementSibling;
        if (temp !== null) {
          this.removeChipSelection();
          this.addChipSelection(temp, e);
        }
        this.removeValue(selectedElem.getAttribute("data-value"), e);
        this.makeTextBoxEmpty();
      }
      if (this.closePopupOnSelect) {
        this.hidePopup(e);
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.moveByTop = function(state) {
      var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      var index;
      if (elements.length > 1) {
        this.removeFocus();
        index = state ? 0 : elements.length - 1;
        this.addListFocus(elements[index]);
        this.scrollBottom(elements[index], index);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.clickHandler = function(e) {
      var targetElement = e.target;
      var filterInputClassName = targetElement.className;
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if ((filterInputClassName === "e-input-filter e-input" || filterInputClassName === "e-input-group e-control-wrapper e-input-focus") && selectAllParent.classList.contains("e-item-focus")) {
        selectAllParent.classList.remove("e-item-focus");
      }
    };
    MultiSelect2.prototype.moveByList = function(position) {
      if (this.list) {
        var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
          elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        }
        var selectedElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
        var temp = -1;
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (this.mode === "CheckBox" && this.showSelectAll && position == 1 && !isNullOrUndefined(selectAllParent) && !selectAllParent.classList.contains("e-item-focus") && this.list.getElementsByClassName("e-item-focus").length == 0 && this.liCollections.length > 1) {
          if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.remove("e-item-focus");
          } else if (!selectAllParent.classList.contains("e-item-focus")) {
            selectAllParent.classList.add("e-item-focus");
          }
        } else if (elements.length) {
          if (this.mode === "CheckBox" && this.showSelectAll && !isNullOrUndefined(selectAllParent && position == -1)) {
            if (!this.focusFirstListItem && selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.remove("e-item-focus");
            } else if (this.focusFirstListItem && !selectAllParent.classList.contains("e-item-focus")) {
              selectAllParent.classList.add("e-item-focus");
            }
          }
          for (var index = 0; index < elements.length; index++) {
            if (elements[index] === selectedElem) {
              temp = index;
              break;
            }
          }
          if (position > 0) {
            if (temp < elements.length - 1) {
              this.removeFocus();
              this.addListFocus(elements[++temp]);
              this.updateCheck(elements[temp]);
              this.scrollBottom(elements[temp], temp);
            }
          } else {
            if (temp > 0) {
              this.removeFocus();
              this.addListFocus(elements[--temp]);
              this.updateCheck(elements[temp]);
              this.scrollTop(elements[temp], temp);
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateCheck = function(element) {
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        var checkElement = element.firstElementChild.lastElementChild;
        if (checkElement.classList.contains("e-check")) {
          element.classList.add("e-active");
        } else {
          element.classList.remove("e-active");
        }
      }
    };
    MultiSelect2.prototype.moveBy = function(position, e) {
      var temp;
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem === null) {
        if (position < 0) {
          this.addChipSelection(elements[elements.length - 1], e);
        }
      } else {
        if (position < 0) {
          temp = selectedElem.previousElementSibling;
          if (temp !== null) {
            this.removeChipSelection();
            this.addChipSelection(temp, e);
          }
        } else {
          temp = selectedElem.nextElementSibling;
          this.removeChipSelection();
          if (temp !== null) {
            this.addChipSelection(temp, e);
          }
        }
      }
    };
    MultiSelect2.prototype.chipClick = function(e) {
      if (this.enabled) {
        var elem = closest(e.target, "." + CHIP2);
        this.removeChipSelection();
        this.addChipSelection(elem, e);
      }
    };
    MultiSelect2.prototype.removeChipSelection = function() {
      if (this.chipCollectionWrapper) {
        this.removeChipFocus();
      }
    };
    MultiSelect2.prototype.addChipSelection = function(element, e) {
      addClass([element], CHIP_SELECTED);
      this.trigger("chipSelection", e);
    };
    MultiSelect2.prototype.onChipRemove = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      if (this.enabled && !this.readonly) {
        var element = e.target.parentElement;
        var customVal = element.getAttribute("data-value");
        var value = this.getFormattedValue(customVal);
        if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
          value = customVal;
        }
        if (this.isPopupOpen() && this.mode !== "CheckBox") {
          this.hidePopup(e);
        }
        if (!this.inputFocus) {
          this.inputElement.focus();
        }
        this.removeValue(value, e);
        if (isNullOrUndefined(this.findListElement(this.list, "li", "data-value", value)) && this.mainList && this.listData) {
          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
          this.onActionComplete(list, this.mainData);
        }
        this.updateDelimeter(this.delimiterChar, e);
        if (this.placeholder && this.floatLabelType === "Never") {
          this.makeTextBoxEmpty();
          this.checkPlaceholderSize();
        } else {
          this.inputElement.value = "";
        }
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.makeTextBoxEmpty = function() {
      this.inputElement.value = "";
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshPlaceHolder = function() {
      if (this.placeholder && this.floatLabelType === "Never") {
        if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== "") {
          this.inputElement.placeholder = "";
        } else {
          this.inputElement.placeholder = encodePlaceholder(this.placeholder);
        }
      } else {
        this.setFloatLabelType();
      }
      this.expandTextbox();
    };
    MultiSelect2.prototype.removeAllItems = function(value, eve, isClearAll, element, mainElement) {
      var index = this.value.indexOf(value);
      var removeVal = this.value.slice(0);
      removeVal.splice(index, 1);
      this.setProperties({ value: [].concat([], removeVal) }, true);
      element.setAttribute("aria-selected", "false");
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      removeClass([element], className);
      this.notify("activeList", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        li: element,
        e: this,
        index
      });
      this.invokeCheckboxSelection(element, eve, isClearAll);
      this.updateMainList(true, value, mainElement);
      this.updateChipStatus();
    };
    MultiSelect2.prototype.invokeCheckboxSelection = function(element, eve, isClearAll) {
      this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: eve });
      this.updateAriaActiveDescendant();
      if (this.value && this.value.length !== this.mainData.length && (this.mode === "CheckBox" && this.showSelectAll && !(this.isSelectAll || isClearAll))) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "uncheck"
        });
      }
    };
    MultiSelect2.prototype.removeValue = function(value, eve, length, isClearAll) {
      var _this = this;
      var index = this.value.indexOf(this.getFormattedValue(value));
      if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {
        index = this.value.indexOf(value.toString());
      }
      var targetEle = eve && eve.target;
      isClearAll = isClearAll || targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (index !== -1) {
        var element_1 = this.findListElement(this.list, "li", "data-value", value);
        var val_1 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element_1,
          itemData: val_1,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("removing", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.removeIndex++;
          } else {
            var removeVal = _this.value.slice(0);
            removeVal.splice(index, 1);
            _this.setProperties({ value: [].concat([], removeVal) }, true);
            if (element_1 !== null) {
              var hideElement = _this.findListElement(_this.mainList, "li", "data-value", value);
              element_1.setAttribute("aria-selected", "false");
              removeClass([element_1], className);
              if (hideElement) {
                hideElement.setAttribute("aria-selected", "false");
                removeClass([element_1, hideElement], className);
              }
              _this.notify("activeList", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox",
                li: element_1,
                e: _this,
                index
              });
              _this.invokeCheckboxSelection(element_1, eve, isClearAll);
            }
            if (_this.hideSelectedItem && _this.fields.groupBy && element_1) {
              _this.hideGroupItem(value);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox" && _this.isPopupOpen()) {
              _super.prototype.scrollStop.call(_this);
            }
            _this.updateMainList(true, value);
            _this.removeChip(value);
            _this.updateChipStatus();
            var limit = _this.value && _this.value.length ? _this.value.length : 0;
            if (limit < _this.maximumSelectionLength) {
              var collection = _this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
            _this.trigger("removed", eventArgs2);
            var targetEle_1 = eve && eve.currentTarget;
            var isSelectAll = targetEle_1 && targetEle_1.classList.contains("e-selectall-parent") ? true : null;
            if (!_this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll && _this.isSelectAllTarget)) {
              _this.updateValueState(eve, _this.value, _this.tempValues);
            }
            if (length) {
              _this.selectAllEventData.push(val_1);
              _this.selectAllEventEle.push(element_1);
            }
            if (length === 1) {
              if (!_this.changeOnBlur) {
                _this.updateValueState(eve, _this.value, _this.tempValues);
              }
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: false
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
              _this.selectAllEventEle = [];
            }
            if (isClearAll && (length === 1 || length === null)) {
              _this.clearAllCallback(eve, isClearAll);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.updateMainList = function(state, value, mainElement) {
      if (this.allowFiltering || this.mode === "CheckBox") {
        var element2 = mainElement ? mainElement : this.findListElement(this.mainList, "li", "data-value", value);
        if (element2) {
          if (state) {
            element2.setAttribute("aria-selected", "false");
            removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              removeClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          } else {
            element2.setAttribute("aria-selected", "true");
            addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              addClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          }
        }
      }
    };
    MultiSelect2.prototype.removeChip = function(value) {
      if (this.chipCollectionWrapper) {
        var element = this.findListElement(this.chipCollectionWrapper, "span", "data-value", value);
        if (element) {
          remove(element);
        }
      }
    };
    MultiSelect2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.overAllWrapper.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    MultiSelect2.prototype.updateChipStatus = function() {
      if (this.value && this.value.length) {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "";
        }
        if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
        this.showOverAllClear();
      } else {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "none";
        }
        if (!isNullOrUndefined(this.delimiterWrapper)) {
          this.delimiterWrapper.style.display = "none";
        }
        this.hideOverAllClear();
      }
    };
    MultiSelect2.prototype.addValue = function(value, text, eve) {
      if (!this.value) {
        this.value = [];
      }
      if (this.value.indexOf(value) < 0) {
        this.setProperties({ value: [].concat([], this.value, [value]) }, true);
      }
      var element = this.findListElement(this.list, "li", "data-value", value);
      this.removeFocus();
      if (element) {
        this.addListFocus(element);
        this.addListSelection(element);
      }
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.addChip(text, value, eve);
      }
      if (this.hideSelectedItem && this.fields.groupBy) {
        this.hideGroupItem(value);
      }
      this.updateChipStatus();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.checkMaxSelection = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      if (limit === this.maximumSelectionLength) {
        var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.dispatchSelect = function(value, eve, element, isNotTrigger, length) {
      var _this = this;
      var list = this.listData;
      if (this.initStatus && !isNotTrigger) {
        var val_2 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element,
          itemData: val_2,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (length) {
              _this.selectAllEventData.push(val_2);
              _this.selectAllEventEle.push(element);
            }
            if (length === 1) {
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: true
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
            }
            if (_this.allowCustomValue && _this.isServerRendered && _this.listData !== list) {
              _this.listData = list;
            }
            _this.updateListSelectEventCallback(value, element, eve);
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox") {
              _super.prototype.scrollStop.call(_this);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.addChip = function(text, value, e) {
      if (this.chipCollectionWrapper) {
        this.getChip(text, value, e);
      }
    };
    MultiSelect2.prototype.removeChipFocus = function() {
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2 + "." + CHIP_SELECTED);
      removeClass(elements, CHIP_SELECTED);
      if (Browser.isDevice) {
        var closeElements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP_CLOSE2.split(" ")[0]);
        for (var index = 0; index < closeElements.length; index++) {
          closeElements[index].style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.onMobileChipInteraction = function(e) {
      var chipElem = closest(e.target, "." + CHIP2);
      var chipClose = chipElem.querySelector("span." + CHIP_CLOSE2.split(" ")[0]);
      if (this.enabled && !this.readonly) {
        if (!chipElem.classList.contains(CHIP_SELECTED)) {
          this.removeChipFocus();
          chipClose.style.display = "";
          chipElem.classList.add(CHIP_SELECTED);
        }
        this.refreshPopup();
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.multiCompiler = function(multiselectTemplate) {
      var checkTemplate = false;
      if (typeof multiselectTemplate !== "function" && multiselectTemplate) {
        try {
          checkTemplate = selectAll(multiselectTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    MultiSelect2.prototype.encodeHtmlEntities = function(input) {
      return input.replace(/[\u00A0-\u9999<>&]/g, function(match) {
        return "&#" + match.charCodeAt(0) + ";";
      });
    };
    MultiSelect2.prototype.getChip = function(data, value, e) {
      var _this = this;
      var itemData = { text: value, value };
      var chip = this.createElement("span", {
        className: CHIP2,
        attrs: { "data-value": value, "title": data }
      });
      var compiledString;
      var chipContent = this.createElement("span", { className: CHIP_CONTENT2 });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE2 });
      if (this.mainData) {
        itemData = this.getDataByValue(value);
      }
      if (this.valueTemplate && !isNullOrUndefined(itemData)) {
        var valuecheck = this.multiCompiler(this.valueTemplate);
        if (typeof this.valueTemplate !== "function" && valuecheck) {
          compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());
        } else {
          compiledString = compile(this.valueTemplate);
        }
        var valueCompTemp = compiledString(itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, chipContent);
        if (valueCompTemp && valueCompTemp.length > 0) {
          append(valueCompTemp, chipContent);
        }
        this.renderReactTemplates();
      } else if (this.enableHtmlSanitizer) {
        chipContent.innerText = data;
      } else {
        chipContent.innerHTML = this.encodeHtmlEntities(data);
      }
      chip.appendChild(chipContent);
      var eventArgs = {
        isInteracted: e ? true : false,
        itemData,
        e,
        setClass: function(classes) {
          addClass([chip], classes);
        },
        cancel: false
      };
      this.isPreventChange = this.isAngular && this.preventChange;
      this.trigger("tagging", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (Browser.isDevice) {
            chip.classList.add(MOBILE_CHIP);
            append([chipClose], chip);
            chipClose.style.display = "none";
            EventHandler.add(chip, "click", _this.onMobileChipInteraction, _this);
          } else {
            EventHandler.add(chip, "mousedown", _this.chipClick, _this);
            if (_this.showClearButton) {
              chip.appendChild(chipClose);
            }
          }
          EventHandler.add(chipClose, "mousedown", _this.onChipRemove, _this);
          _this.chipCollectionWrapper.appendChild(chip);
          if (!_this.changeOnBlur && e) {
            _this.updateValueState(e, _this.value, _this.tempValues);
          }
        }
      });
    };
    MultiSelect2.prototype.calcPopupWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    MultiSelect2.prototype.mouseIn = function() {
      if (this.enabled && !this.readonly) {
        this.showOverAllClear();
      }
    };
    MultiSelect2.prototype.mouseOut = function() {
      if (!this.inputFocus) {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;
      this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
        fields: fieldProperty,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);
      if (this.mode === "CheckBox") {
        this.notify("listoption", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", dataSource, fieldProperty });
      }
      return this.listCurrentOptions;
    };
    MultiSelect2.prototype.renderPopup = function() {
      var _this = this;
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      if (!this.popupObj) {
        if (!isNullOrUndefined(this.popupWrapper)) {
          document.body.appendChild(this.popupWrapper);
          var checkboxFilter = this.popupWrapper.querySelector("." + FILTERPARENT);
          if (this.mode === "CheckBox" && !this.allowFiltering && checkboxFilter && this.filterParent) {
            checkboxFilter.remove();
            this.filterParent = null;
          }
          var overAllHeight = parseInt(this.popupHeight, 10);
          this.popupWrapper.style.visibility = "hidden";
          if (this.headerTemplate) {
            this.setHeaderTemplate();
            overAllHeight -= this.header.offsetHeight;
          }
          append([this.list], this.popupWrapper);
          if (this.footerTemplate) {
            this.setFooterTemplate();
            overAllHeight -= this.footer.offsetHeight;
          }
          if (this.mode === "CheckBox" && this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight -= this.selectAllHeight;
          } else if (this.mode === "CheckBox" && !this.showSelectAll && (!this.headerTemplate && !this.footerTemplate)) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
          } else if (this.mode === "CheckBox" && !this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
            if (this.headerTemplate && this.header) {
              overAllHeight -= this.header.offsetHeight;
            }
            if (this.footerTemplate && this.footer) {
              overAllHeight -= this.footer.offsetHeight;
            }
          }
          if (this.mode === "CheckBox") {
            var args = {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              popupElement: this.popupWrapper
            };
            if (this.allowFiltering) {
              this.notify("searchBox", args);
              overAllHeight -= this.searchBoxHeight;
            }
            addClass([this.popupWrapper], "e-checkbox");
          }
          if (this.popupHeight !== "auto") {
            this.list.style.maxHeight = formatUnit(overAllHeight);
            this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
          } else {
            this.list.style.maxHeight = formatUnit(this.popupHeight);
          }
          this.popupObj = new Popup(this.popupWrapper, {
            width: this.calcPopupWidth(),
            targetType: "relative",
            position: this.enableRtl ? { X: "right", Y: "bottom" } : { X: "left", Y: "bottom" },
            relateTo: this.overAllWrapper,
            collision: this.enableRtl ? { X: "fit", Y: "flip" } : { X: "flip", Y: "flip" },
            offsetY: 1,
            enableRtl: this.enableRtl,
            zIndex: this.zIndex,
            close: function() {
              if (_this.popupObj.element.parentElement) {
                _this.popupObj.unwireScrollEvents();
                var checkboxFilterInput = _this.popupWrapper.querySelector("." + FILTERINPUT);
                if (_this.mode === "CheckBox" && checkboxFilterInput && document.activeElement === checkboxFilterInput) {
                  checkboxFilterInput.blur();
                }
                detach(_this.popupObj.element);
              }
            },
            open: function() {
              _this.popupObj.resolveCollision();
              if (!_this.isFirstClick) {
                var ulElement = _this.list.querySelector("ul");
                if (ulElement) {
                  if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                    _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                  }
                }
                _this.isFirstClick = true;
              }
              _this.popupObj.wireScrollEvents();
              if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                _this.loadTemplate();
              }
              _this.setScrollPosition();
              if (_this.allowFiltering) {
                _this.notify("inputFocus", {
                  module: "CheckBoxSelection",
                  enable: _this.mode === "CheckBox",
                  value: "focus"
                });
              }
            },
            targetExitViewport: function() {
              if (!Browser.isDevice) {
                _this.hidePopup();
              }
            }
          });
          if (this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering) {
            this.notify("deviceSearchBox", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
          }
          this.popupObj.close();
          this.popupWrapper.style.visibility = "";
        }
      }
    };
    MultiSelect2.prototype.setHeaderTemplate = function() {
      var compiledString;
      if (this.header) {
        this.header.remove();
      }
      this.header = this.createElement("div");
      addClass([this.header], HEADER3);
      var headercheck = this.multiCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var elements = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (elements && elements.length > 0) {
        append(elements, this.header);
      }
      if (this.mode === "CheckBox" && this.showSelectAll) {
        prepend([this.header], this.popupWrapper);
      } else {
        append([this.header], this.popupWrapper);
      }
      EventHandler.add(this.header, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.setFooterTemplate = function() {
      var compiledString;
      if (this.footer) {
        this.footer.remove();
      }
      this.footer = this.createElement("div");
      addClass([this.footer], FOOTER2);
      var footercheck = this.multiCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var elements = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (elements && elements.length > 0) {
        append(elements, this.footer);
      }
      append([this.footer], this.popupWrapper);
      EventHandler.add(this.footer, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.clearAll = function(e) {
      if (this.enabled && !this.readonly) {
        var temp = void 0;
        if (this.value && this.value.length > 0) {
          var liElement = this.list && this.list.querySelectorAll("li.e-list-item");
          if (liElement && liElement.length > 0) {
            this.selectAllItems(false, e);
          } else {
            this.removeIndex = 0;
            for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
              this.removeValue(temp, e, null, true);
            }
          }
          this.selectedElementID = null;
          this.inputElement.removeAttribute("aria-activedescendant");
        } else {
          this.clearAllCallback(e);
        }
      }
    };
    MultiSelect2.prototype.clearAllCallback = function(e, isClearAll) {
      var tempValues = this.value ? this.value.slice() : [];
      if (this.mainList && this.listData && (this.allowFiltering && this.mode !== "CheckBox" || this.allowCustomValue)) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
      }
      this.focusAtFirstListItem();
      this.updateDelimeter(this.delimiterChar, e);
      if (this.mode !== "Box" && (!this.inputFocus || this.mode === "CheckBox")) {
        this.updateDelimView();
      }
      if (this.inputElement.value !== "") {
        this.makeTextBoxEmpty();
        this.search(null);
      }
      this.checkPlaceholderSize();
      if (this.isPopupOpen()) {
        this.refreshPopup();
      }
      if (!this.inputFocus) {
        if (this.changeOnBlur) {
          this.updateValueState(e, this.value, tempValues);
        }
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        }
      }
      if (this.mode === "CheckBox") {
        this.refreshPlaceHolder();
        this.refreshInputHight();
        if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.updateValueState(e, this.value, this.tempValues);
        }
      }
      if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.updateValueState(e, this.value, this.tempValues);
      }
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        this.updateListItems(this.list.querySelectorAll("li.e-list-item"), this.mainList.querySelectorAll("li.e-list-item"));
      }
      e.preventDefault();
    };
    MultiSelect2.prototype.windowResize = function() {
      this.refreshPopup();
      if ((!this.inputFocus || this.mode === "CheckBox") && this.viewWrapper && this.viewWrapper.parentElement) {
        this.updateDelimView();
      }
    };
    MultiSelect2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute("data-initial-value");
        this.text = textVal;
      }
    };
    MultiSelect2.prototype.wireEvent = function() {
      EventHandler.add(this.componentWrapper, "mousedown", this.wrapperClick, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(this.inputElement, "focus", this.focusInHandler, this);
      EventHandler.add(this.inputElement, "keydown", this.onKeyDown, this);
      EventHandler.add(this.inputElement, "keyup", this.keyUp, this);
      if (this.mode !== "CheckBox") {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
      }
      EventHandler.add(this.inputElement, "blur", this.onBlurHandler, this);
      EventHandler.add(this.componentWrapper, "mouseover", this.mouseIn, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      EventHandler.add(this.componentWrapper, "mouseout", this.mouseOut, this);
      EventHandler.add(this.overAllClear, "mouseup", this.clearAll, this);
      EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
    };
    MultiSelect2.prototype.onInput = function(e) {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.search(e);
      }
    };
    MultiSelect2.prototype.pasteHandler = function(event2) {
      var _this = this;
      setTimeout(function() {
        _this.expandTextbox();
        _this.search(event2);
      });
    };
    MultiSelect2.prototype.search = function(e) {
      var _this = this;
      this.resetFilteredData = true;
      if (!isNullOrUndefined(e)) {
        this.keyCode = e.keyCode;
      }
      if (!this.isPopupOpen() && this.openOnClick) {
        this.showPopup(e);
      }
      this.openClick(e);
      if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && e.keyCode !== 8) {
        this.focusAtFirstListItem();
      } else {
        var text = this.targetElement();
        if (this.allowFiltering) {
          if (this.allowCustomValue) {
            this.isRemoteSelection = true;
          }
          var eventArgs_1 = {
            preventDefaultAction: false,
            text: this.targetElement(),
            updateData: function(dataSource, query2, fields) {
              if (eventArgs_1.cancel) {
                return;
              }
              _this.isFiltered = true;
              _this.remoteFilterAction = true;
              _this.dataUpdater(dataSource, query2, fields);
            },
            event: e,
            cancel: false
          };
          this.trigger("filtering", eventArgs_1, function(eventArgs) {
            if (!eventArgs.cancel) {
              if (!_this.isFiltered && !eventArgs.preventDefaultAction) {
                _this.filterAction = true;
                _this.dataUpdater(_this.dataSource, null, _this.fields);
              }
            }
          });
        } else if (this.allowCustomValue) {
          var query = new Query();
          query = this.allowFiltering && text !== "" ? query.where(this.fields.text, "startswith", text, this.ignoreCase, this.ignoreAccent) : query;
          this.dataUpdater(this.mainData, query, this.fields);
        } else {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var activeElement = Search(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
            this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
          } else if (this.targetElement() !== "") {
            this.removeFocus();
          } else {
            this.focusAtFirstListItem();
          }
        }
      }
    };
    MultiSelect2.prototype.preRender = function() {
      if (this.allowFiltering === null) {
        this.allowFiltering = this.mode === "CheckBox" ? true : false;
      }
      this.initializeData();
      this.updateDataAttribute(this.htmlAttributes);
      _super.prototype.preRender.call(this);
    };
    MultiSelect2.prototype.getLocaleName = function() {
      return "multi-select";
    };
    MultiSelect2.prototype.initializeData = function() {
      this.mainListCollection = [];
      this.beforePopupOpen = false;
      this.filterAction = false;
      this.remoteFilterAction = false;
      this.isFirstClick = false;
      this.mobFilter = true;
      this.isFiltered = false;
      this.focused = true;
      this.initial = true;
      this.backCommand = true;
      this.isCustomRendered = false;
      this.isRemoteSelection = false;
      this.isSelectAllTarget = true;
    };
    MultiSelect2.prototype.updateData = function(delimiterChar, e) {
      var data = "";
      var delim = this.mode === "Delimiter" || this.mode === "CheckBox";
      var text = [];
      var temp;
      var tempData = this.listData;
      this.listData = this.mainData;
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.value)) {
        var valueLength = this.value.length;
        var hiddenElementContent = "";
        for (var index = 0; index < valueLength; index++) {
          var valueItem = this.value[index];
          var listValue = this.findListElement(!isNullOrUndefined(this.mainList) ? this.mainList : this.ulElement, "li", "data-value", valueItem);
          if (isNullOrUndefined(listValue) && !this.allowCustomValue) {
            this.value.splice(index, 1);
            index -= 1;
            valueLength -= 1;
          } else {
            if (this.listData) {
              temp = this.getTextByValue(valueItem);
            } else {
              temp = valueItem;
            }
            data += temp + delimiterChar + " ";
            text.push(temp);
          }
          hiddenElementContent += '<option selected value="' + valueItem + '">' + index + "</option>";
        }
        if (!isNullOrUndefined(this.hiddenElement)) {
          this.hiddenElement.innerHTML = hiddenElementContent;
        }
      }
      this.setProperties({ text: text.toString() }, true);
      if (delim) {
        this.updateWrapperText(this.delimiterWrapper, data);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
      }
      var targetEle = e && e.target;
      var isClearAll = targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      if (!this.changeOnBlur && (e && !isClearAll) || this.isSelectAll) {
        this.isSelectAll = false;
        this.updateValueState(e, this.value, this.tempValues);
      }
      this.listData = tempData;
      this.addValidInputClass();
    };
    MultiSelect2.prototype.initialTextUpdate = function() {
      if (!isNullOrUndefined(this.text)) {
        var textArr = this.text.split(this.delimiterChar);
        var textVal = [];
        for (var index = 0; textArr.length > index; index++) {
          var val = this.getValueByText(textArr[index]);
          if (!isNullOrUndefined(val)) {
            textVal.push(val);
          } else if (this.allowCustomValue) {
            textVal.push(textArr[index]);
          }
        }
        if (textVal && textVal.length) {
          this.setProperties({ value: textVal }, true);
        }
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.renderList = function(isEmptyData) {
      if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector(".e-ul") && this.list.querySelector(".e-ul").childElementCount === 0)) {
        isEmptyData = true;
      }
      _super.prototype.render.call(this, null, isEmptyData);
      this.unwireListEvents();
      this.wireListEvents();
    };
    MultiSelect2.prototype.initialValueUpdate = function() {
      if (this.list) {
        var text = void 0;
        var element = void 0;
        var value = void 0;
        if (this.chipCollectionWrapper) {
          this.chipCollectionWrapper.innerHTML = "";
        }
        this.removeListSelection();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            value = this.value[index];
            element = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
            text = this.getTextByValue(value);
            if (element && element.getAttribute("aria-selected") !== "true" || element && (element.getAttribute("aria-selected") === "true" && this.hideSelectedItem) && (this.mode === "Box" || this.mode === "Default")) {
              this.addChip(text, value);
              this.addListSelection(element);
            } else if (value && this.allowCustomValue) {
              var indexItem = this.listData.length;
              var newValue = {};
              setValue(this.fields.text, value, newValue);
              setValue(this.fields.value, value, newValue);
              var noDataEle = this.popupWrapper.querySelector("." + dropDownBaseClasses.noData);
              this.addItem(newValue, indexItem);
              element = element ? element : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
              if (this.popupWrapper.contains(noDataEle)) {
                this.list.setAttribute("style", noDataEle.getAttribute("style"));
                this.popupWrapper.replaceChild(this.list, noDataEle);
                this.wireListEvents();
              }
              this.addChip(text, value);
              this.addListSelection(element);
            }
          }
        }
        if (this.mode === "CheckBox") {
          this.updateDelimView();
          if (this.changeOnBlur) {
            this.updateValueState(null, this.value, this.tempValues);
          }
          this.updateDelimeter(this.delimiterChar);
          this.refreshInputHight();
        } else {
          this.updateDelimeter(this.delimiterChar);
        }
        if (this.mode === "CheckBox" && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {
          this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
        }
        if (this.mode === "Box" || this.mode === "Default" && this.inputFocus) {
          this.chipCollectionWrapper.style.display = "";
        } else if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
      }
    };
    MultiSelect2.prototype.updateActionCompleteData = function(li, item) {
      if (this.value && this.value.indexOf(li.getAttribute("data-value")) > -1) {
        this.mainList = this.ulElement;
        if (this.hideSelectedItem) {
          addClass([li], HIDE_LIST);
        }
      }
    };
    MultiSelect2.prototype.updateAddItemList = function(list, itemCount) {
      if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector("." + dropDownBaseClasses.noData) && list) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
        remove(this.popupWrapper.querySelector(".e-content"));
        this.popupObj = null;
        this.renderPopup();
      } else if (this.allowCustomValue) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
      }
    };
    MultiSelect2.prototype.updateDataList = function() {
      if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {
        var isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;
        var isReactTemplateUpdate = this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0 && (this.mainList.children[0] && this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount);
        var isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0);
        if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {
          this.mainList = this.ulElement;
        }
      }
    };
    MultiSelect2.prototype.isValidLI = function(li) {
      return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
    };
    MultiSelect2.prototype.updateListSelection = function(li, e, length) {
      var customVal = li.getAttribute("data-value");
      var value = this.getFormattedValue(customVal);
      if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
        value = customVal;
      }
      this.removeHover();
      if (!this.value || this.value.indexOf(value) === -1) {
        this.dispatchSelect(value, e, li, li.getAttribute("aria-selected") === "true", length);
      } else {
        this.removeValue(value, e, length);
      }
    };
    MultiSelect2.prototype.updateListSelectEventCallback = function(value, li, e) {
      var _this = this;
      var text = this.getTextByValue(value);
      if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, "li", "data-value", value)) {
        var temp_1 = li.cloneNode(true);
        var fieldValue = this.fields.value ? this.fields.value : "value";
        if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === "number") {
          value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;
        }
        var data_1 = this.getDataByValue(value);
        var eventArgs = {
          newData: data_1,
          cancel: false
        };
        this.trigger("customValueSelection", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            append([temp_1], _this.mainList);
            _this.mainData.push(data_1);
            _this.remoteCustomValue = false;
            _this.addValue(value, text, e);
          }
        });
      } else {
        this.remoteCustomValue = false;
        this.addValue(value, text, e);
      }
    };
    MultiSelect2.prototype.removeListSelection = function() {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      var selectedItems = this.list.querySelectorAll("." + className);
      var temp = selectedItems.length;
      if (selectedItems && selectedItems.length) {
        removeClass(selectedItems, className);
        while (temp > 0) {
          selectedItems[temp - 1].setAttribute("aria-selected", "false");
          temp--;
        }
      }
      if (!isNullOrUndefined(this.mainList)) {
        var selectItems = this.mainList.querySelectorAll("." + className);
        var temp1 = selectItems.length;
        if (selectItems && selectItems.length) {
          removeClass(selectItems, className);
          while (temp1 > 0) {
            selectItems[temp1 - 1].setAttribute("aria-selected", "false");
            if (this.mode === "CheckBox") {
              if (selectedItems && selectedItems.length > temp1 - 1) {
                removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
              }
              removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
            }
            temp1--;
          }
        }
      }
    };
    MultiSelect2.prototype.removeHover = function() {
      var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, dropDownBaseClasses.hover);
      }
    };
    MultiSelect2.prototype.removeFocus = function() {
      if (this.list && this.mainList) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.focus);
        var mainlist = this.mainList.querySelectorAll("." + dropDownBaseClasses.focus);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.focus);
          removeClass(mainlist, dropDownBaseClasses.focus);
        }
      }
    };
    MultiSelect2.prototype.addListHover = function(li) {
      if (this.enabled && this.isValidLI(li)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      } else {
        if (li !== null && li.classList.contains("e-list-group-item") && this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          this.removeHover();
          addClass([li], dropDownBaseClasses.hover);
        }
      }
    };
    MultiSelect2.prototype.addListFocus = function(element) {
      if (this.enabled && this.isValidLI(element)) {
        this.removeFocus();
        addClass([element], dropDownBaseClasses.focus);
        this.updateAriaActiveDescendant();
      } else {
        if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          addClass([element], dropDownBaseClasses.focus);
          this.updateAriaActiveDescendant();
        }
      }
    };
    MultiSelect2.prototype.addListSelection = function(element, mainElement) {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (this.isValidLI(element) && !element.classList.contains(dropDownBaseClasses.hover)) {
        addClass([element], className);
        this.updateMainList(false, element.getAttribute("data-value"), mainElement);
        element.setAttribute("aria-selected", "true");
        if (this.mode === "CheckBox" && element.classList.contains("e-active")) {
          var ariaCheck = element.getElementsByClassName("e-check").length;
          if (ariaCheck === 0) {
            this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: this });
          }
        }
        this.notify("activeList", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element, e: this });
        if (this.chipCollectionWrapper) {
          this.removeChipSelection();
        }
        this.selectedElementID = element.id;
      }
    };
    MultiSelect2.prototype.updateDelimeter = function(delimChar, e) {
      this.updateData(delimChar, e);
    };
    MultiSelect2.prototype.onMouseClick = function(e) {
      var _this = this;
      this.keyCode = null;
      this.scrollFocusStatus = false;
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      var headerLi = closest(target, "." + dropDownBaseClasses.group);
      if (headerLi && this.enableGroupCheckBox && this.mode === "CheckBox" && this.fields.groupBy) {
        target = target.classList.contains("e-list-group-item") ? target.firstElementChild.lastElementChild : e.target;
        if (target.classList.contains("e-check")) {
          this.selectAllItem(false, e);
          target.classList.remove("e-check");
          target.classList.remove("e-stop");
          closest(target, ".e-list-group-item").classList.remove("e-active");
          target.setAttribute("aria-selected", "false");
        } else {
          this.selectAllItem(true, e);
          target.classList.remove("e-stop");
          target.classList.add("e-check");
          closest(target, ".e-list-group-item").classList.add("e-active");
          target.setAttribute("aria-selected", "true");
        }
        this.refreshSelection();
        this.checkSelectAll();
      } else {
        if (this.isValidLI(li)) {
          var limit = this.value && this.value.length ? this.value.length : 0;
          if (li.classList.contains("e-active")) {
            limit = limit - 1;
          }
          if (limit < this.maximumSelectionLength) {
            this.updateListSelection(li, e);
            this.checkPlaceholderSize();
            this.addListFocus(li);
            if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
              if (this.mode !== "CheckBox") {
                this.focusAtLastListItem(li.getAttribute("data-value"));
                this.refreshSelection();
              }
            } else {
              this.makeTextBoxEmpty();
            }
          }
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            if (this.value && this.value.length > 50) {
              setTimeout(function() {
                _this.updateDelimeter(_this.delimiterChar, e);
              }, 0);
            } else {
              this.updateDelimeter(this.delimiterChar, e);
            }
            this.refreshInputHight();
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.checkSelectAll();
          this.refreshPopup();
          if (this.hideSelectedItem) {
            this.focusAtFirstListItem();
          }
          if (this.closePopupOnSelect) {
            this.hidePopup(e);
          } else {
            e.preventDefault();
          }
          this.makeTextBoxEmpty();
          this.findGroupStart(target);
          if (this.mode !== "CheckBox") {
            this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);
          }
        } else {
          e.preventDefault();
        }
        this.refreshPlaceHolder();
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.findGroupStart = function(target) {
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var count = 0;
        var liChecked = 0;
        var liUnchecked = 0;
        var groupValues = void 0;
        if (this.itemTemplate && !target.getElementsByClassName("e-frame").length) {
          while (!target.getElementsByClassName("e-frame").length) {
            target = target.parentElement;
          }
        }
        if (target.classList.contains("e-frame")) {
          target = target.parentElement.parentElement;
        }
        groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);
        groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);
        while (!target.classList.contains("e-list-group-item")) {
          if (target.classList.contains("e-list-icon")) {
            target = target.parentElement;
          }
          target = target.previousElementSibling;
          if (target == null) {
            break;
          }
        }
        this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
      }
    };
    MultiSelect2.prototype.findGroupAttrtibutes = function(listElement, checked, unChecked, count, position) {
      while (!listElement.classList.contains("e-list-group-item")) {
        if (listElement.classList.contains("e-list-icon")) {
          listElement = listElement.parentElement;
        }
        if (listElement.getElementsByClassName("e-frame")[0].classList.contains("e-check") && listElement.classList.contains("e-list-item")) {
          checked++;
        } else if (listElement.classList.contains("e-list-item")) {
          unChecked++;
        }
        count++;
        listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;
        if (listElement == null) {
          break;
        }
      }
      return [checked, unChecked, count];
    };
    MultiSelect2.prototype.updateCheckBox = function(groupHeader, checked, unChecked, count) {
      if (groupHeader === null) {
        return;
      }
      var checkBoxElement = groupHeader.getElementsByClassName("e-frame")[0];
      if (count === checked) {
        checkBoxElement.classList.remove("e-stop");
        checkBoxElement.classList.add("e-check");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "true");
      } else if (count === unChecked) {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.remove("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.remove("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      } else if (this.maximumSelectionLength === checked - 1) {
        checkBoxElement.classList.remove("e-stop");
        groupHeader.setAttribute("aria-selected", "true");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        checkBoxElement.classList.add("e-check");
      } else {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.add("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      }
    };
    MultiSelect2.prototype.deselectHeader = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      var collection = this.list.querySelectorAll("li.e-list-group-item:not(.e-active)");
      if (limit < this.maximumSelectionLength) {
        removeClass(collection, "e-disable");
      }
      if (limit === this.maximumSelectionLength) {
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      if (currentLi === null && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {
        currentLi = closest(e.target, "." + dropDownBaseClasses.group);
      }
      this.addListHover(currentLi);
    };
    MultiSelect2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    MultiSelect2.prototype.onListMouseDown = function(e) {
      e.preventDefault();
      this.scrollFocusStatus = true;
    };
    MultiSelect2.prototype.onDocumentClick = function(e) {
      if (this.mode !== "CheckBox") {
        var target = e.target;
        if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id="' + this.popupObj.element.id + '"]')) && !this.overAllWrapper.contains(e.target)) {
          this.scrollFocusStatus = false;
        } else {
          this.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement;
        }
      }
    };
    MultiSelect2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(document, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.list, "mousedown", this.onListMouseDown, this);
        EventHandler.add(this.list, "mouseup", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    MultiSelect2.prototype.unwireListEvents = function() {
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      if (this.list) {
        EventHandler.remove(this.list, "mousedown", this.onListMouseDown);
        EventHandler.remove(this.list, "mouseup", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    MultiSelect2.prototype.hideOverAllClear = function() {
      if (!this.value || !this.value.length || this.inputElement.value === "") {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.showOverAllClear = function() {
      if ((this.value && this.value.length || this.inputElement.value !== "") && this.showClearButton && this.readonly !== true) {
        this.overAllClear.style.display = "";
      } else {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement && this.enabled) {
        this.inputElement.blur();
      }
    };
    MultiSelect2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        var filterClear = this.filterParent && this.filterParent.querySelector(".e-clear-icon.e-icons");
        if (this.overAllClear.style.display !== "none" || filterClear) {
          this.spinnerElement = filterClear ? filterClear : this.overAllClear;
        } else {
          this.spinnerElement = this.createElement("span", { className: CLOSEICON_CLASS2 + " " + SPINNER_CLASS2 });
          this.componentWrapper.appendChild(this.spinnerElement);
        }
        createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? "16px" : "14px" }, this.createElement);
        addClass([this.spinnerElement], DISABLE_ICON);
        showSpinner(this.spinnerElement);
      }
    };
    MultiSelect2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], DISABLE_ICON);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS2)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    MultiSelect2.prototype.updateWrapperText = function(wrapperType, wrapperData) {
      if (this.valueTemplate || !this.enableHtmlSanitizer) {
        wrapperType.innerHTML = this.encodeHtmlEntities(wrapperData);
      } else {
        wrapperType.innerText = wrapperData;
      }
    };
    MultiSelect2.prototype.updateDelimView = function() {
      if (this.delimiterWrapper) {
        this.hideDelimWrapper();
      }
      if (this.chipCollectionWrapper) {
        this.chipCollectionWrapper.style.display = "none";
      }
      if (!isNullOrUndefined(this.viewWrapper)) {
        this.viewWrapper.style.display = "";
        this.viewWrapper.style.width = "";
        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      }
      if (this.value && this.value.length) {
        var data = "";
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        var overAllContainer = void 0;
        this.updateWrapperText(this.viewWrapper, data);
        var l10nLocale = {
          noRecordsTemplate: "No records found",
          actionFailureTemplate: "Request failed",
          overflowCountTemplate: "+${count} more..",
          totalCountTemplate: "${count} selected"
        };
        var l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        if (l10n.getConstant("actionFailureTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        if (l10n.getConstant("noRecordsTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        var remainContent = l10n.getConstant("overflowCountTemplate");
        var totalContent = l10n.getConstant("totalCountTemplate");
        var raminElement = this.createElement("span", {
          className: REMAIN_WRAPPER2
        });
        var remainCompildTemp = remainContent.replace("${count}", this.value.length.toString());
        raminElement.innerText = remainCompildTemp;
        this.viewWrapper.appendChild(raminElement);
        this.renderReactTemplates();
        var remainSize = raminElement.offsetWidth;
        remove(raminElement);
        if (this.showDropDownIcon) {
          downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        }
        this.checkClearIconWidth();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            data += index === 0 ? "" : this.delimiterChar + " ";
            temp = this.getOverflowVal(index);
            data += temp;
            temp = this.viewWrapper.innerHTML;
            this.updateWrapperText(this.viewWrapper, data);
            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
            overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
              if (tempData !== void 0 && tempData !== "") {
                temp = tempData;
                index = tempIndex + 1;
              }
              this.updateWrapperText(this.viewWrapper, temp);
              remaining = this.value.length - index;
              wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== "") {
                var textArr = [];
                this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);
                remaining = this.value.length;
                wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              }
              break;
            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
              tempData = data;
              tempIndex = index;
            } else if (index === 0) {
              tempData = "";
              tempIndex = -1;
            }
          }
        }
        if (remaining > 0) {
          var totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;
          this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));
          this.updateRemainWidth(this.viewWrapper, totalWidth);
          this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);
        }
      } else {
        if (!isNullOrUndefined(this.viewWrapper)) {
          this.viewWrapper.innerHTML = "";
          this.viewWrapper.style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.checkClearIconWidth = function() {
      if (this.showClearButton) {
        this.clearIconWidth = this.overAllClear.offsetWidth;
      }
    };
    MultiSelect2.prototype.updateRemainWidth = function(viewWrapper, totalWidth) {
      if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER2) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {
        viewWrapper.style.width = totalWidth + "px";
      }
    };
    MultiSelect2.prototype.updateRemainTemplate = function(raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === "") {
        viewWrapper.removeChild(viewWrapper.firstChild);
      }
      raminElement.innerHTML = "";
      var remainTemp = remainContent.replace("${count}", remaining.toString());
      var totalTemp = totalContent.replace("${count}", remaining.toString());
      raminElement.innerText = viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? remainTemp : totalTemp;
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
        viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      } else {
        viewWrapper.classList.add(TOTAL_COUNT_WRAPPER2);
        this.updateRemainWidth(viewWrapper, totalWidth);
      }
      return raminElement;
    };
    MultiSelect2.prototype.updateRemainingText = function(raminElement, downIconWidth, remaining, remainContent, totalContent) {
      var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
      var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
      if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
        while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
          var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
          textArr.pop();
          this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);
          if (this.viewWrapper.firstChild.nodeValue === "") {
            this.viewWrapper.removeChild(this.viewWrapper.firstChild);
          }
          remaining++;
          wrapperleng = this.viewWrapper.offsetWidth;
        }
        var totalWidth = overAllContainer - downIconWidth;
        this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);
      }
    };
    MultiSelect2.prototype.getOverflowVal = function(index) {
      var temp;
      if (this.mainData && this.mainData.length) {
        if (this.mode === "CheckBox") {
          var newTemp = this.listData;
          this.listData = this.mainData;
          temp = this.getTextByValue(this.value[index]);
          this.listData = newTemp;
        } else {
          temp = this.getTextByValue(this.value[index]);
        }
      } else {
        temp = this.value[index];
      }
      return temp;
    };
    MultiSelect2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mousedown", this.wrapperClick);
      }
      EventHandler.remove(window, "resize", this.windowResize);
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "focus", this.focusInHandler);
        EventHandler.remove(this.inputElement, "keydown", this.onKeyDown);
        if (this.mode !== "CheckBox") {
          EventHandler.remove(this.inputElement, "input", this.onInput);
        }
        EventHandler.remove(this.inputElement, "keyup", this.keyUp);
        var formElement = closest(this.inputElement, "form");
        if (formElement) {
          EventHandler.remove(formElement, "reset", this.resetValueHandler);
        }
        EventHandler.remove(this.inputElement, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mouseover", this.mouseIn);
        EventHandler.remove(this.componentWrapper, "mouseout", this.mouseOut);
      }
      if (!isNullOrUndefined(this.overAllClear)) {
        EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
      }
    };
    MultiSelect2.prototype.selectAllItem = function(state, event2, list) {
      var li;
      if (!isNullOrUndefined(this.list)) {
        li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');
      }
      if (this.value && this.value.length && event2 && event2.target && closest(event2.target, ".e-close-hooker") && this.allowFiltering) {
        li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');
      }
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var target = event2 ? this.groupTemplate ? closest(event2.target, ".e-list-group-item") : event2.target : null;
        target = event2 && event2.keyCode === 32 ? list : target;
        target = target && target.classList.contains("e-frame") ? target.parentElement.parentElement : target;
        if (target && target.classList.contains("e-list-group-item")) {
          var listElement = target.nextElementSibling;
          if (isNullOrUndefined(listElement)) {
            return;
          }
          while (listElement.classList.contains("e-list-item")) {
            if (state) {
              if (!listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                var selectionLimit = this.value && this.value.length ? this.value.length : 0;
                if (listElement.classList.contains("e-active")) {
                  selectionLimit -= 1;
                }
                if (selectionLimit < this.maximumSelectionLength) {
                  this.updateListSelection(listElement, event2);
                }
              }
            } else {
              if (listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                this.updateListSelection(listElement, event2);
              }
            }
            listElement = listElement.nextElementSibling;
            if (listElement == null) {
              break;
            }
          }
          if (target.classList.contains("e-list-group-item")) {
            var focusedElement = this.list.getElementsByClassName("e-item-focus")[0];
            if (focusedElement) {
              focusedElement.classList.remove("e-item-focus");
            }
            if (state) {
              target.classList.add("e-active");
            } else {
              target.classList.remove("e-active");
            }
            target.classList.add("e-item-focus");
            this.updateAriaActiveDescendant();
          }
          this.textboxValueUpdate();
          this.checkPlaceholderSize();
          if (!this.changeOnBlur && event2) {
            this.updateValueState(event2, this.value, this.tempValues);
          }
        } else {
          this.updateValue(event2, li, state);
        }
      } else {
        this.updateValue(event2, li, state);
      }
      this.addValidInputClass();
    };
    MultiSelect2.prototype.updateValue = function(event2, li, state) {
      var _this = this;
      var length = li.length;
      var beforeSelectArgs = {
        event: event2,
        items: state ? li : [],
        itemData: state ? this.listData : [],
        isInteracted: event2 ? true : false,
        isChecked: state,
        preventSelectEvent: false
      };
      this.trigger("beforeSelectAll", beforeSelectArgs);
      if (li && li.length) {
        var index_1 = 0;
        var count_1 = 0;
        if (this.enableGroupCheckBox) {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
        } else {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
        }
        if (!beforeSelectArgs.preventSelectEvent) {
          this.isSelectAllTarget = length === index_1 + 1;
          while (index_1 < length && index_1 <= 50 && index_1 < count_1) {
            this.updateListSelection(li[index_1], event2, length - index_1);
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[index_1]);
            }
            index_1++;
          }
          if (length > 50) {
            setTimeout(function() {
              while (index_1 < length && index_1 < count_1) {
                _this.isSelectAllTarget = length === index_1 + 1;
                _this.updateListSelection(li[index_1], event2, length - index_1);
                if (_this.enableGroupCheckBox) {
                  _this.findGroupStart(li[index_1]);
                }
                index_1++;
              }
              _this.updatedataValueItems(event2);
              if (!_this.changeOnBlur) {
                _this.updateValueState(event2, _this.value, _this.tempValues);
                _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
              }
              _this.updateHiddenElement();
              if (_this.popupWrapper && li[index_1 - 1].classList.contains("e-item-focus")) {
                var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
                if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
                  li[index_1 - 1].classList.remove("e-item-focus");
                }
              }
            }, 0);
          }
        } else {
          for (var i = 0; i < li.length && i < count_1; i++) {
            this.removeHover();
            var customVal = li[i].getAttribute("data-value");
            var value = this.getFormattedValue(customVal);
            var mainElement = this.mainList ? this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)')[i] : null;
            if (state) {
              this.value = !this.value ? [] : this.value;
              if (this.value.indexOf(value) < 0) {
                this.setProperties({ value: [].concat([], this.value, [value]) }, true);
              }
              this.removeFocus();
              this.addListSelection(li[i], mainElement);
              this.updateChipStatus();
              this.checkMaxSelection();
            } else {
              this.removeAllItems(value, event2, false, li[i], mainElement);
            }
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[i]);
            }
          }
          if (!state) {
            var limit = this.value && this.value.length ? this.value.length : 0;
            if (limit < this.maximumSelectionLength) {
              var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
          }
          var args = {
            event: event2,
            items: state ? li : [],
            itemData: state ? this.listData : [],
            isInteracted: event2 ? true : false,
            isChecked: state
          };
          this.trigger("selectedAll", args);
        }
      }
      this.updatedataValueItems(event2);
      this.checkPlaceholderSize();
      if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {
        if (!this.changeOnBlur) {
          this.updateValueState(event2, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        this.updateHiddenElement();
      }
    };
    MultiSelect2.prototype.updateHiddenElement = function() {
      var _this = this;
      var hiddenValue = "";
      var wrapperText = "";
      var data = "";
      var text = [];
      if (this.mode === "CheckBox") {
        this.value.map(function(value, index) {
          hiddenValue += '<option selected value ="' + value + '">' + index + "</option>";
          if (_this.listData) {
            data = _this.getTextByValue(value);
          } else {
            data = value;
          }
          wrapperText += data + _this.delimiterChar + " ";
          text.push(data);
        });
        this.hiddenElement.innerHTML = hiddenValue;
        this.updateWrapperText(this.delimiterWrapper, wrapperText);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-describedby", this.delimiterWrapper.id);
        this.setProperties({ text: text.toString() }, true);
        this.refreshInputHight();
        this.refreshPlaceHolder();
      }
    };
    MultiSelect2.prototype.updatedataValueItems = function(event2) {
      this.deselectHeader();
      this.textboxValueUpdate(event2);
    };
    MultiSelect2.prototype.textboxValueUpdate = function(event2) {
      var isRemoveAll = event2 && event2.target && (closest(event2.target, ".e-selectall-parent") || closest(event2.target, ".e-close-hooker"));
      if (this.mode !== "Box" && !this.isPopupOpen() && !(this.mode === "CheckBox" && (this.isSelectAll || isRemoveAll))) {
        this.updateDelimView();
      } else {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      }
      if (this.mode === "CheckBox") {
        this.updateDelimView();
        if (!(isRemoveAll || this.isSelectAll) && this.isSelectAllTarget) {
          this.updateDelimeter(this.delimiterChar, event2);
        }
        this.refreshInputHight();
      } else {
        this.updateDelimeter(this.delimiterChar, event2);
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    MultiSelect2.prototype.updateDataSource = function(prop) {
      if (isNullOrUndefined(this.list)) {
        this.renderPopup();
      } else {
        this.resetList(this.dataSource);
      }
      if (this.value && this.value.length) {
        this.setProperties({ "value": this.value });
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.onLoadSelect = function() {
      this.setDynValue = true;
      this.renderPopup();
    };
    MultiSelect2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      if (isNullOrUndefined(this.list)) {
        this.selectAllAction = function() {
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            var args2 = {
              module: "CheckBoxSelection",
              enable: _this.mode === "CheckBox",
              value: state ? "check" : "uncheck"
            };
            _this.notify("checkSelectAll", args2);
          }
          _this.selectAllItem(state, event2);
          _this.selectAllAction = null;
        };
        _super.prototype.render.call(this);
      } else {
        this.selectAllAction = null;
        if (this.mode === "CheckBox" && this.showSelectAll) {
          var args = {
            value: state ? "check" : "uncheck",
            enable: this.mode === "CheckBox",
            module: "CheckBoxSelection"
          };
          this.notify("checkSelectAll", args);
        }
        this.selectAllItem(state, event2);
      }
    };
    MultiSelect2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    MultiSelect2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        if (this.resetFilteredData) {
          this.resetMainList = !this.resetMainList ? this.mainList : this.resetMainList;
          this.resetFilteredData = false;
        }
        this.mainList = null;
        this.mainData = null;
        this.isFirstClick = false;
        this.isDynamicDataChange = true;
      }
      if (this.getModuleName() === "multiselect") {
        this.filterAction = false;
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "dataSource":
            if (this.mode === "CheckBox" && this.showSelectAll) {
              if (!isNullOrUndefined(this.popupObj)) {
                this.popupObj.destroy();
                this.popupObj = null;
              }
              this.renderPopup();
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttribute();
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "text":
            this.updateVal(this.value, this.value, "text");
            break;
          case "value":
            this.updateVal(this.value, oldProp.value, "value");
            this.addValidInputClass();
            if (!this.closePopupOnSelect && this.isPopupOpen()) {
              this.refreshPopup();
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "width":
            this.setWidth(newProp.width);
            this.popupObj.setProperties({ width: this.calcPopupWidth() });
            break;
          case "placeholder":
            this.refreshPlaceHolder();
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              this.notify("filterBarPlaceholder", { filterBarPlaceholder: newProp.filterBarPlaceholder });
            }
            break;
          case "delimiterChar":
            if (this.mode !== "Box") {
              this.updateDelimView();
            }
            this.updateData(newProp.delimiterChar);
            break;
          case "cssClass":
            this.updateOldPropCssClass(oldProp.cssClass);
            this.updateCssClass();
            this.calculateWidth();
            break;
          case "enableRtl":
            this.enableRTL(newProp.enableRtl);
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
          case "readonly":
            this.updateReadonly(newProp.readonly);
            this.hidePopup();
            break;
          case "enabled":
            this.hidePopup();
            this.enable(newProp.enabled);
            break;
          case "showSelectAll":
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }
            this.renderPopup();
            break;
          case "showDropDownIcon":
            this.dropDownIcon();
            break;
          case "floatLabelType":
            this.setFloatLabelType();
            this.addValidInputClass();
            Input.createSpanElement(this.overAllWrapper, this.createElement);
            this.calculateWidth();
            if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
              this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
            }
            break;
          case "enableSelectionOrder":
            break;
          case "selectAllText":
            this.notify("selectAllText", false);
            break;
          case "popupHeight":
            if (this.popupObj) {
              var overAllHeight = parseInt(this.popupHeight, 10);
              if (this.popupHeight !== "auto") {
                this.list.style.maxHeight = formatUnit(overAllHeight);
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
              } else {
                this.list.style.maxHeight = formatUnit(this.popupHeight);
              }
            }
            break;
          case "headerTemplate":
          case "footerTemplate":
            this.reInitializePoup();
            break;
          case "allowFiltering":
            if (this.mode === "CheckBox" && this.popupObj) {
              this.reInitializePoup();
            }
            this.updateSelectElementData(this.allowFiltering);
            break;
          case "fields":
            if (isNullOrUndefined(this.fields.groupBy)) {
              this.removeScrollEvent();
            }
            break;
          default:
            {
              var msProps = this.getPropObject(prop, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);
            }
            break;
        }
      }
    };
    MultiSelect2.prototype.reInitializePoup = function() {
      if (this.popupObj) {
        this.popupObj.destroy();
        this.popupObj = null;
      }
      this.renderPopup();
    };
    MultiSelect2.prototype.presentItemValue = function(ulElement) {
      var valuecheck = [];
      for (var i = 0; i < this.value.length; i++) {
        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", this.value[i]);
        if (!checkEle) {
          valuecheck.push(this.value[i]);
        }
      }
      return valuecheck;
    };
    ;
    MultiSelect2.prototype.addNonPresentItems = function(valuecheck, ulElement, list, event2) {
      var _this = this;
      this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function(e) {
        if (e.result.length > 0) {
          _this.addItem(e.result, list.length);
        }
        _this.updateActionList(ulElement, list, event2);
      });
    };
    ;
    MultiSelect2.prototype.updateVal = function(newProp, oldProp, prop) {
      if (!this.list) {
        this.onLoadSelect();
      } else if (this.dataSource instanceof DataManager && (!this.listData || !(this.mainList && this.mainData))) {
        this.onLoadSelect();
      } else {
        var valuecheck = [];
        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
          valuecheck = this.presentItemValue(this.ulElement);
        }
        if (prop == "value" && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {
          this.mainData = null;
          this.setDynValue = true;
          this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
        } else {
          if (prop === "text") {
            this.initialTextUpdate();
            newProp = this.value;
          }
          if (isNullOrUndefined(this.value) || this.value.length === 0) {
            this.tempValues = oldProp;
          }
          if (this.allowCustomValue && (this.mode === "Default" || this.mode === "Box") && this.isReact && this.inputFocus && this.isPopupOpen() && this.mainData !== this.listData) {
            var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
            this.onActionComplete(list, this.mainData);
          }
          this.initialValueUpdate();
          if (this.mode !== "Box" && !this.inputFocus) {
            this.updateDelimView();
          }
          if (!this.inputFocus) {
            this.refreshInputHight();
          }
          this.refreshPlaceHolder();
          if (this.mode !== "CheckBox" && this.changeOnBlur) {
            this.updateValueState(null, newProp, oldProp);
          }
          this.checkPlaceholderSize();
        }
      }
      if (!this.changeOnBlur) {
        this.updateValueState(null, newProp, oldProp);
      }
    };
    MultiSelect2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    MultiSelect2.prototype.hidePopup = function(e) {
      var _this = this;
      var delay = 100;
      if (this.isPopupOpen()) {
        var animModel = {
          name: "FadeOut",
          duration: 100,
          delay: delay ? delay : 0
        };
        var eventArgs = { popup: this.popupObj, cancel: false, animation: animModel, event: e || null };
        this.trigger("close", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.fields.groupBy && _this.mode !== "CheckBox" && _this.fixedHeaderElement) {
              remove(_this.fixedHeaderElement);
              _this.fixedHeaderElement = null;
            }
            _this.beforePopupOpen = false;
            _this.overAllWrapper.classList.remove(iconAnimation);
            _this.popupObj.hide(new Animation(eventArgs2.animation));
            attributes(_this.inputElement, { "aria-expanded": "false" });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-activedescendant");
            if (_this.allowFiltering) {
              _this.notify("inputFocus", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox", value: "clear" });
            }
            _this.popupObj.hide();
            removeClass([document.body, _this.popupObj.element], "e-popup-full-page");
            EventHandler.remove(_this.list, "keydown", _this.onKeyDown);
            if (_this.mode === "CheckBox" && _this.showSelectAll) {
              EventHandler.remove(_this.popupObj.element, "click", _this.clickHandler);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.showPopup = function(e) {
      var _this = this;
      if (!this.enabled) {
        return;
      }
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          if (!_this.ulElement) {
            _this.beforePopupOpen = true;
            if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
              _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
            }
            _super.prototype.render.call(_this, e);
            return;
          }
          if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
            _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
          }
          var mainLiLength = _this.ulElement.querySelectorAll("li.e-list-item").length;
          var liLength = _this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + "." + HIDE_LIST).length;
          if (mainLiLength > 0 && mainLiLength === liLength && liLength === _this.mainData.length && !(_this.targetElement() !== "" && _this.allowCustomValue)) {
            _this.beforePopupOpen = false;
            return;
          }
          _this.onPopupShown(e);
        }
      });
    };
    MultiSelect2.prototype.selectAll = function(state) {
      this.isSelectAll = true;
      this.selectAllItems(state);
    };
    MultiSelect2.prototype.getModuleName = function() {
      return "multiselect";
    };
    MultiSelect2.prototype.clear = function() {
      var _this = this;
      this.selectAll(false);
      if (this.value && this.value.length) {
        setTimeout(function() {
          _this.setProperties({ value: null }, true);
        }, 0);
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.render = function() {
      if (!isNullOrUndefined(this.value)) {
        this.value = this.value.slice();
      }
      this.setDynValue = this.initStatus = false;
      this.isSelectAll = false;
      this.selectAllEventEle = [];
      this.searchWrapper = this.createElement("span", { className: SEARCHBOX_WRAPPER + " " + (this.mode === "Box" ? BOX_ELEMENT : "") });
      this.viewWrapper = this.createElement("span", { className: DELIMITER_VIEW + " " + DELIMITER_WRAPPER, styles: "display:none;" });
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS2,
        styles: "display:none;"
      });
      this.componentWrapper = this.createElement("div", { className: ELEMENT_WRAPPER });
      this.overAllWrapper = this.createElement("div", { className: OVER_ALL_WRAPPER });
      if (this.mode === "CheckBox") {
        addClass([this.overAllWrapper], "e-checkbox");
      }
      if (Browser.isDevice) {
        this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
      }
      this.setWidth(this.width);
      this.overAllWrapper.appendChild(this.componentWrapper);
      this.popupWrapper = this.createElement("div", { id: this.element.id + "_popup", className: POPUP_WRAPPER });
      this.popupWrapper.setAttribute("aria-label", this.element.id);
      this.popupWrapper.setAttribute("role", "dialog");
      if (this.mode === "Delimiter" || this.mode === "CheckBox") {
        this.delimiterWrapper = this.createElement("span", { className: DELIMITER_WRAPPER, styles: "display:none" });
        this.componentWrapper.appendChild(this.delimiterWrapper);
      } else {
        this.chipCollectionWrapper = this.createElement("span", {
          className: CHIP_WRAPPER2,
          styles: "display:none"
        });
        if (this.mode === "Default") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_default"));
        } else if (this.mode === "Box") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_box"));
        }
        this.componentWrapper.appendChild(this.chipCollectionWrapper);
      }
      if (this.mode !== "Box") {
        this.componentWrapper.appendChild(this.viewWrapper);
      }
      this.componentWrapper.appendChild(this.searchWrapper);
      if (this.showClearButton && !Browser.isDevice) {
        this.componentWrapper.appendChild(this.overAllClear);
      } else {
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
      this.dropDownIcon();
      this.inputElement = this.createElement("input", {
        className: INPUT_ELEMENT,
        attrs: {
          spellcheck: "false",
          type: "text",
          autocomplete: "off",
          tabindex: "0",
          role: "combobox"
        }
      });
      if (this.mode === "Default" || this.mode === "Box") {
        this.inputElement.setAttribute("aria-describedby", this.chipCollectionWrapper.id);
      }
      if (this.element.tagName !== this.getNgDirective()) {
        this.element.style.display = "none";
      }
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.overAllWrapper);
        this.searchWrapper.appendChild(this.inputElement);
      } else {
        this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
        this.searchWrapper.appendChild(this.inputElement);
        this.searchWrapper.appendChild(this.element);
        this.element.removeAttribute("tabindex");
      }
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      } else if (this.floatLabelType === "Never") {
        this.refreshPlaceHolder();
      }
      this.addValidInputClass();
      this.element.style.opacity = "";
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "class": HIDDEN_ELEMENT, "tabindex": "-1", "multiple": "" }
      });
      this.componentWrapper.appendChild(this.hiddenElement);
      this.validationAttribute(this.element, this.hiddenElement);
      if (this.mode !== "CheckBox") {
        this.hideOverAllClear();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.wireEvent();
      this.enable(this.enabled);
      this.enableRTL(this.enableRtl);
      this.checkInitialValue();
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.renderComplete();
    };
    MultiSelect2.prototype.checkInitialValue = function() {
      var _this = this;
      var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);
      if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === "SELECT" && this.element.options.length > 0) {
        var optionsElement = this.element.options;
        var valueCol = [];
        var textCol = "";
        for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
          var opt = optionsElement[index];
          if (!isNullOrUndefined(opt.getAttribute("selected"))) {
            if (opt.getAttribute("value")) {
              valueCol.push(opt.getAttribute("value"));
            } else {
              textCol += opt.text + this.delimiterChar;
            }
          }
        }
        if (valueCol.length > 0) {
          this.setProperties({ value: valueCol }, true);
        } else if (textCol !== "") {
          this.setProperties({ text: textCol }, true);
        }
        if (valueCol.length > 0 || textCol !== "") {
          this.refreshInputHight();
          this.refreshPlaceHolder();
        }
      }
      if (this.value && this.value.length || !isNullOrUndefined(this.text)) {
        if (!this.list) {
          _super.prototype.render.call(this);
        }
      }
      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.initialTextUpdate();
      }
      if (this.value && this.value.length) {
        if (!(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate();
          this.initialUpdate();
        } else {
          this.setInitialValue = function() {
            _this.initStatus = false;
            _this.initialValueUpdate();
            _this.initialUpdate();
            _this.setInitialValue = null;
            _this.initStatus = true;
          };
        }
        this.updateTempValue();
      } else {
        this.initialUpdate();
      }
      this.initStatus = true;
      this.checkAutoFocus();
      if (!isNullOrUndefined(this.text)) {
        this.element.setAttribute("data-initial-value", this.text);
      }
    };
    MultiSelect2.prototype.checkAutoFocus = function() {
      if (this.element.hasAttribute("autofocus")) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.setFloatLabelType = function() {
      removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      }
    };
    MultiSelect2.prototype.addValidInputClass = function() {
      if (!isNullOrUndefined(this.overAllWrapper)) {
        if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === "Always") {
          addClass([this.overAllWrapper], "e-valid-input");
        } else {
          removeClass([this.overAllWrapper], "e-valid-input");
        }
      }
    };
    MultiSelect2.prototype.dropDownIcon = function() {
      if (this.showDropDownIcon) {
        this.dropIcon = this.createElement("span", { className: dropdownIcon });
        this.componentWrapper.appendChild(this.dropIcon);
        addClass([this.componentWrapper], ["e-down-icon"]);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.dropIcon.parentElement.removeChild(this.dropIcon);
          removeClass([this.componentWrapper], ["e-down-icon"]);
        }
      }
    };
    MultiSelect2.prototype.initialUpdate = function() {
      if (this.mode !== "Box" && !(this.setDynValue && this.mode === "Default" && this.inputFocus)) {
        this.updateDelimView();
      }
      this.updateCssClass();
      this.updateHTMLAttribute();
      this.updateReadonly(this.readonly);
      this.refreshInputHight();
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.notify(destroy, {});
      this.unwireListEvents();
      this.unWireEvent();
      this.list = null;
      this.popupObj = null;
      this.mainList = null;
      this.mainData = null;
      this.filterParent = null;
      this.ulElement = null;
      this.mainListCollection = null;
      _super.prototype.destroy.call(this);
      var temp = ["readonly", "aria-disabled", "placeholder"];
      var length = temp.length;
      if (!isNullOrUndefined(this.inputElement)) {
        while (length > 0) {
          this.inputElement.removeAttribute(temp[length - 1]);
          length--;
        }
      }
      if (!isNullOrUndefined(this.element)) {
        this.element.removeAttribute("data-initial-value");
        this.element.style.display = "block";
      }
      if (this.overAllWrapper && this.overAllWrapper.parentElement) {
        if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
          remove(this.overAllWrapper);
        } else {
          this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
          remove(this.overAllWrapper);
        }
      }
      this.componentWrapper = null;
      this.overAllClear = null;
      this.overAllWrapper = null;
      this.hiddenElement = null;
      this.searchWrapper = null;
      this.viewWrapper = null;
      this.chipCollectionWrapper = null;
      this.targetInputElement = null;
      this.popupWrapper = null;
      this.inputElement = null;
      this.delimiterWrapper = null;
      this.popupObj = null;
      this.popupWrapper = null;
      this.liCollections = null;
      this.header = null;
      this.mainList = null;
      this.mainListCollection = null;
      this.footer = null;
      this.selectAllEventEle = null;
    };
    __decorate24([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], MultiSelect2.prototype, "fields", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "enablePersistence", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "groupTemplate", void 0);
    __decorate24([
      Property("No records found")
    ], MultiSelect2.prototype, "noRecordsTemplate", void 0);
    __decorate24([
      Property("Request failed")
    ], MultiSelect2.prototype, "actionFailureTemplate", void 0);
    __decorate24([
      Property("None")
    ], MultiSelect2.prototype, "sortOrder", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "enabled", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "enableHtmlSanitizer", void 0);
    __decorate24([
      Property([])
    ], MultiSelect2.prototype, "dataSource", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "query", void 0);
    __decorate24([
      Property("StartsWith")
    ], MultiSelect2.prototype, "filterType", void 0);
    __decorate24([
      Property(1e3)
    ], MultiSelect2.prototype, "zIndex", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "ignoreAccent", void 0);
    __decorate24([
      Property()
    ], MultiSelect2.prototype, "locale", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "enableGroupCheckBox", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "cssClass", void 0);
    __decorate24([
      Property("100%")
    ], MultiSelect2.prototype, "width", void 0);
    __decorate24([
      Property("300px")
    ], MultiSelect2.prototype, "popupHeight", void 0);
    __decorate24([
      Property("100%")
    ], MultiSelect2.prototype, "popupWidth", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "placeholder", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "filterBarPlaceholder", void 0);
    __decorate24([
      Property({})
    ], MultiSelect2.prototype, "htmlAttributes", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "valueTemplate", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "headerTemplate", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "footerTemplate", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "itemTemplate", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "allowFiltering", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "changeOnBlur", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "allowCustomValue", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "showClearButton", void 0);
    __decorate24([
      Property(1e3)
    ], MultiSelect2.prototype, "maximumSelectionLength", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "readonly", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "text", void 0);
    __decorate24([
      Property(null)
    ], MultiSelect2.prototype, "value", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "hideSelectedItem", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "closePopupOnSelect", void 0);
    __decorate24([
      Property("Default")
    ], MultiSelect2.prototype, "mode", void 0);
    __decorate24([
      Property(",")
    ], MultiSelect2.prototype, "delimiterChar", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "ignoreCase", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "showDropDownIcon", void 0);
    __decorate24([
      Property("Never")
    ], MultiSelect2.prototype, "floatLabelType", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "showSelectAll", void 0);
    __decorate24([
      Property("Select All")
    ], MultiSelect2.prototype, "selectAllText", void 0);
    __decorate24([
      Property("Unselect All")
    ], MultiSelect2.prototype, "unSelectAllText", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "enableSelectionOrder", void 0);
    __decorate24([
      Property(true)
    ], MultiSelect2.prototype, "openOnClick", void 0);
    __decorate24([
      Property(false)
    ], MultiSelect2.prototype, "addTagOnBlur", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "change", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "removing", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "removed", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "beforeSelectAll", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "selectedAll", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "beforeOpen", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "open", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "close", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "blur", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "focus", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "chipSelection", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "filtering", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "tagging", void 0);
    __decorate24([
      Event()
    ], MultiSelect2.prototype, "customValueSelection", void 0);
    MultiSelect2 = __decorate24([
      NotifyPropertyChanges
    ], MultiSelect2);
    return MultiSelect2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection.js
var ICON3 = "e-icons";
var CHECKBOXFRAME3 = "e-frame";
var CHECK3 = "e-check";
var CHECKBOXWRAP3 = "e-checkbox-wrapper";
var INDETERMINATE2 = "e-stop";
var checkAllParent = "e-selectall-parent";
var searchBackIcon = "e-input-group-icon e-back-icon e-icons";
var filterBarClearIcon = "e-input-group-icon e-clear-icon e-icons";
var filterInput = "e-input-filter";
var filterParent = "e-filter-parent";
var mobileFilter = "e-ddl-device-filter";
var clearIcon = "e-clear-icon";
var popupFullScreen = "e-popup-full-page";
var device = "e-ddl-device";
var FOCUS4 = "e-input-focus";
var CheckBoxSelection = (
  /** @class */
  function() {
    function CheckBoxSelection2(parent) {
      this.activeLi = [];
      this.activeEle = [];
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    CheckBoxSelection2.prototype.getModuleName = function() {
      return "CheckBoxSelection";
    };
    CheckBoxSelection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("updatelist", this.listSelection, this);
      this.parent.on("listoption", this.listOption, this);
      this.parent.on("selectAll", this.setSelectAll, this);
      this.parent.on("checkSelectAll", this.checkSelectAll, this);
      this.parent.on("searchBox", this.setSearchBox, this);
      this.parent.on("blur", this.onBlurHandler, this);
      this.parent.on("targetElement", this.targetElement, this);
      this.parent.on("deviceSearchBox", this.setDeviceSearchBox, this);
      this.parent.on("inputFocus", this.getFocus, this);
      this.parent.on("reOrder", this.setReorder, this);
      this.parent.on("activeList", this.getActiveList, this);
      this.parent.on("selectAllText", this.setLocale, this);
      this.parent.on("filterBarPlaceholder", this.setPlaceholder, this);
      EventHandler.add(document, "mousedown", this.onDocumentClick, this);
      this.parent.on("addItem", this.checboxCreate, this);
      this.parent.on("popupFullScreen", this.setPopupFullScreen, this);
    };
    CheckBoxSelection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("updatelist", this.listSelection);
      this.parent.off("listoption", this.listOption);
      this.parent.off("selectAll", this.setSelectAll);
      this.parent.off("checkSelectAll", this.checkSelectAll);
      this.parent.off("searchBox", this.setSearchBox);
      this.parent.off("blur", this.onBlurHandler);
      this.parent.off("targetElement", this.targetElement);
      this.parent.off("deviceSearchBox", this.setDeviceSearchBox);
      this.parent.off("inputFocus", this.getFocus);
      this.parent.off("reOrder", this.setReorder);
      this.parent.off("activeList", this.getActiveList);
      this.parent.off("selectAllText", this.setLocale);
      this.parent.off("filterBarPlaceholder", this.setPlaceholder);
      this.parent.off("addItem", this.checboxCreate);
      this.parent.off("popupFullScreen", this.setPopupFullScreen);
    };
    CheckBoxSelection2.prototype.listOption = function(args) {
      var _this = this;
      if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
        };
      } else {
        var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
          itemCreated_1.apply(_this, [e]);
        };
      }
    };
    CheckBoxSelection2.prototype.setPlaceholder = function(props) {
      Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);
    };
    CheckBoxSelection2.prototype.checboxCreate = function(e) {
      var item;
      if (!isNullOrUndefined(e.item)) {
        item = e.item;
      } else {
        item = e;
      }
      if (this.parent.enableGroupCheckBox || item.className !== "e-list-group-item " && item.className !== "e-list-group-item") {
        var checkboxEle = createCheckBox(this.parent.createElement, true);
        var icon = select("div." + ICON3, item);
        item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        select("." + CHECKBOXFRAME3, checkboxEle);
        if (this.parent.enableGroupCheckBox) {
          this.parent.popupWrapper.classList.add("e-multiselect-group");
        }
        return item;
      } else {
        return item;
      }
    };
    CheckBoxSelection2.prototype.setSelectAll = function() {
      if (this.parent.showSelectAll) {
        if (isNullOrUndefined(this.checkAllParent)) {
          this.checkAllParent = this.parent.createElement("div", {
            className: checkAllParent
          });
          this.selectAllSpan = this.parent.createElement("span", {
            className: "e-all-text"
          });
          this.selectAllSpan.textContent = "";
          this.checkAllParent.appendChild(this.selectAllSpan);
          this.setLocale();
          this.checboxCreate(this.checkAllParent);
          if (this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              append([this.checkAllParent], this.parent.filterParent);
            } else {
              append([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          if (!this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
            } else {
              prepend([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          EventHandler.add(this.checkAllParent, "mousedown", this.clickHandler, this);
        }
        if (this.parent.list.classList.contains("e-nodata") || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {
          this.checkAllParent.style.display = "none";
        } else {
          this.checkAllParent.style.display = "block";
        }
        this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      } else if (!isNullOrUndefined(this.checkAllParent)) {
        this.checkAllParent.parentElement.removeChild(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    CheckBoxSelection2.prototype.destroy = function() {
      this.removeEventListener();
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.checkAllParent = null;
      this.clearIconElement = null;
      this.filterInput = null;
      this.filterInputObj = null;
      this.checkWrapper = null;
      this.selectAllSpan = null;
    };
    CheckBoxSelection2.prototype.listSelection = function(args) {
      var target;
      if (!isNullOrUndefined(args.e)) {
        var frameElm = args.li.querySelector(".e-checkbox-wrapper .e-frame");
        target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains("e-frame") && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector(".e-checkbox-wrapper").childNodes[1] : args.li.querySelector(".e-checkbox-wrapper").childNodes[1];
      } else {
        var checkboxWrapper = args.li.querySelector(".e-checkbox-wrapper");
        target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];
      }
      if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
        target = args.li.firstElementChild.childNodes[1];
      }
      if (!isNullOrUndefined(target)) {
        this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      }
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        var selectAll2 = false;
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK3), args.li, args.e, selectAll2);
      }
    };
    CheckBoxSelection2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e, selectAll2) {
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true, selectAll2);
    };
    CheckBoxSelection2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget.classList.contains(this.checkAllParent.className) || e.currentTarget.classList.value === this.checkAllParent.className) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.currentTarget;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      var selectAll2 = true;
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK3), null, e, selectAll2);
      }
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.changeState = function(wrapper, state, e, isPrevent, selectAll2) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME3)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK3)) {
        frameSpan.classList.remove(INDETERMINATE2);
        frameSpan.classList.add(CHECK3);
        ariaState = "true";
        if (selectAll2) {
          this.parent.selectAllItems(true, e);
          this.setLocale(true);
        }
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK3) || frameSpan.classList.contains(INDETERMINATE2))) {
        removeClass([frameSpan], [CHECK3, INDETERMINATE2]);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      } else if (state === "indeterminate" && !frameSpan.classList.contains(INDETERMINATE2)) {
        removeClass([frameSpan], [CHECK3]);
        frameSpan.classList.add(INDETERMINATE2);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      }
    };
    CheckBoxSelection2.prototype.setSearchBox = function(args) {
      if (isNullOrUndefined(this.parent.filterParent)) {
        this.parent.filterParent = this.parent.createElement("span", {
          className: filterParent
        });
        this.filterInput = this.parent.createElement("input", {
          attrs: { type: "text" },
          className: filterInput
        });
        this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
          this.parent.mobFilter = false;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
          properties: { placeholder: this.parent.filterBarPlaceholder }
        }, this.parent.createElement);
        if (!isNullOrUndefined(this.parent.cssClass)) {
          if (this.parent.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.parent.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], this.parent.filterParent);
        prepend([this.parent.filterParent], args.popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "aria-label": "multiselect",
          "aria-expanded": "true",
          "aria-controls": args.popupElement.id
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "mousedown", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        EventHandler.add(this.filterInput, "input", this.parent.onInput, this.parent);
        EventHandler.add(this.filterInput, "keyup", this.parent.keyUp, this.parent);
        EventHandler.add(this.filterInput, "keydown", this.parent.onKeyDown, this.parent);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.parent.pasteHandler, this.parent);
        this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
        return this.filterInputObj;
      }
    };
    CheckBoxSelection2.prototype.clickOnBackIcon = function(e) {
      this.parent.hidePopup();
      removeClass([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.inputElement.focus();
    };
    CheckBoxSelection2.prototype.clearText = function(e) {
      this.parent.targetInputElement.value = "";
      if (this.parent.allowFiltering && this.parent.targetInputElement.value === "") {
        this.parent.search(null);
      }
      this.parent.refreshPopup();
      this.parent.refreshListItems(null);
      this.clearIconElement.style.visibility = "hidden";
      this.filterInput.focus();
      this.setReorder(e);
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.setDeviceSearchBox = function() {
      this.parent.popupObj.element.classList.add(device);
      this.parent.popupObj.element.classList.add(mobileFilter);
      this.parent.popupObj.position = { X: 0, Y: 0 };
      this.parent.popupObj.dataBind();
      this.setSearchBoxPosition();
      this.backIconElement = this.filterInputObj.container.querySelector(".e-back-icon");
      this.clearIconElement = this.filterInputObj.container.querySelector("." + clearIcon);
      this.clearIconElement.style.visibility = "hidden";
      EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this);
      EventHandler.add(this.clearIconElement, "click", this.clearText, this);
    };
    CheckBoxSelection2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      var selectAllHeight = 0;
      if (this.checkAllParent) {
        selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      }
      this.parent.popupObj.element.style.maxHeight = "100%";
      this.parent.popupObj.element.style.width = "100%";
      this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    CheckBoxSelection2.prototype.setPopupFullScreen = function() {
      if (this.parent && this.parent.popupObj) {
        attributes(this.parent.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
        addClass([document.body, this.parent.popupObj.element], popupFullScreen);
        this.parent.popupObj.element.style.maxHeight = "100%";
        this.parent.popupObj.element.style.width = "100%";
      }
    };
    CheckBoxSelection2.prototype.targetElement = function() {
      if (!isNullOrUndefined(this.clearIconElement)) {
        this.parent.targetInputElement = this.filterInput;
        this.clearIconElement.style.visibility = this.parent.targetInputElement.value === "" ? "hidden" : "visible";
      }
      return this.parent.targetInputElement.value;
    };
    CheckBoxSelection2.prototype.onBlurHandler = function(e) {
      if (!this.parent.element.classList.contains("e-listbox")) {
        var target = void 0;
        if (this.parent.keyAction) {
          return;
        }
        if (Browser.isIE) {
          target = !isNullOrUndefined(e) && e.target;
        }
        if (!Browser.isIE) {
          target = !isNullOrUndefined(e) && e.relatedTarget;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {
          this.filterInput.focus();
          return;
        }
        if (this.parent.scrollFocusStatus && this.filterInput) {
          e.preventDefault();
          this.filterInput.focus();
          this.parent.scrollFocusStatus = false;
          return;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
          this.parent.dispatchEvent(this.parent.hiddenElement, "change");
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.overAllWrapper.classList.remove(FOCUS4);
          this.parent.trigger("blur");
          this.parent.focused = true;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close") && !Browser.isDevice) {
          this.parent.hidePopup();
        }
      }
    };
    CheckBoxSelection2.prototype.onDocumentClick = function(e) {
      if (this.parent.getLocaleName() !== "listbox") {
        var target = e.target;
        if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) {
          if (!(this.filterInput && this.filterInput.value !== "")) {
            e.preventDefault();
          }
        }
        if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {
          if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
            this.parent.inputFocus = false;
            this.parent.scrollFocusStatus = false;
            this.parent.hidePopup();
            this.parent.onBlurHandler(e, true);
            this.parent.focused = true;
          }
        } else {
          this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.filterInput;
        }
        if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains("e-input-focus") && !this.parent.isPopupOpen()) {
          if (Browser.isIE) {
            this.parent.onBlurHandler();
          } else {
            this.parent.onBlurHandler(e);
          }
        }
        if (this.filterInput === target) {
          this.filterInput.focus();
        }
      }
    };
    CheckBoxSelection2.prototype.getFocus = function(e) {
      this.parent.overAllWrapper.classList.remove(FOCUS4);
      if (this.parent.keyAction && e.value !== "clear" && e.value !== "focus") {
        this.parent.keyAction = false;
        return;
      }
      if (e.value === "focus") {
        this.filterInput.focus();
        this.parent.removeFocus();
        EventHandler.remove(this.parent.list, "keydown", this.parent.onKeyDown);
      }
      if (e.value === "clear") {
        this.filterInput.value = "";
        this.clearIconElement.style.visibility = "hidden";
      }
    };
    CheckBoxSelection2.prototype.checkSelectAll = function(e) {
      if (e.value === "check") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale(true);
      }
      if (e.value === "uncheck") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
      if (e.value === "indeterminate") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
    };
    CheckBoxSelection2.prototype.setLocale = function(unSelect) {
      if (this.parent.selectAllText !== "Select All" || this.parent.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        var l10nLocale = { selectAllText: "Select All", unSelectAllText: "Unselect All" };
        var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);
        if (l10n.getConstant("selectAllText") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.parent.locale);
        }
        this.selectAllSpan.textContent = unSelect ? l10n.getConstant("unSelectAllText") : l10n.getConstant("selectAllText");
      }
    };
    CheckBoxSelection2.prototype.getActiveList = function(args) {
      if (args.li.classList.contains("e-active")) {
        this.activeLi.push(args.li.cloneNode(true));
      } else {
        this.activeLi.splice(args.index, 1);
      }
    };
    CheckBoxSelection2.prototype.setReorder = function(args) {
      if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {
        var activeLiCount = this.parent.ulElement.querySelectorAll("li.e-active").length;
        var remLi = void 0;
        var ulEle_1 = this.parent.createElement("ul", {
          className: "e-list-parent e-ul e-reorder"
        });
        if (activeLiCount > 0) {
          var activeListItems = this.parent.ulElement.querySelectorAll("li.e-active");
          activeListItems.forEach(function(item) {
            ulEle_1.appendChild(item);
          });
          remLi = this.parent.ulElement.querySelectorAll("li.e-active");
          addClass(remLi, "e-reorder-hide");
          prepend([ulEle_1], this.parent.list);
        }
        this.parent.focusAtFirstListItem();
      }
    };
    return CheckBoxSelection2;
  }()
);

// node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionSettings = (
  /** @class */
  function(_super) {
    __extends25(SelectionSettings2, _super);
    function SelectionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate25([
      Property("Multiple")
    ], SelectionSettings2.prototype, "mode", void 0);
    __decorate25([
      Property(false)
    ], SelectionSettings2.prototype, "showCheckbox", void 0);
    __decorate25([
      Property(false)
    ], SelectionSettings2.prototype, "showSelectAll", void 0);
    __decorate25([
      Property("Left")
    ], SelectionSettings2.prototype, "checkboxPosition", void 0);
    return SelectionSettings2;
  }(ChildProperty)
);
var ToolbarSettings = (
  /** @class */
  function(_super) {
    __extends25(ToolbarSettings2, _super);
    function ToolbarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate25([
      Property([])
    ], ToolbarSettings2.prototype, "items", void 0);
    __decorate25([
      Property("Right")
    ], ToolbarSettings2.prototype, "position", void 0);
    return ToolbarSettings2;
  }(ChildProperty)
);
var ListBox = (
  /** @class */
  function(_super) {
    __extends25(ListBox2, _super);
    function ListBox2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.isValidKey = false;
      _this.isDataSourceUpdate = false;
      _this.keyDownStatus = false;
      return _this;
    }
    ListBox_1 = ListBox2;
    ListBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.render = function() {
      if (this.isAngular && this.allowFiltering) {
        var originalElement = this.element;
        var clonedElement = originalElement.cloneNode(true);
        originalElement.parentNode.replaceChild(clonedElement, originalElement);
        this.element = clonedElement;
        setValue("ej2_instances", [this], this.element);
      }
      this.inputString = "";
      this.initLoad = true;
      this.isCustomFiltering = false;
      this.initialSelectedOptions = this.value;
      this.inputFormName = this.element.getAttribute("name");
      _super.prototype.render.call(this);
      this.setEnabled();
      this.renderComplete();
    };
    ListBox2.prototype.initWrapper = function() {
      var hiddenSelect = this.createElement("select", { className: "e-hidden-select", attrs: { "multiple": "" } });
      hiddenSelect.style.visibility = "hidden";
      this.list.classList.add("e-listbox-wrapper");
      this.list.querySelector(".e-list-parent").setAttribute("role", "presentation");
      var groupHdrs = this.list.querySelectorAll(".e-list-group-item");
      for (var i = 0; i < groupHdrs.length; i++) {
        groupHdrs[i].removeAttribute("tabindex");
        groupHdrs[i].setAttribute("role", "option");
      }
      if (this.itemTemplate) {
        this.list.classList.add("e-list-template");
      }
      this.list.classList.add("e-wrapper");
      this.list.classList.add("e-lib");
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.setAttribute("tabindex", "0");
        if (this.initLoad) {
          this.element.appendChild(this.list);
        }
      } else {
        if (this.initLoad) {
          this.element.parentElement.insertBefore(this.list, this.element);
        }
        this.list.insertBefore(this.element, this.list.firstChild);
        this.element.style.display = "none";
      }
      this.list.insertBefore(hiddenSelect, this.list.firstChild);
      if (this.list.getElementsByClassName("e-list-item")[0]) {
        this.list.getElementsByClassName("e-list-item")[0].classList.remove(dropDownBaseClasses.focus);
      }
      if (this.itemTemplate) {
        this.renderReactTemplates();
      }
      removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);
      this.validationAttribute(this.element, hiddenSelect);
      this.list.setAttribute("role", "listbox");
      attributes(this.list, { "role": "listbox", "aria-label": "listbox", "aria-multiselectable": this.selectionSettings.mode === "Multiple" ? "true" : "false" });
      this.updateSelectionSettings();
    };
    ListBox2.prototype.updateSelectionSettings = function() {
      if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
        var l10nSelect = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
        this.showSelectAll = true;
        this.selectAllText = l10nSelect.getConstant("selectAllText");
        this.unSelectAllText = l10nSelect.getConstant("unSelectAllText");
        this.popupWrapper = this.list;
        this.checkBoxSelectionModule.checkAllParent = null;
        this.notify("selectAll", {});
      }
    };
    ListBox2.prototype.initDraggable = function() {
      var _this = this;
      if (this.ulElement) {
        this.ulElement.id = this.element.id + "_parent";
      }
      if (this.allowDragAndDrop) {
        new Sortable(this.ulElement, {
          scope: this.scope,
          itemClass: "e-list-item",
          dragStart: this.triggerDragStart.bind(this),
          drag: this.triggerDrag.bind(this),
          beforeDrop: this.beforeDragEnd.bind(this),
          drop: this.dragEnd.bind(this),
          placeHolder: function() {
            return _this.createElement("span", { className: "e-placeholder" });
          },
          helper: function(e) {
            var wrapper = _this.list.cloneNode();
            var ele = e.sender.cloneNode(true);
            wrapper.appendChild(ele);
            var refEle = _this.getItems()[0];
            wrapper.style.width = refEle.offsetWidth + "px";
            wrapper.style.height = refEle.offsetHeight + "px";
            if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {
              ele.appendChild(_this.createElement("span", {
                className: "e-list-badge",
                innerHTML: _this.value.length + ""
              }));
            }
            wrapper.style.zIndex = getZindexPartial(_this.element) + "";
            return wrapper;
          }
        });
      }
    };
    ListBox2.prototype.updateActionCompleteData = function(li, item, index) {
      this.jsonData.splice(index, 0, item);
    };
    ListBox2.prototype.initToolbar = function() {
      var pos = this.toolbarSettings.position;
      var prevScope = this.element.getAttribute("data-value");
      if (this.toolbarSettings.items.length) {
        var toolElem = this.createElement("div", { className: "e-listbox-tool", attrs: { "role": "toolbar" } });
        var wrapper = this.createElement("div", {
          className: "e-listboxtool-wrapper e-lib e-" + pos.toLowerCase()
        });
        this.list.parentElement.insertBefore(wrapper, this.list);
        wrapper.appendChild(pos === "Right" ? this.list : toolElem);
        wrapper.appendChild(pos === "Right" ? toolElem : this.list);
        this.createButtons(toolElem);
        if (!this.element.id) {
          this.element.id = getUniqueID("e-" + this.getModuleName());
        }
        if (this.scope) {
          document.querySelector(this.scope).setAttribute("data-value", this.element.id);
        } else {
          this.updateToolBarState();
        }
      }
      var scope = this.element.getAttribute("data-value");
      if (prevScope && scope && prevScope !== scope) {
        this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      } else if (scope) {
        this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.createButtons = function(toolElem) {
      var _this = this;
      var btn;
      var ele;
      var title;
      var l10n = new L10n(this.getModuleName(), {
        moveUp: "Move Up",
        moveDown: "Move Down",
        moveTo: "Move To",
        moveFrom: "Move From",
        moveAllTo: "Move All To",
        moveAllFrom: "Move All From"
      }, this.locale);
      this.toolbarSettings.items.forEach(function(value) {
        title = l10n.getConstant(value);
        ele = _this.createElement("button", {
          attrs: {
            "type": "button",
            "data-value": value,
            "title": title,
            "aria-label": title
          }
        });
        toolElem.appendChild(ele);
        btn = new Button({ iconCss: "e-icons e-" + value.toLowerCase() }, ele);
        btn.createElement = _this.createElement;
      });
    };
    ListBox2.prototype.validationAttribute = function(input, hiddenSelect) {
      if (this.inputFormName) {
        input.setAttribute("name", this.inputFormName);
      }
      _super.prototype.validationAttribute.call(this, input, hiddenSelect);
      hiddenSelect.required = input.required;
      input.required = false;
    };
    ListBox2.prototype.setHeight = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      ele.style.height = formatUnit(this.height);
      if (this.allowFiltering && this.height.toString().indexOf("%") < 0) {
        addClass([this.list], "e-filter-list");
      } else {
        removeClass([this.list], "e-filter-list");
      }
    };
    ListBox2.prototype.setCssClass = function() {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.cssClass) {
        addClass([wrap], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        addClass([this.list], "e-rtl");
      }
    };
    ListBox2.prototype.setEnable = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.enabled) {
        removeClass([ele], cssClass.disabled);
      } else {
        addClass([ele], cssClass.disabled);
      }
    };
    ListBox2.prototype.showSpinner = function() {
      if (!this.spinner) {
        this.spinner = this.createElement("div", { className: "e-listbox-wrapper" });
      }
      this.spinner.style.height = formatUnit(this.height);
      this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
      createSpinner({ target: this.spinner }, this.createElement);
      showSpinner(this.spinner);
    };
    ListBox2.prototype.hideSpinner = function() {
      if (this.spinner.querySelector(".e-spinner-pane")) {
        hideSpinner(this.spinner);
      }
      if (this.spinner.parentElement) {
        detach(this.spinner);
      }
    };
    ListBox2.prototype.onInput = function() {
      this.isDataSourceUpdate = false;
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      this.refreshClearIcon();
    };
    ListBox2.prototype.clearText = function() {
      this.filterInput.value = "";
      this.refreshClearIcon();
      var event2 = document.createEvent("KeyboardEvent");
      this.isValidKey = true;
      this.KeyUp(event2);
    };
    ListBox2.prototype.refreshClearIcon = function() {
      if (this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
    };
    ListBox2.prototype.onActionComplete = function(ulElement, list, e) {
      var searchEle;
      var filterElem;
      var txtLength;
      if (this.allowFiltering && this.list.getElementsByClassName("e-filter-parent")[0]) {
        searchEle = this.list.getElementsByClassName("e-filter-parent")[0].cloneNode(true);
      }
      if (list.length === 0) {
        var noRecElem = ulElement.childNodes[0];
        if (noRecElem) {
          ulElement.removeChild(noRecElem);
        }
      }
      if (this.allowFiltering) {
        filterElem = this.list.getElementsByClassName("e-input-filter")[0];
        if (filterElem) {
          txtLength = filterElem.selectionStart;
        }
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.allowFiltering && !isNullOrUndefined(searchEle)) {
        this.list.insertBefore(searchEle, this.list.firstElementChild);
        this.filterParent = this.list.getElementsByClassName("e-filter-parent")[0];
        this.filterWireEvents(searchEle);
        var inputSearch = searchEle.querySelector(".e-input-filter");
        if (inputSearch) {
          inputSearch.addEventListener("focus", function() {
            if (!searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.add("e-input-focus");
            }
          });
          inputSearch.addEventListener("blur", function() {
            if (searchEle.childNodes[0].classList.contains("e-input-focus")) {
              searchEle.childNodes[0].classList.remove("e-input-focus");
            }
          });
        }
      }
      this.initWrapper();
      this.setSelection();
      this.initDraggable();
      this.mainList = this.ulElement;
      if (this.initLoad) {
        this.jsonData = [];
        extend(this.jsonData, list, []);
        this.initToolbarAndStyles();
        this.wireEvents();
        if (this.showCheckbox) {
          this.setCheckboxPosition();
        }
        if (this.allowFiltering) {
          this.setFiltering();
        }
      } else {
        if (this.isDataSourceUpdate) {
          this.jsonData = [];
          extend(this.jsonData, list, []);
          this.isDataSourceUpdate = false;
        }
        if (this.allowFiltering) {
          filterElem = this.list.getElementsByClassName("e-input-filter")[0];
          filterElem.selectionStart = txtLength;
          filterElem.selectionEnd = txtLength;
          filterElem.focus();
        }
      }
      if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf("#") > -1 && !isNullOrUndefined(e)) {
        var scope = this.scope.replace("#", "");
        var scopedLB = getComponent(document.getElementById(scope), this.getModuleName());
        scopedLB.initToolbar();
      }
      this.initLoad = false;
    };
    ListBox2.prototype.initToolbarAndStyles = function() {
      this.initToolbar();
      this.setCssClass();
      this.setEnable();
      this.setHeight();
    };
    ListBox2.prototype.triggerDragStart = function(args) {
      var _this = this;
      var badge;
      args = extend(this.getDragArgs(args), { dragSelected: true });
      if (Browser.isIos) {
        this.list.style.overflow = "hidden";
      }
      this.trigger("dragStart", args, function(dragEventArgs) {
        _this.allowDragAll = dragEventArgs.dragSelected;
        if (!_this.allowDragAll) {
          badge = _this.ulElement.getElementsByClassName("e-list-badge")[0];
          if (badge) {
            detach(badge);
          }
        }
      });
    };
    ListBox2.prototype.triggerDrag = function(args) {
      var _this = this;
      var scrollParent;
      var boundRect;
      var scrollMoved = 36;
      var scrollHeight = 10;
      if (this.itemTemplate && args.target) {
        if (args.target && args.target.closest(".e-list-item")) {
          scrollHeight = args.target.closest(".e-list-item").scrollHeight;
        } else {
          var listItem = args.element.querySelector(".e-list-item");
          if (listItem) {
            scrollHeight = listItem.scrollHeight;
          }
        }
      }
      var event2 = args.event;
      var wrapper;
      this.stopTimer();
      if (args.target && (args.target.classList.contains("e-listbox-wrapper") || args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item"))) {
        if (args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item")) {
          wrapper = args.target.closest(".e-listbox-wrapper");
        } else {
          wrapper = args.target;
        }
        if (this.allowFiltering) {
          scrollParent = wrapper.querySelector(".e-list-parent");
        } else {
          scrollParent = wrapper;
        }
        boundRect = scrollParent.getBoundingClientRect();
        if (boundRect.y + scrollParent.offsetHeight - (event2.clientY + scrollMoved) < 1) {
          this.timer = window.setInterval(function() {
            _this.setScrollDown(scrollParent, scrollHeight, true);
          }, 70);
        } else if (event2.clientY - scrollMoved - boundRect.y < 1) {
          this.timer = window.setInterval(function() {
            _this.setScrollDown(scrollParent, scrollHeight, false);
          }, 70);
        }
      }
      if (args.target === null) {
        return;
      }
      this.trigger("drag", this.getDragArgs(args));
    };
    ListBox2.prototype.setScrollDown = function(scrollElem, scrollPixel, isScrollDown) {
      if (isScrollDown) {
        scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
      } else {
        scrollElem.scrollTop = scrollElem.scrollTop - scrollPixel;
      }
    };
    ListBox2.prototype.stopTimer = function() {
      window.clearInterval(this.timer);
    };
    ListBox2.prototype.beforeDragEnd = function(args) {
      this.stopTimer();
      var items = [];
      this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      if (this.value.indexOf(this.dragValue) > -1) {
        args.items = this.getDataByValues(this.value);
      } else {
        args.items = this.getDataByValues([this.dragValue]);
      }
      extend(items, args.items);
      this.trigger("beforeDrop", args);
      if (args.items !== items) {
        this.customDraggedItem = args.items;
      }
    };
    ListBox2.prototype.dragEnd = function(args) {
      var _this = this;
      var listData;
      var liColl;
      var jsonData;
      var droppedData;
      var selectedOptions;
      var sortedData;
      var dropValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      var listObj = this.getComponent(args.droppedElement);
      var getArgs = this.getDragArgs({ target: args.droppedElement }, true);
      var sourceArgs = { previousData: this.dataSource };
      var destArgs = { previousData: listObj.dataSource };
      var dragArgs = extend({}, getArgs, {
        target: args.target,
        source: { previousData: this.dataSource },
        previousIndex: args.previousIndex,
        currentIndex: args.currentIndex
      });
      if (listObj !== this) {
        var sourceArgs1 = extend(sourceArgs, { currentData: this.listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });
      }
      if (Browser.isIos) {
        this.list.style.overflow = "";
      }
      var targetListObj = this.getComponent(args.target);
      if (targetListObj && targetListObj.listData.length === 0) {
        var noRecElem = targetListObj.ulElement.childNodes[0];
        if (noRecElem) {
          targetListObj.ulElement.removeChild(noRecElem);
        }
      }
      if (listObj === this) {
        var ul_1 = this.ulElement;
        listData = [].slice.call(this.listData);
        liColl = [].slice.call(this.liCollections);
        jsonData = [].slice.call(this.jsonData);
        sortedData = [].slice.call(this.sortedData);
        var toSortIdx_1 = args.currentIndex;
        var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);
        var rIdx = listData.indexOf(this.getDataByValue(dropValue));
        var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
        var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
        listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);
        sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);
        jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);
        liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);
        if (this.allowDragAll) {
          selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
          if (!isNullOrUndefined(this.customDraggedItem)) {
            selectedOptions = [];
            this.customDraggedItem.forEach(function(item) {
              selectedOptions.push(getValue(_this.fields.value, item));
            });
          }
          selectedOptions.forEach(function(value) {
            if (value !== dropValue) {
              var idx = listData.indexOf(_this.getDataByValue(value));
              var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));
              var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));
              if (idx > toIdx_1) {
                toIdx_1++;
              }
              jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);
              listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);
              sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);
              liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);
              ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName("e-placeholder")[0]);
            }
          });
        }
        this.listData = listData;
        this.jsonData = jsonData;
        this.sortedData = sortedData;
        this.liCollections = liColl;
      } else {
        var li_1;
        var fLiColl_1 = [].slice.call(this.liCollections);
        var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
        var ul_2 = listObj.ulElement;
        listData = [].slice.call(listObj.listData);
        liColl = [].slice.call(listObj.liCollections);
        jsonData = [].slice.call(listObj.jsonData);
        sortedData = [].slice.call(listObj.sortedData);
        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
        if (!isNullOrUndefined(this.customDraggedItem)) {
          selectedOptions = [];
          this.customDraggedItem.forEach(function(item) {
            selectedOptions.push(getValue(_this.fields.value, item));
          });
        }
        var fListData_1 = [].slice.call(this.listData);
        var fSortData_1 = [].slice.call(this.sortedData);
        selectedOptions.forEach(function(value, index) {
          droppedData = _this.getDataByValue(value);
          var srcIdx = _this.listData.indexOf(droppedData);
          var jsonSrcIdx = _this.jsonData.indexOf(droppedData);
          var sortIdx = _this.sortedData.indexOf(droppedData);
          fListData_1.splice(srcIdx, 1);
          _this.jsonData.splice(jsonSrcIdx, 1);
          fSortData_1.splice(sortIdx, 1);
          _this.listData = fListData_1;
          _this.sortedData = fSortData_1;
          var destIdx = value === dropValue ? args.currentIndex : currIdx_1;
          listData.splice(destIdx, 0, droppedData);
          jsonData.splice(destIdx, 0, droppedData);
          sortedData.splice(destIdx, 0, droppedData);
          liColl.splice(destIdx, 0, fLiColl_1.splice(srcIdx, 1)[0]);
          if (!value) {
            var liCollElem_1 = _this.getItems();
            for (var i2 = 0; i2 < liCollElem_1.length; i2++) {
              if (liCollElem_1[i2].getAttribute("data-value") === null && liCollElem_1[i2].classList.contains("e-list-item")) {
                li_1 = liCollElem_1[i2];
                break;
              }
            }
          } else {
            li_1 = _this.getItems()[_this.getIndexByValue(value)];
          }
          if (!li_1) {
            li_1 = args.helper;
          }
          _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);
          ul_2.insertBefore(li_1, ul_2.getElementsByClassName("e-placeholder")[0]);
          currIdx_1++;
        });
        if (this.fields.groupBy) {
          var sourceElem = this.renderItems(this.listData, this.fields);
          this.updateListItems(sourceElem, this.ulElement);
          this.setSelection();
        }
        if (listObj.sortOrder !== "None" || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {
          var sortable = getComponent(ul_2, "sortable");
          var sourceElem = listObj.renderItems(listData, listObj.fields);
          listObj.updateListItems(sourceElem, ul_2);
          this.setSelection();
          if (sortable.placeHolderElement) {
            ul_2.appendChild(sortable.placeHolderElement);
          }
          ul_2.appendChild(args.helper);
          listObj.setSelection();
        }
        this.liCollections = fLiColl_1;
        listObj.liCollections = liColl;
        listObj.jsonData = extend([], [], jsonData, false);
        listObj.listData = extend([], [], listData, false);
        listObj.sortedData = extend([], [], sortedData, false);
        if (this.listData.length === 0) {
          this.l10nUpdate();
        }
      }
      if (this === listObj) {
        var sourceArgs1 = extend(sourceArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1 });
      } else {
        var dragArgs1 = extend(destArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { destination: dragArgs1 });
      }
      if (!isNullOrUndefined(this.customDraggedItem)) {
        dragArgs.items = this.customDraggedItem;
      }
      this.trigger("drop", dragArgs);
      var liCollElem = dragArgs.elements;
      if (liCollElem.length) {
        for (var i = 0; i < liCollElem.length; i++) {
          liCollElem[i].classList.remove("e-grabbed");
        }
      }
    };
    ListBox2.prototype.updateListItems = function(sourceElem, destElem) {
      var i = 0;
      destElem.innerHTML = "";
      while (i < sourceElem.childNodes.length) {
        destElem.appendChild(sourceElem.childNodes[i]);
      }
    };
    ListBox2.prototype.removeSelected = function(listObj, elems) {
      if (listObj.selectionSettings.showCheckbox) {
        elems.forEach(function(ele) {
          ele.getElementsByClassName("e-frame")[0].classList.remove("e-check");
        });
      } else {
        removeClass(elems, cssClass.selected);
      }
    };
    ListBox2.prototype.getCurIdx = function(listObj, idx) {
      if (listObj.fields.groupBy) {
        idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function(ele) {
          return ele.classList.contains(cssClass.group);
        }).length;
      }
      return idx;
    };
    ListBox2.prototype.getComponent = function(li) {
      var listObj;
      var ele = this.element.tagName === "EJS-LISTBOX" ? closest(li, ".e-listbox") : closest(li, ".e-listbox-wrapper") && closest(li, ".e-listbox-wrapper").querySelector(".e-listbox");
      if (ele) {
        listObj = getComponent(ele, this.getModuleName());
      }
      return listObj;
    };
    ListBox2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    ListBox2.prototype.listOption = function(dataSource, fields) {
      this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);
      this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);
      this.notify("listoption", { module: "CheckBoxSelection" });
      return this.listCurrentOptions;
    };
    ListBox2.prototype.triggerBeforeItemRender = function(e) {
      e.item.setAttribute("tabindex", "-1");
      this.trigger("beforeItemRender", { element: e.item, item: e.curData });
    };
    ListBox2.prototype.requiredModules = function() {
      var modules = [];
      if (this.selectionSettings.showCheckbox) {
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    ListBox2.prototype.enableItems = function(items, enable, isValue) {
      var _this = this;
      if (enable === void 0) {
        enable = true;
      }
      var li;
      items.forEach(function(item) {
        var text = item;
        li = _this.findListElement(_this.list, "li", "data-value", isValue ? text : _this.getValueByText(text));
        if (!li) {
          return;
        }
        if (enable) {
          removeClass([li], cssClass.disabled);
          li.removeAttribute("aria-disabled");
        } else {
          addClass([li], cssClass.disabled);
          li.setAttribute("aria-disabled", "true");
        }
      });
    };
    ListBox2.prototype.selectItems = function(items, state, isValue) {
      if (state === void 0) {
        state = true;
      }
      if (state && !this.selectionSettings.showCheckbox && this.selectionSettings.mode === "Single") {
        this.getSelectedItems().forEach(function(li) {
          li.classList.remove("e-active");
          li.removeAttribute("aria-selected");
          removeClass([li], cssClass.selected);
        });
      }
      this.setSelection(items, state, !isValue);
      this.updateSelectedOptions();
      var selElems = [];
      for (var i = 0; i < items.length; i++) {
        var liColl = this.list.querySelectorAll('[aria-selected="true"]');
        for (var j = 0; j < liColl.length; j++) {
          if (items[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
            selElems.push(liColl[j]);
          }
        }
      }
      this.triggerChange(selElems, null);
    };
    ListBox2.prototype.selectAll = function(state) {
      if (state === void 0) {
        state = true;
      }
      this.selectAllItems(state);
    };
    ListBox2.prototype.addItems = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.removeItems = function(items, itemIndex) {
      this.removeItem(items, itemIndex);
    };
    ListBox2.prototype.removeItem = function(items, itemIndex) {
      var liCollections = [];
      var liElement = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      if (items) {
        items = items instanceof Array ? items : [items];
        var fields = this.fields;
        var dataValue = void 0;
        var objValue = void 0;
        var dupData = [];
        var itemIdx = void 0;
        extend(dupData, [], this.jsonData);
        var removeIdxes = [];
        var removeLiIdxes = [];
        for (var j = 0; j < items.length; j++) {
          if (items[j] instanceof Object) {
            dataValue = getValue(fields.value, items[j]);
          } else {
            dataValue = items[j].toString();
          }
          for (var i = 0, len = dupData.length; i < len; i++) {
            if (dupData[i] instanceof Object) {
              objValue = getValue(fields.value, dupData[i]);
            } else {
              objValue = dupData[i].toString();
            }
            if (objValue === dataValue) {
              itemIdx = this.getIndexByValue(dataValue);
              var idx = itemIdx === i ? itemIdx : i;
              liCollections.push(liElement[idx]);
              removeIdxes.push(idx);
              removeLiIdxes.push(idx);
            }
          }
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.listData.splice(removeIdxes[k], 1);
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.jsonData.splice(removeIdxes[k], 1);
        }
        for (var k = removeLiIdxes.length - 1; k >= 0; k--) {
          this.updateLiCollection(removeLiIdxes[k]);
        }
      } else {
        itemIndex = itemIndex ? itemIndex : 0;
        liCollections.push(liElement[itemIndex]);
        this.listData.splice(itemIndex, 1);
        this.jsonData.splice(itemIndex, 1);
        this.updateLiCollection(itemIndex);
      }
      for (var i = 0; i < liCollections.length; i++) {
        this.ulElement.removeChild(liCollections[i]);
      }
      if (this.listData.length === 0) {
        this.l10nUpdate();
      }
      this.value = [];
      this.updateToolBarState();
    };
    ListBox2.prototype.getDataByValues = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        data.push(this.getDataByValue(value[i]));
      }
      return data;
    };
    ListBox2.prototype.moveUp = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem);
    };
    ListBox2.prototype.moveDown = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(false, false, elem);
    };
    ListBox2.prototype.moveTop = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(null, false, elem, true);
    };
    ListBox2.prototype.moveBottom = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem, false, true);
    };
    ListBox2.prototype.moveTo = function(value, index, targetId) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
      this.moveData(this, tlistbox, false, elem, index);
    };
    ListBox2.prototype.moveAllTo = function(targetId, index) {
      if (this.listData.length > 0) {
        var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
        this.moveAllData(this, tlistbox, false, index);
      }
    };
    ListBox2.prototype.getDataList = function() {
      return this.jsonData;
    };
    ListBox2.prototype.getSortedList = function() {
      var sortData;
      var tempData;
      sortData = tempData = this.sortedData;
      if (this.fields.groupBy) {
        sortData = [];
        for (var i = 0; i < tempData.length; i++) {
          if (tempData[i].isHeader) {
            continue;
          }
          sortData.push(tempData[i]);
        }
      }
      return sortData;
    };
    ListBox2.prototype.getElemByValue = function(value) {
      var elem = [];
      for (var i = 0; i < value.length; i++) {
        elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
      }
      return elem;
    };
    ListBox2.prototype.updateLiCollection = function(index) {
      var tempLi = [].slice.call(this.liCollections);
      tempLi.splice(index, 1);
      this.liCollections = tempLi;
    };
    ListBox2.prototype.selectAllItems = function(state, event2) {
      var _this = this;
      [].slice.call(this.getItems()).forEach(function(li) {
        if (!li.classList.contains(cssClass.disabled)) {
          if (_this.selectionSettings.showCheckbox) {
            var ele = li.getElementsByClassName("e-check")[0];
            if (!ele && state || ele && !state) {
              _this.notify("updatelist", { li, module: "listbox" });
              if (_this.maximumSelectionLength >= _this.list.querySelectorAll(".e-list-item span.e-check").length) {
                _this.checkMaxSelection();
              }
            }
          } else {
            if (state) {
              li.classList.add(cssClass.selected);
            } else {
              li.classList.remove(cssClass.selected);
            }
          }
        }
      });
      this.updateSelectedOptions();
      if (this.allowFiltering && this.selectionSettings.showCheckbox) {
        var liEle = this.list.getElementsByTagName("li");
        var index = 0;
        if (state) {
          var _loop_1 = function() {
            var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute("data-value"));
            if (!this_1.value.some(function(e) {
              return e === dataValue1;
            })) {
              this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute("data-value")));
            }
          };
          var this_1 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_1();
          }
        } else {
          var _loop_2 = function() {
            var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute("data-value"));
            this_2.value = this_2.value.filter(function(e) {
              return e !== dataValue2;
            });
          };
          var this_2 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_2();
          }
        }
        if (document.querySelectorAll("ul").length < 2) {
          this.updateMainList();
        }
      }
      this.triggerChange(this.getSelectedItems(), event2);
    };
    ListBox2.prototype.updateMainList = function() {
      var mainList = this.mainList.querySelectorAll(".e-list-item");
      var ulList = this.ulElement.querySelectorAll(".e-list-item");
      var mainCount = mainList.length;
      var ulEleCount = ulList.length;
      if (this.selectionSettings.showCheckbox || (document.querySelectorAll("ul").length > 1 || mainCount !== ulEleCount)) {
        var listindex = 0;
        var valueindex = 0;
        var count = 0;
        for (listindex; listindex < mainCount; ) {
          if (this.value) {
            for (valueindex; valueindex < this.value.length; valueindex++) {
              if (mainList[listindex].getAttribute("data-value") === this.value[valueindex]) {
                count++;
              }
            }
          }
          if (!count && this.selectionSettings.showCheckbox) {
            mainList[listindex].getElementsByClassName("e-frame")[0].classList.remove("e-check");
          }
          if (document.querySelectorAll("ul").length > 1 && count && mainCount !== ulEleCount) {
            this.mainList.removeChild(this.mainList.getElementsByTagName("li")[listindex]);
            listindex = 0;
          } else {
            listindex++;
          }
          count = 0;
          valueindex = 0;
        }
      }
    };
    ListBox2.prototype.wireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.add(this.list, "click", this.clickHandler, this);
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
      EventHandler.add(wrapper, "focusout", this.focusOutHandler, this);
      this.wireToolbarEvent();
      if (this.selectionSettings.showCheckbox) {
        EventHandler.remove(document, "mousedown", this.checkBoxSelectionModule.onDocumentClick);
      }
      if (this.fields.groupBy || this.element.querySelector("select>optgroup")) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
      if (form) {
        EventHandler.add(form, "reset", this.formResetHandler, this);
      }
    };
    ListBox2.prototype.wireToolbarEvent = function() {
      if (this.toolbarSettings.items.length) {
        EventHandler.add(this.getToolElem(), "click", this.toolbarClickHandler, this);
      }
    };
    ListBox2.prototype.unwireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.remove(this.list, "click", this.clickHandler);
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
      EventHandler.remove(wrapper, "focusout", this.focusOutHandler);
      if (this.allowFiltering && this.clearFilterIconElem) {
        EventHandler.remove(this.clearFilterIconElem, "click", this.clearText);
      }
      if (this.toolbarSettings.items.length) {
        EventHandler.remove(this.getToolElem(), "click", this.toolbarClickHandler);
      }
      if (form) {
        EventHandler.remove(form, "reset", this.formResetHandler);
      }
    };
    ListBox2.prototype.clickHandler = function(e) {
      this.selectHandler(e);
    };
    ListBox2.prototype.checkSelectAll = function() {
      var searchCount = 0;
      var liItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      for (var i = 0; i < liItems.length; i++) {
        if (!liItems[i].classList.contains("e-disabled")) {
          searchCount++;
        }
      }
      var len = this.getSelectedItems().length;
      if (this.showSelectAll && searchCount) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          value: searchCount === len ? "check" : len === 0 ? "uncheck" : "indeterminate"
        });
      }
    };
    ListBox2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.allowFiltering) {
        var filterType = this.inputString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (dataType === null) {
          dataType = this.typeOfData(this.jsonData).typeof;
        }
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new Query();
      }
      return filterQuery;
    };
    ListBox2.prototype.setFiltering = function() {
      var filterInputObj;
      if (this.initLoad || isNullOrUndefined(this.filterParent)) {
        this.filterParent = this.createElement("span", {
          className: listBoxClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: listBoxClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: [listBoxClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        append([filterInputObj.container], this.filterParent);
        prepend([this.filterParent], this.list);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "aria-label": "search list item",
          "autocomplete": "off",
          "autocorrect": "off",
          "autocapitalize": "off",
          "spellcheck": "false",
          "role": "textbox"
        });
        if (this.height.toString().indexOf("%") < 0) {
          addClass([this.list], "e-filter-list");
        }
        this.inputString = this.filterInput.value;
        this.filterWireEvents();
        return filterInputObj;
      }
    };
    ListBox2.prototype.filterWireEvents = function(filterElem) {
      if (filterElem) {
        this.filterInput = filterElem.querySelector(".e-input-filter");
      }
      this.clearFilterIconElem = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
      if (this.clearFilterIconElem) {
        EventHandler.add(this.clearFilterIconElem, "click", this.clearText, this);
        if (!filterElem) {
          this.clearFilterIconElem.style.visibility = "hidden";
        }
      }
      EventHandler.add(this.filterInput, "input", this.onInput, this);
      EventHandler.add(this.filterInput, "keyup", this.KeyUp, this);
      EventHandler.add(this.filterInput, "keydown", this.onKeyDown, this);
    };
    ListBox2.prototype.selectHandler = function(e, isKey) {
      var isSelect = true;
      var currSelIdx;
      var li = closest(e.target, ".e-list-item");
      var selectedLi = [li];
      if (li && li.parentElement) {
        currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        if (!this.selectionSettings.showCheckbox) {
          if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {
            li.classList.remove(cssClass.selected);
            li.removeAttribute("aria-selected");
            isSelect = false;
          } else if (!(this.selectionSettings.mode === "Multiple" && (e.ctrlKey || e.metaKey || Browser.isDevice))) {
            this.getSelectedItems().forEach(function(ele) {
              ele.removeAttribute("aria-selected");
            });
            removeClass(this.getSelectedItems(), cssClass.selected);
          }
        } else {
          isSelect = !li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
        }
        if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== "Single") {
          selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function(ele) {
            return ele.classList.contains("e-list-item");
          });
        } else {
          this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (isSelect) {
          if (!this.selectionSettings.showCheckbox) {
            addClass(selectedLi, cssClass.selected);
          }
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "true");
          });
          this.list.setAttribute("aria-activedescendant", li.id);
        } else {
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "false");
          });
        }
        if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
          this.notify("updatelist", { li, e, module: "listbox" });
        }
        if (this.allowFiltering && !isKey) {
          var liDataValue_1 = this.getFormattedValue(li.getAttribute("data-value"));
          if (!isSelect) {
            this.value = this.value.filter(function(value1) {
              return value1 !== liDataValue_1;
            });
          } else {
            var values = [];
            extend(values, this.value);
            values.push(liDataValue_1);
            this.value = values;
          }
          if (document.querySelectorAll("ul").length < 2) {
            this.updateMainList();
          }
        }
        this.updateSelectedOptions();
        this.triggerChange(this.getSelectedItems(), e);
        if (this.list) {
          this.checkMaxSelection();
        }
      }
    };
    ListBox2.prototype.triggerChange = function(selectedLis, event2) {
      this.trigger("change", { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event: event2 });
    };
    ListBox2.prototype.getDataByElems = function(elems) {
      var data = [];
      for (var i = 0, len = elems.length; i < len; i++) {
        data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute("data-value"))));
      }
      return data;
    };
    ListBox2.prototype.getDataByElements = function(elems) {
      var data = [];
      var value;
      var sIdx = 0;
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && item === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        }
        return data;
      }
      return null;
    };
    ListBox2.prototype.checkMaxSelection = function() {
      var limit = this.list.querySelectorAll(".e-list-item span.e-check").length;
      if (this.selectionSettings.showCheckbox) {
        var index = 0;
        var liCollElem = this.list.getElementsByClassName("e-list-item");
        for (index; index < liCollElem.length; index++) {
          if (!liCollElem[index].querySelector(".e-frame.e-check")) {
            if (limit === this.maximumSelectionLength) {
              liCollElem[index].classList.add("e-disable");
            } else if (liCollElem[index].classList.contains("e-disable")) {
              liCollElem[index].classList.remove("e-disable");
            }
          }
        }
      }
    };
    ListBox2.prototype.toolbarClickHandler = function(e) {
      var btn = closest(e.target, "button");
      if (btn) {
        this.toolbarAction = btn.getAttribute("data-value");
        if (btn.disabled) {
          return;
        }
        switch (this.toolbarAction) {
          case "moveUp":
            this.moveUpDown(true);
            break;
          case "moveDown":
            this.moveUpDown();
            break;
          case "moveTo":
            this.moveItemTo();
            break;
          case "moveFrom":
            this.moveItemFrom();
            break;
          case "moveAllTo":
            this.moveAllItemTo();
            break;
          case "moveAllFrom":
            this.moveAllItemFrom();
            break;
          default:
            this.trigger("actionBegin", {
              cancel: false,
              items: this.getDataByElems(this.getSelectedItems()),
              eventName: this.toolbarAction
            });
            break;
        }
      }
    };
    ListBox2.prototype.moveUpDown = function(isUp, isKey, value, isTop, isBottom) {
      var _this = this;
      var elems = this.getSelectedItems();
      if (value) {
        elems = value;
      }
      if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
        return;
      }
      var tempItems = this.getDataByElems(elems);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      this.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      (isUp ? elems : elems.reverse()).forEach(function(ele) {
        var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll(".e-list-item"), ele);
        var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);
        if (isTop) {
          moveTo(_this.ulElement, _this.ulElement, [idx], 0);
          _this.changeData(idx, 0, jsonToIdx, ele);
        } else if (isBottom) {
          moveTo(_this.ulElement, _this.ulElement, [idx], _this.ulElement.querySelectorAll(".e-list-item").length);
          _this.changeData(idx, _this.ulElement.querySelectorAll(".e-list-item").length, jsonToIdx, ele);
        } else {
          moveTo(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);
          _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
        }
      });
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      elems[0].focus();
      if (!isKey && this.toolbarSettings.items.length) {
        this.getToolElem().querySelector("[data-value=" + (isUp ? "moveUp" : "moveDown") + "]").focus();
      }
      this.updateToolBarState();
    };
    ListBox2.prototype.moveItemTo = function() {
      this.moveData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveItemFrom = function() {
      this.moveData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveData = function(fListBox, tListBox, isKey, value, index) {
      var idx = [];
      var dataIdx = [];
      var jsonIdx = [];
      var sortIdx = [];
      var listData = [].slice.call(fListBox.listData);
      var tListData = [].slice.call(tListBox.listData);
      var sortData = [].slice.call(fListBox.sortedData);
      var tSortData = [].slice.call(tListBox.sortedData);
      var fliCollections = [].slice.call(fListBox.liCollections);
      var dataLiIdx = [];
      var tliCollections = [].slice.call(tListBox.liCollections);
      var tempItems = [];
      var data = [];
      var elems = fListBox.getSelectedItems();
      if (value) {
        elems = value;
      }
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      fListBox.value = [];
      if (elems.length) {
        this.removeSelected(fListBox, elems);
        elems.forEach(function(ele) {
          idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele));
          dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll(".e-list-item"), ele));
          dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));
          sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));
          jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));
        });
        if (this.sortOrder !== "None") {
          sortIdx.forEach(function(i2) {
            tempItems.push(fListBox.sortedData[i2]);
          });
        } else {
          jsonIdx.forEach(function(i2) {
            tempItems.push(fListBox.jsonData[i2]);
          });
        }
        var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
        fListBox.trigger("actionBegin", localDataArgs);
        if (localDataArgs.cancel) {
          return;
        }
        var rLiCollection_1 = [];
        dataLiIdx.sort(function(n1, n2) {
          return n1 - n2;
        }).reverse().forEach(function(i2) {
          rLiCollection_1.push(fliCollections.splice(i2, 1)[0]);
        });
        fListBox.liCollections = fliCollections;
        if (index) {
          var toColl = tliCollections.splice(0, index);
          tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);
        } else {
          tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());
        }
        if (tListBox.listData.length === 0) {
          var noRecElem = tListBox.ulElement.childNodes[0];
          if (noRecElem) {
            tListBox.ulElement.removeChild(noRecElem);
          }
        }
        dataIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          listData.splice(i2, 1)[0];
        });
        sortIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          sortData.splice(i2, 1)[0];
        });
        jsonIdx.slice().reverse().forEach(function(i2) {
          data.push(fListBox.jsonData.splice(i2, 1)[0]);
        });
        if (isRefresh) {
          if (fListBox.fields.groupBy) {
            var sourceElem = fListBox.renderItems(listData, fListBox.fields);
            fListBox.updateListItems(sourceElem, fListBox.ulElement);
          } else {
            elems.forEach(function(ele) {
              detach(ele);
            });
          }
        } else {
          moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
          tListBox.mainList = tListBox.ulElement;
        }
        var tJsonData = [].slice.call(tListBox.jsonData);
        tSortData = [].slice.call(tListBox.sortedData);
        this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);
        if (isKey) {
          this.list.focus();
        }
        fListBox.listData = listData;
        fListBox.sortedData = sortData;
        index = index ? index : tListData.length;
        for (var i = tempItems.length - 1; i >= 0; i--) {
          tListData.splice(index, 0, tempItems[i]);
          tJsonData.splice(index, 0, tempItems[i]);
          tSortData.splice(index, 0, tempItems[i]);
        }
        tListBox.listData = tListData;
        tListBox.jsonData = tJsonData;
        tListBox.sortedData = tSortData;
        if (isRefresh) {
          var sourceElem = tListBox.renderItems(tListData, tListBox.fields);
          tListBox.updateListItems(sourceElem, tListBox.ulElement);
          tListBox.setSelection();
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        fListBox.updateSelectedOptions();
        if (fListBox.listData.length === 0) {
          fListBox.l10nUpdate();
        }
      }
      if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
        fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute("data-value"));
      }
    };
    ListBox2.prototype.selectNextList = function(elems, dataLiIdx, dataIdx, inst) {
      var childCnt = inst.ulElement.querySelectorAll(".e-list-item").length;
      var ele;
      var liIdx;
      var validIdx = -1;
      if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {
        liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
        ele = inst.ulElement.querySelectorAll(".e-list-item")[liIdx];
        validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);
        if (validIdx > -1) {
          inst.ulElement.querySelectorAll(".e-list-item")[validIdx].classList.add(cssClass.selected);
        }
      }
    };
    ListBox2.prototype.moveAllItemTo = function() {
      this.moveAllData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveAllItemFrom = function() {
      this.moveAllData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveAllData = function(fListBox, tListBox, isKey, index) {
      var listData = [].slice.call(tListBox.listData);
      var jsonData = [].slice.call(tListBox.jsonData);
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      this.removeSelected(fListBox, fListBox.getSelectedItems());
      var tempItems = [].slice.call(fListBox.listData);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      fListBox.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      if (tListBox.listData.length === 0) {
        var noRecElem = tListBox.ulElement.childNodes[0];
        if (noRecElem) {
          tListBox.ulElement.removeChild(noRecElem);
        }
      }
      if (isRefresh) {
        var noRecElem = fListBox.ulElement.childNodes[0];
        if (noRecElem) {
          fListBox.ulElement.removeChild(noRecElem);
        }
      }
      moveTo(
        fListBox.ulElement,
        tListBox.ulElement,
        // eslint-disable-next-line prefer-spread
        Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number),
        index
      );
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      if (isKey) {
        this.list.focus();
      }
      index = index ? index : listData.length;
      for (var i = 0; i < fListBox.listData.length; i++) {
        listData.splice(index + i, 0, fListBox.listData[i]);
      }
      for (var i = 0; i < fListBox.jsonData.length; i++) {
        jsonData.splice(index + i, 0, fListBox.jsonData[i]);
      }
      var fliCollections = [].slice.call(fListBox.liCollections);
      var tliCollections = [].slice.call(tListBox.liCollections);
      fListBox.liCollections = [];
      if (index) {
        var toColl = tliCollections.splice(0, index);
        tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
      } else {
        tListBox.liCollections = tliCollections.concat(fliCollections);
      }
      fListBox.value = [];
      listData = listData.filter(function(data) {
        return data.isHeader !== true;
      });
      var sortedData = listData.filter(function(val) {
        return tListBox.jsonData.indexOf(val) === -1;
      });
      for (var i = 0; i < sortedData.length; i++) {
        tListBox.jsonData.splice(index + i, 0, sortedData[i]);
      }
      tListBox.listData = listData;
      if (fListBox.listData.length === fListBox.jsonData.length) {
        fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];
      } else if (fListBox.allowFiltering) {
        for (var i = 0; i < fListBox.listData.length; i++) {
          for (var j = 0; j < fListBox.jsonData.length; j++) {
            if (fListBox.listData[i] === fListBox.jsonData[j]) {
              fListBox.jsonData.splice(j, 1);
            }
          }
        }
        fListBox.listData = fListBox.sortedData = [];
      }
      if (isRefresh) {
        var sourceElem = tListBox.renderItems(listData, tListBox.fields);
        tListBox.updateListItems(sourceElem, tListBox.ulElement);
        this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      } else {
        tListBox.sortedData = listData;
      }
      fListBox.updateSelectedOptions();
      if (fListBox.listData.length === 0) {
        fListBox.l10nUpdate();
      }
    };
    ListBox2.prototype.changeData = function(fromIdx, toIdx, jsonToIdx, ele) {
      var listData = [].slice.call(this.listData);
      var jsonData = [].slice.call(this.jsonData);
      var sortData = [].slice.call(this.sortedData);
      var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
      var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
      var liColl = [].slice.call(this.liCollections);
      listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
      jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
      sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
      liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
      this.listData = listData;
      this.jsonData = jsonData;
      this.liCollections = liColl;
      this.sortedData = sortData;
    };
    ListBox2.prototype.getSelectedItems = function() {
      var ele = [];
      if (this.selectionSettings.showCheckbox) {
        [].slice.call(this.ulElement.getElementsByClassName("e-check")).forEach(function(cbox) {
          ele.push(closest(cbox, ".e-list-item"));
        });
      } else {
        ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));
      }
      return ele;
    };
    ListBox2.prototype.getScopedListBox = function() {
      var _this = this;
      var listObj;
      if (this.scope) {
        [].slice.call(document.querySelectorAll(this.scope)).forEach(function(ele) {
          if (getComponent(ele, _this.getModuleName())) {
            listObj = getComponent(ele, _this.getModuleName());
          }
        });
      }
      return listObj;
    };
    ListBox2.prototype.getGrabbedItems = function(args) {
      var grabbItems = false;
      for (var i = 0; i < this.value.length; i++) {
        if (this.value[i] === this.getFormattedValue(args.target.getAttribute("data-value"))) {
          grabbItems = true;
          break;
        }
      }
      if (grabbItems) {
        for (var i = 0; i < this.value.length; i++) {
          var liColl = this.list.querySelectorAll('[aria-selected="true"]');
          for (var j = 0; j < liColl.length; j++) {
            if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
              liColl[j].classList.add("e-grabbed");
            }
          }
        }
      }
      var elems;
      if (this.isAngular) {
        elems = Array.prototype.slice.call(this.element.getElementsByClassName("e-list-parent")[0].querySelectorAll(".e-grabbed"));
      } else {
        elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll(".e-grabbed"));
      }
      return elems;
    };
    ListBox2.prototype.getDragArgs = function(args, isDragEnd) {
      var elems = this.getGrabbedItems(args);
      if (elems.length) {
        if (isDragEnd) {
          elems.push(args.target);
        }
      } else {
        elems = [args.target];
      }
      return { elements: elems, items: this.getDataByElems(elems) };
    };
    ListBox2.prototype.onKeyDown = function(e) {
      this.keyDownHandler(e);
      e.stopPropagation();
    };
    ListBox2.prototype.keyDownHandler = function(e) {
      if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && (!this.allowFiltering || this.allowFiltering && e.target !== this.filterInput)) {
        if (e.target && e.target.className.indexOf("e-edit-template") > -1) {
          return;
        }
        e.preventDefault();
        if (e.keyCode === 32 && this.ulElement.children.length) {
          this.selectHandler({
            target: this.ulElement.getElementsByClassName("e-focused")[0],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          });
        } else if (e.keyCode === 65 && e.ctrlKey) {
          this.selectAll();
        } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
          this.moveUpDown(e.keyCode === 38 ? true : false, true);
        } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
          var listObj = this.tBListBox || this.getScopedListBox();
          if (e.keyCode === 39) {
            if (e.shiftKey) {
              this.moveAllData(this, listObj, true);
            } else {
              this.moveData(this, listObj, true);
            }
          } else {
            if (e.shiftKey) {
              this.moveAllData(listObj, this, true);
            } else {
              this.moveData(listObj, this, true);
            }
          }
        } else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== "KeyA") {
          this.upDownKeyHandler(e);
        }
      } else if (this.allowFiltering) {
        if (e.keyCode === 40 || e.keyCode === 38) {
          this.upDownKeyHandler(e);
        }
      }
    };
    ListBox2.prototype.upDownKeyHandler = function(e) {
      var ul = this.ulElement;
      var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = ul.getElementsByClassName("e-focused")[0] || ul.getElementsByClassName(cssClass.selected)[0];
      if (fli) {
        if (e.keyCode !== 35 && e.keyCode !== 36) {
          fliIdx = Array.prototype.indexOf.call(ul.children, fli);
          if (e.keyCode === 40) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
            return;
          }
        }
        removeClass([fli], "e-focused");
      }
      var cli = ul.children[fliIdx];
      if (cli) {
        fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);
        if (fliIdx === -1) {
          addClass([fli], "e-focused");
          return;
        }
        ul.children[fliIdx].focus();
        ul.children[fliIdx].classList.add("e-focused");
        if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);
        }
        if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          var selectedidx = Array.prototype.indexOf.call(ul.children, fli);
          var sidx = e.code === "Home" ? 0 : selectedidx;
          var eidx = e.code === "Home" ? selectedidx : ul.children.length - 1;
          for (var i = sidx; i <= eidx; i++) {
            var item = ul.children[i];
            this.notify("updatelist", { li: item, e: {
              target: this.ulElement.getElementsByClassName("e-focused")[0],
              ctrlKey: e.ctrlKey,
              shiftKey: e.shiftKey
            }, module: "listbox" });
          }
        }
      }
    };
    ListBox2.prototype.KeyUp = function(e) {
      var _this = this;
      if (this.allowFiltering && e.ctrlKey && e.keyCode === 65) {
        e.preventDefault();
        return;
      }
      var char = String.fromCharCode(e.keyCode);
      var isWordCharacter = char.match(/\w/);
      if (!isNullOrUndefined(isWordCharacter)) {
        this.isValidKey = true;
      }
      this.isValidKey = e.keyCode === 8 || e.keyCode === 46 || this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        switch (e.keyCode) {
          default:
            if (this.allowFiltering) {
              var eventArgsData_1 = {
                preventDefaultAction: false,
                text: this.targetElement(),
                updateData: function(dataSource, query, fields) {
                  if (eventArgsData_1.cancel) {
                    return;
                  }
                  _this.isFiltered = true;
                  _this.remoteFilterAction = true;
                  _this.dataUpdater(dataSource, query, fields);
                },
                event: e,
                cancel: false
              };
              this.trigger("filtering", eventArgsData_1, function(args) {
                _this.isDataFetched = false;
                if (args.cancel || _this.filterInput.value !== "" && _this.isFiltered) {
                  return;
                }
                if (!args.cancel && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.inputString = _this.filterInput.value;
                  _this.filteringAction(_this.jsonData, new Query(), _this.fields);
                }
                if (!_this.isFiltered && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.dataUpdater(_this.jsonData, new Query(), _this.fields);
                }
              });
            }
        }
      }
    };
    ListBox2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFiltering = true;
      this.filteringAction(dataSource, query, fields);
    };
    ListBox2.prototype.filteringAction = function(dataSource, query, fields) {
      this.resetList(dataSource, fields, query);
    };
    ListBox2.prototype.targetElement = function() {
      this.targetInputElement = this.list.getElementsByClassName("e-input-filter")[0];
      return this.targetInputElement.value;
    };
    ListBox2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var backCommand = true;
      if (this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (backCommand) {
          this.remoteCustomValue = false;
          if (this.isAngular && this.itemTemplate) {
            list = this.renderItems(this.listData, fields);
          }
          this.onActionComplete(list, this.jsonData);
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.selectionSettings.showCheckbox, e: this });
        }
      } else {
        this.resetList(dataSource, fields, query);
      }
    };
    ListBox2.prototype.focusOutHandler = function() {
      var ele = this.list.getElementsByClassName("e-focused")[0];
      if (ele) {
        ele.classList.remove("e-focused");
      }
      if (this.allowFiltering) {
        this.refreshClearIcon();
      }
    };
    ListBox2.prototype.getValidIndex = function(cli, index, keyCode) {
      var cul = this.ulElement;
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        if (keyCode === 40 || keyCode === 36) {
          index++;
        } else {
          index--;
        }
      }
      if (index < 0 || index === cul.childElementCount) {
        return -1;
      }
      cli = cul.childNodes[index];
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        index = this.getValidIndex(cli, index, keyCode);
      }
      return index;
    };
    ListBox2.prototype.updateSelectedOptions = function() {
      var _this = this;
      var selectedOptions = [];
      var values = [];
      extend(values, this.value);
      this.getSelectedItems().forEach(function(ele) {
        if (!ele.classList.contains("e-grabbed")) {
          selectedOptions.push(_this.getFormattedValue(ele.getAttribute("data-value")));
        }
      });
      if (this.mainList.childElementCount === this.ulElement.childElementCount) {
        if (this.allowFiltering && this.selectionSettings.showCheckbox) {
          for (var i = 0; i < selectedOptions.length; i++) {
            if (values.indexOf(selectedOptions[i]) > -1) {
              continue;
            } else {
              values.push(selectedOptions[i]);
            }
          }
          this.setProperties({ value: values }, true);
        } else {
          this.setProperties({ value: selectedOptions }, true);
        }
      }
      this.updateSelectTag();
      this.updateToolBarState();
      if (this.tBListBox) {
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.clearSelection = function(values) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (this.selectionSettings.showCheckbox) {
        var dvalue_1;
        this.getSelectedItems().forEach(function(li) {
          dvalue_1 = _this.getFormattedValue(li.getAttribute("data-value"));
          if (values.indexOf(dvalue_1) < 0) {
            li.getElementsByClassName("e-check")[0].classList.remove("e-check");
            li.removeAttribute("aria-selected");
          }
        });
      }
    };
    ListBox2.prototype.setSelection = function(values, isSelect, isText) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (isSelect === void 0) {
        isSelect = true;
      }
      if (isText === void 0) {
        isText = false;
      }
      var li;
      var liselect;
      if (values) {
        values.forEach(function(value) {
          var text;
          if (isText) {
            text = _this.getValueByText(value);
          } else {
            text = value;
          }
          if (typeof text === "string") {
            text = text.split("\\").join("\\\\");
            li = _this.list.querySelector('[data-value="' + text.replace(/"/g, '\\"') + '"]');
          } else {
            li = _this.list.querySelector('[data-value="' + text + '"]');
          }
          if (li) {
            if (_this.selectionSettings.showCheckbox) {
              liselect = li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
            } else {
              liselect = li.classList.contains("e-selected");
            }
            if (!isSelect && liselect || isSelect && !liselect && li) {
              if (_this.selectionSettings.showCheckbox) {
                _this.notify("updatelist", { li, module: "listbox" });
                li.focus();
              } else {
                if (isSelect) {
                  li.classList.add(cssClass.selected);
                  li.setAttribute("aria-selected", "true");
                  li.focus();
                } else {
                  li.classList.remove(cssClass.selected);
                  li.removeAttribute("aria-selected");
                }
              }
            }
          }
        });
      }
      this.updateSelectTag();
    };
    ListBox2.prototype.updateSelectTag = function() {
      var ele = this.getSelectTag();
      var innerHTML = "";
      ele.innerHTML = "";
      if (this.value) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          innerHTML += "<option selected>" + this.value[i] + "</option>";
        }
        ele.innerHTML += innerHTML;
        for (var i = 0, len = ele.childNodes.length; i < len; i++) {
          ele.childNodes[i].setAttribute("value", this.value[i].toString());
        }
      }
      this.checkSelectAll();
    };
    ListBox2.prototype.checkDisabledState = function(inst) {
      return inst.ulElement.querySelectorAll("." + cssClass.li).length === 0;
    };
    ListBox2.prototype.updateToolBarState = function() {
      var _this = this;
      if (this.toolbarSettings.items.length) {
        var listObj_1 = this.getScopedListBox();
        var wrap_1 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        this.toolbarSettings.items.forEach(function(value) {
          var btn = wrap_1.querySelector('[data-value="' + value + '"]');
          switch (value) {
            case "moveAllTo":
              btn.disabled = _this.checkDisabledState(_this);
              break;
            case "moveAllFrom":
              btn.disabled = _this.checkDisabledState(listObj_1);
              break;
            case "moveFrom":
              btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;
              break;
            case "moveUp":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;
              break;
            case "moveDown":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;
              break;
            default:
              btn.disabled = _this.value && _this.value.length ? false : true;
              break;
          }
        });
      }
    };
    ListBox2.prototype.setCheckboxPosition = function() {
      var listWrap = this.list;
      if (!this.initLoad && this.selectionSettings.checkboxPosition === "Left") {
        listWrap.classList.remove("e-right");
      }
      if (this.selectionSettings.checkboxPosition === "Right") {
        listWrap.classList.add("e-right");
      }
    };
    ListBox2.prototype.showCheckbox = function(showCheckbox) {
      var index = 0;
      var liColl = this.list.lastElementChild.querySelectorAll("li");
      var liCollLen = this.list.lastElementChild.getElementsByClassName("e-list-item").length;
      if (showCheckbox) {
        this.ulElement = this.renderItems(this.listData, this.fields);
        this.mainList = this.ulElement;
        this.list.removeChild(this.list.getElementsByTagName("ul")[0]);
        this.list.appendChild(this.ulElement);
        if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName("e-selectall-parent")[0]) {
          var l10nShow = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
          this.showSelectAll = true;
          this.selectAllText = l10nShow.getConstant("selectAllText");
          this.unSelectAllText = l10nShow.getConstant("unSelectAllText");
          this.popupWrapper = this.list;
          this.checkBoxSelectionModule.checkAllParent = null;
          this.notify("selectAll", {});
          this.checkSelectAll();
        }
      } else {
        if (this.list.getElementsByClassName("e-selectall-parent")[0]) {
          this.list.removeChild(this.list.getElementsByClassName("e-selectall-parent")[0]);
        }
        for (index; index < liCollLen; index++) {
          if (liColl[index].classList.contains("e-list-item")) {
            liColl[index].removeChild(liColl[index].getElementsByClassName("e-checkbox-wrapper")[0]);
          }
          if (liColl[index].hasAttribute("aria-selected")) {
            liColl[index].removeAttribute("aria-selected");
          }
        }
        this.mainList = this.ulElement;
      }
      this.value = [];
    };
    ListBox2.prototype.isSelected = function(ele) {
      if (!isNullOrUndefined(ele)) {
        return ele.classList.contains(cssClass.selected) || ele.querySelector(".e-check") !== null;
      } else {
        return false;
      }
    };
    ListBox2.prototype.getSelectTag = function() {
      return this.list.getElementsByClassName("e-hidden-select")[0];
    };
    ListBox2.prototype.getToolElem = function() {
      return this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
    };
    ListBox2.prototype.formResetHandler = function() {
      this.value = this.initialSelectedOptions;
    };
    ListBox2.prototype.getModuleName = function() {
      return "listbox";
    };
    ListBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ListBox2.prototype.getLocaleName = function() {
      return "listbox";
    };
    ListBox2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.innerHTML = "";
      } else {
        this.element.style.display = "inline-block";
        if (this.toolbarSettings.items.length) {
          this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
          detach(this.list.nextElementSibling);
        }
        this.list.parentElement.insertBefore(this.element, this.list);
      }
      _super.prototype.destroy.call(this);
      this.enableRtlElements = [];
      this.liCollections = null;
      this.list = null;
      this.ulElement = null;
      this.mainList = null;
      this.spinner = null;
      this.rippleFun = null;
      if (this.itemTemplate) {
        this.clearTemplate();
      }
    };
    ListBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.list.classList.add("e-rtl");
            } else {
              this.list.classList.remove("e-rtl");
            }
            break;
          case "value":
            removeClass(this.list.querySelectorAll("." + cssClass.selected), cssClass.selected);
            this.clearSelection(this.value);
            this.setSelection();
            break;
          case "height":
            this.setHeight();
            break;
          case "enabled":
            this.setEnable();
            break;
          case "allowDragAndDrop":
            if (newProp.allowDragAndDrop) {
              this.initDraggable();
            } else {
              getComponent(this.ulElement, "sortable").destroy();
            }
            break;
          case "allowFiltering":
            if (this.allowFiltering) {
              this.setFiltering();
            } else {
              this.list.removeChild(this.list.getElementsByClassName("e-filter-parent")[0]);
              this.filterParent = null;
              removeClass([this.list], "e-filter-list");
            }
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              if (this.filterInput) {
                Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
              }
            }
            break;
          case "scope":
            if (this.allowDragAndDrop) {
              getComponent(this.ulElement, "sortable").scope = newProp.scope;
            }
            if (this.toolbarSettings.items.length) {
              if (oldProp.scope) {
                getComponent(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
              }
              if (newProp.scope) {
                getComponent(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
              }
            }
            break;
          case "toolbarSettings": {
            var ele = void 0;
            var pos = newProp.toolbarSettings.position;
            var toolElem = this.getToolElem();
            if (pos) {
              removeClass([wrap], ["e-right", "e-left"]);
              wrap.classList.add("e-" + pos.toLowerCase());
              if (pos === "Left") {
                wrap.insertBefore(toolElem, this.list);
              } else {
                wrap.appendChild(toolElem);
              }
            }
            if (newProp.toolbarSettings.items) {
              if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {
                ele = this.list.parentElement;
                ele.parentElement.insertBefore(this.list, ele);
                detach(ele);
              }
              this.initToolbarAndStyles();
              this.wireToolbarEvent();
            }
            break;
          }
          case "selectionSettings": {
            var showSelectAll = newProp.selectionSettings.showSelectAll;
            var showCheckbox = newProp.selectionSettings.showCheckbox;
            if (!isNullOrUndefined(showSelectAll)) {
              this.showSelectAll = showSelectAll;
              if (this.showSelectAll) {
                var l10nSel = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
                this.checkBoxSelectionModule.checkAllParent = null;
                this.showSelectAll = true;
                this.selectAllText = l10nSel.getConstant("selectAllText");
                this.unSelectAllText = l10nSel.getConstant("selectAllText");
                this.popupWrapper = this.list;
              }
              this.notify("selectAll", {});
              this.checkSelectAll();
            }
            if (!isNullOrUndefined(showCheckbox)) {
              this.showCheckbox(showCheckbox);
            }
            if (this.selectionSettings.showCheckbox) {
              this.setCheckboxPosition();
            }
            break;
          }
          case "dataSource":
            this.isDataSourceUpdate = true;
            this.jsonData = [].slice.call(this.dataSource);
            break;
        }
      }
    };
    var ListBox_1;
    __decorate25([
      Property("")
    ], ListBox2.prototype, "cssClass", void 0);
    __decorate25([
      Property([])
    ], ListBox2.prototype, "value", void 0);
    __decorate25([
      Property("")
    ], ListBox2.prototype, "height", void 0);
    __decorate25([
      Property(true)
    ], ListBox2.prototype, "enabled", void 0);
    __decorate25([
      Property(false)
    ], ListBox2.prototype, "enablePersistence", void 0);
    __decorate25([
      Property(false)
    ], ListBox2.prototype, "allowDragAndDrop", void 0);
    __decorate25([
      Property(1e3)
    ], ListBox2.prototype, "maximumSelectionLength", void 0);
    __decorate25([
      Property(false)
    ], ListBox2.prototype, "allowFiltering", void 0);
    __decorate25([
      Property("")
    ], ListBox2.prototype, "scope", void 0);
    __decorate25([
      Property(true)
    ], ListBox2.prototype, "ignoreCase", void 0);
    __decorate25([
      Property(null)
    ], ListBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "beforeItemRender", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "filtering", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "select", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "change", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "beforeDrop", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "dragStart", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "drag", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "drop", void 0);
    __decorate25([
      Event()
    ], ListBox2.prototype, "dataBound", void 0);
    __decorate25([
      Property(null)
    ], ListBox2.prototype, "groupTemplate", void 0);
    __decorate25([
      Property("Request failed")
    ], ListBox2.prototype, "actionFailureTemplate", void 0);
    __decorate25([
      Property(1e3)
    ], ListBox2.prototype, "zIndex", void 0);
    __decorate25([
      Property(false)
    ], ListBox2.prototype, "ignoreAccent", void 0);
    __decorate25([
      Complex({}, ToolbarSettings)
    ], ListBox2.prototype, "toolbarSettings", void 0);
    __decorate25([
      Complex({}, SelectionSettings)
    ], ListBox2.prototype, "selectionSettings", void 0);
    ListBox2 = ListBox_1 = __decorate25([
      NotifyPropertyChanges
    ], ListBox2);
    return ListBox2;
  }(DropDownBase)
);
var listBoxClasses = {
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  clearIcon: "e-clear-icon"
};

// node_modules/@syncfusion/ej2-dropdowns/src/mention/mention.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Mention = (
  /** @class */
  function(_super) {
    __extends26(Mention2, _super);
    function Mention2(options, element) {
      return _super.call(this, options, element) || this;
    }
    Mention2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "minLength":
            this.minLength = newProp.minLength;
            break;
          case "suffixText":
            this.suffixText = newProp.suffixText;
            break;
          case "allowSpaces":
            this.allowSpaces = newProp.allowSpaces;
            break;
          case "mentionChar":
            this.mentionChar = newProp.mentionChar;
            break;
          case "showMentionChar":
            this.showMentionChar = newProp.showMentionChar;
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
        }
      }
    };
    Mention2.prototype.updateCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      this.setCssClass(newClass, [this.inputElement], oldClass);
      if (this.popupObj) {
        this.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    Mention2.prototype.setCssClass = function(cssClass2, elements, oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
        addClass(elements, cssClass2.split(" "));
      }
    };
    Mention2.prototype.initializeData = function() {
      this.isSelected = false;
      this.isFiltered = false;
      this.beforePopupOpen = false;
      this.initRemoteRender = false;
      this.isListResetted = false;
      this.isPopupOpen = false;
      this.isCollided = false;
      this.lineBreak = false;
    };
    Mention2.prototype.preRender = function() {
      this.initializeData();
      _super.prototype.preRender.call(this);
    };
    Mention2.prototype.render = function() {
      var isSelector = typeof this.target === "string";
      this.inputElement = !isNullOrUndefined(this.target) ? this.checkAndUpdateInternalComponent(isSelector ? document.querySelector(this.target) : this.target) : this.element;
      if (this.isContentEditable(this.inputElement)) {
        this.inputElement.setAttribute("contenteditable", "true");
        addClass([this.inputElement], ["e-mention"]);
        if (isNullOrUndefined(this.target)) {
          addClass([this.inputElement], ["e-editable-element"]);
        }
      }
      this.inputElement.setAttribute("role", "textbox");
      this.inputElement.setAttribute("aria-label", "mention");
      this.queryString = this.elementValue();
      this.wireEvent();
    };
    Mention2.prototype.wireEvent = function() {
      EventHandler.add(this.inputElement, "keyup", this.onKeyUp, this);
      this.bindCommonEvent();
    };
    Mention2.prototype.unWireEvent = function() {
      EventHandler.remove(this.inputElement, "keyup", this.onKeyUp);
      this.unBindCommonEvent();
    };
    Mention2.prototype.bindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.addEventListener("keydown", this.keyDownHandler.bind(this), true);
      }
    };
    Mention2.prototype.hideSpinner = function() {
      this.hideWaitingSpinner();
    };
    Mention2.prototype.hideWaitingSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
      }
      if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {
        detach(this.spinnerTemplateElement);
      }
    };
    Mention2.prototype.checkAndUpdateInternalComponent = function(targetElement) {
      if (!this.isVue && targetElement.classList.contains("e-richtexteditor")) {
        return targetElement.querySelector(".e-content");
      }
      if (this.isVue && targetElement.nodeName === "TEXTAREA" && targetElement.classList.contains("e-rte-hidden")) {
        var parentElement = targetElement.parentElement;
        if (parentElement && parentElement.classList.contains("e-richtexteditor")) {
          return parentElement.querySelector(".e-content");
        }
      }
      return targetElement;
    };
    Mention2.prototype.showWaitingSpinner = function() {
      if (!isNullOrUndefined(this.popupObj)) {
        if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {
          this.spinnerElement = this.popupObj.element;
          createSpinner({
            target: this.spinnerElement,
            width: Browser.isDevice ? "16px" : "14px"
          }, this.createElement);
          showSpinner(this.spinnerElement);
        }
        if (!isNullOrUndefined(this.spinnerTemplate)) {
          this.setSpinnerTemplate();
        }
      }
    };
    Mention2.prototype.keyDownHandler = function(e) {
      var isKeyAction = true;
      switch (e.keyCode) {
        case 38:
          e.action = e.altKey ? "hide" : "up";
          break;
        case 40:
          e.action = e.altKey ? "open" : "down";
          break;
        case 33:
          e.action = "pageUp";
          break;
        case 34:
          e.action = "pageDown";
          break;
        case 36:
          e.action = "home";
          break;
        case 35:
          e.action = "end";
          break;
        case 9:
          e.action = e.shiftKey ? "close" : "tab";
          break;
        case 27:
          e.action = "escape";
          break;
        case 32:
          e.action = "space";
          break;
        case 13:
          e.action = "enter";
          break;
        default:
          isKeyAction = false;
          break;
      }
      if (isKeyAction) {
        this.keyActionHandler(e);
      }
    };
    Mention2.prototype.keyActionHandler = function(e) {
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      var isTabAction = e.action === "tab" || e.action === "close";
      if (this.list === void 0 && !this.isRequested && !isTabAction && e.action !== "escape" && e.action !== "space") {
        this.renderList();
      }
      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
        return;
      }
      if (e.action === "escape") {
        e.preventDefault();
      }
      this.isSelected = e.action === "escape" ? false : this.isSelected;
      switch (e.action) {
        case "down":
        case "up":
          this.isUpDownKey = true;
          this.updateUpDownAction(e);
          break;
        case "tab":
          if (this.isPopupOpen) {
            e.preventDefault();
            var li = this.list.querySelector("." + dropDownBaseClasses.selected);
            if (li) {
              this.setSelection(li, e);
            }
            if (this.isPopupOpen) {
              this.hidePopup(e);
            }
          }
          break;
        case "enter":
          if (this.isPopupOpen) {
            e.preventDefault();
            if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {
              this.updateSelectedItem(this.selectedLI, e, false, true);
            }
          }
          break;
        case "escape":
          if (this.isPopupOpen) {
            this.hidePopup(e);
          }
          break;
      }
    };
    Mention2.prototype.updateUpDownAction = function(e) {
      var focusEle = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (this.isSelectFocusItem(focusEle)) {
        this.setSelection(focusEle, e);
      } else if (!isNullOrUndefined(this.liCollections)) {
        var li = this.list.querySelector("." + dropDownBaseClasses.selected);
        if (!isNullOrUndefined(li)) {
          var value = this.getFormattedValue(li.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
        }
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        var startIndex = 0;
        startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        }
      }
      if (this.isPopupOpen) {
        e.preventDefault();
      }
    };
    Mention2.prototype.isSelectFocusItem = function(element) {
      return !isNullOrUndefined(element);
    };
    Mention2.prototype.unBindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.inputElement.removeEventListener("keydown", this.keyDownHandler.bind(this), true);
      }
    };
    Mention2.prototype.onKeyUp = function(e) {
      var rangetextContent;
      if (this.isUpDownKey && this.isPopupOpen && e.keyCode === 229) {
        this.isUpDownKey = false;
        return;
      }
      this.isTyped = e.code !== "Enter" && e.code !== "Space" && e.code !== "ArrowDown" && e.code !== "ArrowUp" ? true : false;
      var isRteImage = document.activeElement.parentElement && document.activeElement.parentElement.querySelector(".e-rte-image") ? true : false;
      if (document.activeElement != this.inputElement && !isRteImage) {
        this.inputElement.focus();
      }
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
        rangetextContent = this.range.startContainer.textContent.split("");
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      var lastTwoLetters = this.mentionChar.toString() + this.mentionChar.toString();
      var Regex = new RegExp(this.mentionChar.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g");
      var charRegex = new RegExp("[a-zA-Z]", "g");
      if (e.key === "Shift" || e.keyCode === 37 || e.keyCode === 39) {
        return;
      }
      if (this.beforePopupOpen && this.isPopupOpen && lastWordRange == lastTwoLetters) {
        this.hidePopup();
        return;
      }
      if (!currentRange || !lastWordRange || e.code === "Enter" || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.previousElementSibling.tagName !== "BR" && this.range.startContainer.textContent.split("").length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf("") === -1 || this.range.startContainer.nodeType === 1)) {
        if (this.isPopupOpen && this.allowSpaces && currentRange && currentRange.trim() !== "" && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1 && !this.isMatchedText() && (currentRange.length > 1 && currentRange.replace(/\u00A0/g, " ").charAt(currentRange.length - 2) !== " ") && (this.list && this.list.querySelectorAll("ul").length > 0)) {
          this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
          this.searchLists(e);
        } else if (this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && (e.code !== "ArrowDown" && e.code !== "ArrowUp")) {
          this.hidePopup();
          this.lineBreak = true;
        }
        return;
      }
      if (lastWordRange.includes(this.mentionChar)) {
        this.queryString = lastWordRange.replace(this.mentionChar, "");
      }
      if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== "" && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {
        this.searchLists(e);
        if (!this.isPopupOpen && this.queryString.length >= this.minLength) {
          if (!this.isContentEditable(this.inputElement)) {
            this.showPopup();
          } else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {
            this.showPopup();
          }
        }
      } else if (lastWordRange.indexOf(this.mentionChar) === 0 && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj || (isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) || !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element)))) {
        if (this.initRemoteRender && this.list && this.list.classList.contains("e-nodata")) {
          this.searchLists(e);
        }
        this.resetList(this.dataSource, this.fields);
        if (isNullOrUndefined(this.list)) {
          this.initValue();
        }
        if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.queryString.length >= this.minLength) {
          this.didPopupOpenByTypingInitialChar = true;
          this.showPopup();
          if (this.initRemoteRender && this.list.querySelectorAll("li").length === 0) {
            this.showWaitingSpinner();
          }
          this.lineBreak = false;
        }
      } else if (this.allowSpaces && this.queryString !== "" && currentRange && currentRange.trim() !== "" && currentRange.replace(" ", " ").lastIndexOf(" ") < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
        this.searchLists(e);
      } else if (this.queryString === "" && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.searchLists(e);
        if (!this.isListResetted) {
          this.resetList(this.dataSource, this.fields);
        }
      }
      this.isListResetted = false;
    };
    Mention2.prototype.isMatchedText = function() {
      var isMatched = false;
      for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {
        if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace(" ", " ").trim() === this.liCollections[i].getAttribute("data-value").toLowerCase()) {
          isMatched = true;
        }
      }
      return isMatched;
    };
    Mention2.prototype.getCurrentRange = function() {
      this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);
      return this.range;
    };
    Mention2.prototype.searchLists = function(e) {
      var _this = this;
      this.isDataFetched = false;
      if (isNullOrUndefined(this.list)) {
        _super.prototype.render.call(this);
        this.unWireListEvents();
        this.wireListEvents();
      }
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.queryString,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isFiltered = true;
          _this.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this.isFiltered && !eventArgs2.preventDefaultAction) {
          _this.filterAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    Mention2.prototype.filterAction = function(dataSource, query, fields) {
      this.beforePopupOpen = true;
      if (this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query);
        this.isListResetted = true;
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.beforePopupOpen = false;
      }
      this.setDataIndex();
      this.renderReactTemplates();
    };
    Mention2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isActive) {
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.inputElement.id + "_options", "role": "listbox", "aria-hidden": "false" });
        }
        var focusItem = ulElement.querySelector("." + dropDownBaseClasses.li);
        if (focusItem) {
          focusItem.classList.add(dropDownBaseClasses.selected);
          this.selectedLI = focusItem;
          var value = this.getFormattedValue(focusItem.getAttribute("data-value"));
          this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);
        }
        if (this.beforePopupOpen && this.isPopupOpen) {
          if (!isNullOrUndefined(this.popupObj.element)) {
            this.popupObj.element.remove();
          }
          this.renderPopup();
        }
      }
    };
    Mention2.prototype.setDataIndex = function() {
      for (var i = 0; this.liCollections && i < this.liCollections.length; i++) {
        this.liCollections[i].setAttribute("data-index", i.toString());
      }
    };
    Mention2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            if (_this.inputElement.tagName === _this.getNgDirective() && _this.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }
          itemCreated_1.apply(_this, [e]);
        };
      }
      return fields;
    };
    Mention2.prototype.elementValue = function() {
      if (!this.isContentEditable(this.inputElement)) {
        return this.inputElement.value.replace(this.mentionChar, "");
      } else {
        return this.inputElement.textContent.replace(this.mentionChar, "");
      }
    };
    Mention2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? this.elementValue() : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount)) {
        if (this.suggestionCount !== 25) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      return filterQuery;
    };
    Mention2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    Mention2.prototype.getTextRange = function() {
      var text;
      if (!this.isContentEditable(this.inputElement)) {
        var component = this.inputElement;
        if (!isNullOrUndefined(component)) {
          var startPos = component.selectionStart;
          if (component.value && startPos >= 0) {
            text = component.value.substring(0, startPos);
          }
        }
      } else {
        if (this.range) {
          var selectedElem = this.range.startContainer;
          if (!isNullOrUndefined(selectedElem)) {
            var workingNodeContent = selectedElem.textContent;
            var selectStartOffset = this.range.startOffset;
            if (workingNodeContent && selectStartOffset >= 0) {
              text = workingNodeContent.substring(0, selectStartOffset);
            }
          }
        }
      }
      return text;
    };
    Mention2.prototype.getLastLetter = function(text) {
      if (isNullOrUndefined(text)) {
        return "";
      }
      var textValue = text.replace(/\u00A0/g, " ");
      var words = textValue.split(/\s+/);
      var wordCnt = words.length - 1;
      return words[wordCnt].trim();
    };
    Mention2.prototype.isContentEditable = function(element) {
      return element && element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA";
    };
    Mention2.prototype.showPopup = function() {
      this.beforePopupOpen = true;
      if (document.activeElement != this.inputElement) {
        this.inputElement.focus();
      }
      this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : "";
      this.didPopupOpenByTypingInitialChar = false;
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      if (!this.isTyped) {
        this.resetList(this.dataSource, this.fields);
      }
      if (isNullOrUndefined(this.list)) {
        this.initValue();
      }
      this.renderPopup();
      attributes(this.inputElement, { "aria-activedescendant": this.selectedElementID });
      if (this.selectedElementID == null) {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    Mention2.prototype.hidePopup = function(e) {
      this.removeSelection();
      this.closePopup(0, e);
    };
    Mention2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.inputElement.removeAttribute("aria-owns");
      this.inputElement.removeAttribute("aria-activedescendant");
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("closed", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && _this.popupObj) {
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };
    Mention2.prototype.renderPopup = function() {
      var _this = this;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle_1;
          if (isNullOrUndefined(_this.target)) {
            popupEle_1 = _this.createElement("div", {
              id: _this.inputElement.id + "_popup",
              className: "e-mention e-popup " + (_this.cssClass != null ? _this.cssClass : "")
            });
          } else {
            popupEle_1 = _this.element;
            if (_this.cssClass != null) {
              addClass([popupEle_1], _this.cssClass.split(" "));
            }
          }
          if (!isNullOrUndefined(_this.target)) {
            popupEle_1.id = _this.inputElement.id + "_popup";
          }
          _this.listHeight = formatUnit(_this.popupHeight);
          if (!isNullOrUndefined(_this.list.querySelector("li")) && !_this.initRemoteRender) {
            var li = _this.list.querySelector("." + dropDownBaseClasses.focus);
            if (!isNullOrUndefined(li)) {
              _this.selectedLI = li;
              var value = _this.getFormattedValue(li.getAttribute("data-value"));
              _this.selectEventCallback(li, _this.getDataByValue(value), value, true);
            }
          }
          append([_this.list], popupEle_1);
          if (_this.inputElement.parentElement && _this.inputElement.parentElement.parentElement && _this.inputElement.parentElement.parentElement.classList.contains("e-richtexteditor")) {
            if (popupEle_1.firstElementChild && popupEle_1.firstElementChild.childElementCount > 0) {
              popupEle_1.firstElementChild.setAttribute("aria-owns", _this.inputElement.parentElement.parentElement.id);
              addClass([popupEle_1], "e-rte-elements");
            }
          }
          if (!_this.popupObj || !document.body.contains(_this.popupObj.element) || !document.contains(popupEle_1) && isNullOrUndefined(_this.target)) {
            document.body.appendChild(popupEle_1);
          }
          var coordinates_1;
          popupEle_1.style.visibility = "hidden";
          _this.setHeight(popupEle_1);
          var offsetValue = 0;
          var left = 0;
          _this.initializePopup(popupEle_1, offsetValue, left);
          _this.checkCollision(popupEle_1);
          popupEle_1.style.visibility = "visible";
          var popupLeft_1 = popupEle_1.parentElement.offsetWidth - popupEle_1.offsetWidth;
          var popupHeight_1 = popupEle_1.offsetHeight;
          addClass([popupEle_1], ["e-mention", "e-popup", "e-popup-close"]);
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          attributes(_this.inputElement, { "aria-owns": _this.inputElement.id + "_options", "aria-activedescendant": _this.selectedElementID });
          if (_this.selectedElementID == null) {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, cancel: false, animation: animModel };
          _this.trigger("opened", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              _this.renderReactTemplates();
              if (_this.popupObj) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.inputElement : null);
              }
              if (isNullOrUndefined(_this.getTriggerCharPosition())) {
                return;
              }
              coordinates_1 = _this.getCoordinates(_this.inputElement, _this.getTriggerCharPosition());
              if (!_this.isCollided) {
                popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(coordinates_1.left.toString(), "px;\nposition: absolute;\n display: block;");
              } else {
                if (_this.collision.length > 0 && _this.collision.indexOf("right") > -1 && _this.collision.indexOf("bottom") === -1) {
                  popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(popupLeft_1.toString(), "px;\nposition: absolute;\n display: block;");
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") === -1) {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString()));
                } else if (_this.collision && _this.collision.length > 0 && _this.collision.indexOf("bottom") > -1 && _this.collision.indexOf("right") > -1) {
                  popupEle_1.style.left = formatUnit(popupLeft_1);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(popupHeight_1.toString()));
                } else {
                  popupEle_1.style.left = formatUnit(coordinates_1.left);
                  popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(_this.popupHeight.toString()));
                }
                _this.isCollided = false;
                _this.collision = [];
              }
              popupEle_1.style.width = _this.popupWidth !== "100%" && !isNullOrUndefined(_this.popupWidth) ? formatUnit(_this.popupWidth) : "auto";
              _this.setHeight(popupEle_1);
              popupEle_1.style.zIndex = _this.zIndex === 1e3 ? getZindexPartial(popupEle_1).toString() : _this.zIndex.toString();
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    Mention2.prototype.setHeight = function(popupEle) {
      if (this.popupHeight !== "auto" && this.list) {
        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px";
        popupEle.style.maxHeight = formatUnit(this.popupHeight);
      } else {
        popupEle.style.height = "auto";
      }
    };
    Mention2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "mention")) {
        var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
        this.collision = isCollide(popupEle, null, coordinates.left, coordinates.top);
        if (this.collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
          this.isCollided = true;
        }
        this.popupObj.resolveCollision();
      }
    };
    Mention2.prototype.getTriggerCharPosition = function() {
      var mostRecentTriggerCharPos;
      var currentRange = this.getTextRange();
      if (currentRange !== void 0 && currentRange !== null) {
        mostRecentTriggerCharPos = 0;
        var idx = currentRange.lastIndexOf(this.mentionChar);
        if (idx >= mostRecentTriggerCharPos) {
          mostRecentTriggerCharPos = idx;
        }
      }
      return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;
    };
    Mention2.prototype.initializePopup = function(element, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputElement,
        collision: { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: { X: "left", Y: "bottom" },
        actionOnScroll: "hide",
        zIndex: this.zIndex,
        close: function() {
          _this.destroyPopup();
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          _this.setDataIndex();
        }
      });
    };
    Mention2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    Mention2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.popupObj.destroy();
      if (isNullOrUndefined(this.target)) {
        detach(this.popupObj.element);
      } else {
        this.popupObj.element.innerHTML = "";
        this.popupObj.element.removeAttribute("style");
        this.popupObj.element.removeAttribute("aria-disabled");
      }
      if (this.list.classList.contains("e-nodata")) {
        this.list = null;
      }
    };
    Mention2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id))) {
        this.hidePopup(e);
      }
    };
    Mention2.prototype.getCoordinates = function(element, position) {
      var properties = ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"];
      var div;
      var span;
      var range;
      var globalRange;
      var coordinates;
      var computed;
      var rect;
      if (!this.isContentEditable(this.inputElement)) {
        div = this.createElement("div", { className: "e-form-mirror-div" });
        document.body.appendChild(div);
        computed = getComputedStyle(element);
        div.style.position = "absolute";
        div.style.visibility = "hidden";
        properties.forEach(function(prop) {
          div.style[prop] = computed[prop];
        });
        div.textContent = element.value.substring(0, position);
        if (this.inputElement.nodeName === "INPUT") {
          div.textContent = div.textContent.replace(/\s/g, " ");
        }
        span = this.createElement("span");
        span.textContent = element.value.substring(position) || ".";
        div.appendChild(span);
        rect = element.getBoundingClientRect();
      } else {
        var selectedNodePosition = this.getTriggerCharPosition();
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
          range.setStart(globalRange.startContainer, selectedNodePosition);
          range.setEnd(globalRange.startContainer, selectedNodePosition);
        } else {
          range.setStart(globalRange.startContainer, globalRange.startOffset);
          range.setEnd(globalRange.startContainer, globalRange.endOffset);
        }
        this.isTyped = false;
        range.collapse(false);
        rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();
      }
      var rectTop = rect.top;
      var rectLeft = rect.left;
      var iframes = document.querySelectorAll("iframe");
      if (iframes.length > 0) {
        for (var i = 0; i < iframes.length; i++) {
          var iframe = iframes[i];
          if (iframe.contentDocument && iframe.contentDocument.contains(element)) {
            var iframeRect = iframe.getBoundingClientRect();
            rectTop += iframeRect.top;
            rectLeft += iframeRect.left;
          }
        }
      }
      var doc = document.documentElement;
      var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var width = 0;
      if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {
        for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {
          if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== "") {
            width += this.range.startContainer.childNodes[i].getClientRects()[0].width;
          } else if (this.range.startContainer.childNodes[i].textContent !== "") {
            var span_1 = document.createElement("span");
            span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;
            document.body.appendChild(span_1);
            var textNodeWidth = span_1.offsetWidth;
            document.body.removeChild(span_1);
            width += textNodeWidth;
          }
        }
      }
      if (!this.isContentEditable(this.inputElement)) {
        coordinates = {
          top: rectTop + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element.scrollTop - (this.isCollided ? 10 : 0),
          left: rectLeft + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
        };
        document.body.removeChild(div);
      } else {
        if (this.collision && this.collision.length > 0 && this.collision.indexOf("right") > -1 && this.collision.indexOf("bottom") === -1) {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10),
            left: rectLeft + windowLeft + width
          };
        } else {
          coordinates = {
            top: rectTop + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),
            left: rectLeft + windowLeft + width
          };
        }
      }
      return coordinates;
    };
    Mention2.prototype.initValue = function() {
      this.isDataFetched = false;
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    Mention2.prototype.updateValues = function() {
      var li = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(li)) {
        this.setSelection(li, null);
      }
    };
    Mention2.prototype.renderList = function() {
      _super.prototype.render.call(this);
      this.unWireListEvents();
      this.wireListEvents();
    };
    Mention2.prototype.wireListEvents = function() {
      EventHandler.add(this.list, "mousedown", this.onMouseClick, this);
      EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
    };
    Mention2.prototype.unWireListEvents = function() {
      EventHandler.remove(this.list, "mousedown", this.onMouseClick);
      EventHandler.remove(this.list, "mouseover", this.onMouseOver);
      EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
    };
    Mention2.prototype.onMouseClick = function(e) {
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li)) {
        return;
      }
      this.isSelected = true;
      this.setSelection(li, e);
      var delay = 100;
      this.closePopup(delay, e);
      this.inputElement.focus();
      e.preventDefault();
    };
    Mention2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = this.getFormattedValue(li.getAttribute("data-value"));
      var selectedData = this.getDataByValue(value);
      if (!preventSelect && !isNullOrUndefined(e) && !(e.action === "down" || e.action === "up")) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
            _this.isSelected = false;
            _this.isSelectCancel = true;
          } else {
            _this.selectEventCallback(li, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    Mention2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };
    Mention2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {
        this.setScrollPosition(e);
      }
      if (e && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      if (isNullOrUndefined(e) || this.setValue(e)) {
        return;
      }
    };
    Mention2.prototype.setScrollPosition = function(e) {
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    Mention2.prototype.scrollBottom = function(isInitial) {
      if (!isNullOrUndefined(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    Mention2.prototype.scrollTop = function() {
      if (!isNullOrUndefined(this.selectedLI)) {
        var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
        nextOffset = this.fields.groupBy && nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop;
        }
      }
    };
    Mention2.prototype.selectEventCallback = function(li, selectedData, value, selectLi) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      if (selectLi) {
        addClass([li], dropDownBaseClasses.selected);
      }
      li.setAttribute("aria-selected", "true");
      this.activeIndex = this.getIndexByValue(value);
    };
    Mention2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.setValue = function(e) {
      if (!this.isReact) {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate();
        }
        this.updateMentionValue(e);
        return true;
      } else {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate(e);
        } else {
          this.updateMentionValue(e);
        }
        return true;
      }
    };
    Mention2.prototype.updateMentionValue = function(e) {
      var dataItem = this.getItemData();
      var textSuffix;
      var value;
      var endPos;
      var range;
      var globalRange;
      var selection = this.inputElement.ownerDocument.getSelection();
      var startPos = this.getTriggerCharPosition();
      textSuffix = typeof this.suffixText === "string" ? this.suffixText : "";
      if (this.isSelectCancel) {
        this.isSelectCancel = false;
        return;
      }
      if (dataItem.text !== null) {
        value = this.mentionVal(dataItem.text);
      }
      if (!this.isContentEditable(this.inputElement)) {
        var myField = this.inputElement;
        var currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);
        value += textSuffix;
        endPos = startPos + this.mentionChar.length;
        endPos += currentTriggerSnippet.length;
        myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);
        myField.selectionStart = startPos + value.length;
        myField.selectionEnd = startPos + value.length;
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.onChangeEvent(e);
      } else {
        endPos = this.getTriggerCharPosition() + this.mentionChar.length;
        if (this.range && this.range.startContainer.textContent.trim() !== this.mentionChar) {
          endPos = this.range.endOffset;
        }
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.mentionChar) {
          range.setStart(globalRange.startContainer, startPos);
          range.setEnd(globalRange.startContainer, endPos);
        } else {
          if (globalRange.commonAncestorContainer.textContent.trim() !== "" && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
            range.setStart(globalRange.startContainer, globalRange.startOffset - 1);
            range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);
          } else {
            range.setStart(globalRange.startContainer, globalRange.startOffset);
            range.setEnd(globalRange.startContainer, globalRange.endOffset);
          }
        }
        this.isTyped = false;
        range.deleteContents();
        var element = this.createElement("div");
        element.innerHTML = value;
        var frag = document.createDocumentFragment();
        var node = void 0;
        var lastNode = void 0;
        while (node = element.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          range.setStartAfter(lastNode);
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        if (!isNullOrUndefined(e.pointerType) && e.pointerType === "mouse") {
          var event_1 = new CustomEvent("content-changed", { detail: { click: true } });
          this.inputElement.dispatchEvent(event_1);
        }
        ;
        this.onChangeEvent(e);
      }
    };
    Mention2.prototype.mentionVal = function(value) {
      var showChar = this.showMentionChar ? this.mentionChar : "";
      if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {
        value = this.displayTempElement.innerHTML;
      }
      if (this.isContentEditable(this.inputElement)) {
        if (Browser.isAndroid) {
          return '<span contenteditable="true" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : " ");
        } else {
          return '<span contenteditable="false" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : " ");
        }
      } else {
        return showChar + value;
      }
    };
    Mention2.prototype.setDisplayTemplate = function(e) {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["displayTemplate"]);
        if (this.displayTempElement) {
          detach(this.displayTempElement);
          this.displayTempElement = null;
        }
      }
      if (!this.displayTempElement) {
        this.displayTempElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.displayTempElement.innerHTML = "";
      }
      compiledString = compile(this.displayTemplate);
      var displayCompTemp = compiledString(this.itemData, this, "displayTemplate", this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);
      if (displayCompTemp && displayCompTemp.length > 0) {
        append(displayCompTemp, this.displayTempElement);
      }
      if (!this.isReact) {
        this.renderTemplates();
      } else {
        this.renderTemplates(function() {
          _this.updateMentionValue(e);
        });
      }
    };
    Mention2.prototype.renderTemplates = function(callBack) {
      this.renderReactTemplates(callBack);
    };
    Mention2.prototype.setSpinnerTemplate = function() {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["spinnerTemplate"]);
        if (this.spinnerTemplateElement) {
          detach(this.spinnerTemplateElement);
          this.spinnerTemplateElement = null;
        }
      }
      if (!this.spinnerTemplateElement) {
        this.spinnerTemplateElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.spinnerTemplateElement.innerHTML = "";
      }
      compiledString = compile(this.spinnerTemplate);
      var spinnerCompTemp = compiledString(null, this, "spinnerTemplate", this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);
      if (spinnerCompTemp && spinnerCompTemp.length > 0) {
        for (var i = 0; i < spinnerCompTemp.length; i++) {
          this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);
        }
      }
      if (!this.isReact) {
        this.renderTemplates();
        this.popupObj.element.appendChild(this.spinnerTemplateElement);
      } else {
        this.renderTemplates(function() {
          _this.popupObj.element.appendChild(_this.spinnerTemplateElement);
        });
      }
    };
    Mention2.prototype.onChangeEvent = function(eve) {
      this.isSelected = false;
      var items = this.detachMentionChanges(this.itemData);
      var preItems;
      if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
        preItems = Object.defineProperties({}, {
          value: {
            value: this.previousItemData,
            enumerable: true
          },
          text: {
            value: this.previousItemData,
            enumerable: true
          }
        });
      } else {
        preItems = this.previousItemData;
      }
      var eventArgs = {
        e: eve,
        item: this.item,
        itemData: items,
        previousItem: this.previousSelectedLI,
        previousItemData: preItems,
        isInteracted: eve ? true : false,
        value: this.item.innerHTML,
        element: this.inputElement
      };
      this.trigger("change", eventArgs);
    };
    Mention2.prototype.detachMentionChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    Mention2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    Mention2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    Mention2.prototype.setHover = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    Mention2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    Mention2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    Mention2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    Mention2.prototype.search = function(text, positionX, positionY) {
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      if (this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.ignoreCase && text === lastWordRange) {
        this.resetList(this.dataSource, this.fields);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        return;
      }
      if (isNullOrUndefined(this.list)) {
        this.renderList();
        this.renderPopup();
      } else {
        this.showPopup();
      }
      this.popupObj.element.style.left = formatUnit(positionX);
      this.popupObj.element.style.top = formatUnit(positionY);
    };
    Mention2.prototype.destroy = function() {
      this.hidePopup();
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.inputElement && !this.inputElement.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      this.previousSelectedLI = null;
      this.item = null;
      this.selectedLI = null;
      this.popupObj = null;
      _super.prototype.destroy.call(this);
    };
    Mention2.prototype.getLocaleName = function() {
      return "mention";
    };
    Mention2.prototype.getNgDirective = function() {
      return "EJS-MENTION";
    };
    Mention2.prototype.getModuleName = function() {
      return "mention";
    };
    __decorate26([
      Property(null)
    ], Mention2.prototype, "cssClass", void 0);
    __decorate26([
      Property("@")
    ], Mention2.prototype, "mentionChar", void 0);
    __decorate26([
      Property(false)
    ], Mention2.prototype, "showMentionChar", void 0);
    __decorate26([
      Property(false)
    ], Mention2.prototype, "allowSpaces", void 0);
    __decorate26([
      Property(null)
    ], Mention2.prototype, "suffixText", void 0);
    __decorate26([
      Property(25)
    ], Mention2.prototype, "suggestionCount", void 0);
    __decorate26([
      Property(0)
    ], Mention2.prototype, "minLength", void 0);
    __decorate26([
      Property("None")
    ], Mention2.prototype, "sortOrder", void 0);
    __decorate26([
      Property(true)
    ], Mention2.prototype, "ignoreCase", void 0);
    __decorate26([
      Property(false)
    ], Mention2.prototype, "highlight", void 0);
    __decorate26([
      Property()
    ], Mention2.prototype, "locale", void 0);
    __decorate26([
      Property("auto")
    ], Mention2.prototype, "popupWidth", void 0);
    __decorate26([
      Property("300px")
    ], Mention2.prototype, "popupHeight", void 0);
    __decorate26([
      Property(null)
    ], Mention2.prototype, "displayTemplate", void 0);
    __decorate26([
      Property(null)
    ], Mention2.prototype, "itemTemplate", void 0);
    __decorate26([
      Property("No records found")
    ], Mention2.prototype, "noRecordsTemplate", void 0);
    __decorate26([
      Property(null)
    ], Mention2.prototype, "spinnerTemplate", void 0);
    __decorate26([
      Property()
    ], Mention2.prototype, "target", void 0);
    __decorate26([
      Property([])
    ], Mention2.prototype, "dataSource", void 0);
    __decorate26([
      Property(null)
    ], Mention2.prototype, "query", void 0);
    __decorate26([
      Property("Contains")
    ], Mention2.prototype, "filterType", void 0);
    __decorate26([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], Mention2.prototype, "fields", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "actionBegin", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "actionComplete", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "actionFailure", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "change", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "beforeOpen", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "opened", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "closed", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "select", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "filtering", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "created", void 0);
    __decorate26([
      Event()
    ], Mention2.prototype, "destroyed", void 0);
    Mention2 = __decorate26([
      NotifyPropertyChanges
    ], Mention2);
    return Mention2;
  }(DropDownBase)
);

export {
  incrementalSearch,
  Search,
  escapeCharRegExp,
  resetIncrementalSearchValues,
  highlightSearch,
  revertHighlightSearch,
  VirtualScroll,
  FieldSettings,
  dropDownBaseClasses,
  DropDownBase,
  dropDownListClasses,
  DropDownList,
  Toolbar,
  ContextMenu,
  Fields,
  TreeSettings,
  DropDownTree,
  ComboBox,
  AutoComplete,
  createFloatLabel,
  updateFloatLabelState,
  removeFloating,
  setPlaceHolder,
  floatLabelFocus,
  floatLabelBlur,
  encodePlaceholder,
  MultiSelect,
  CheckBoxSelection,
  SelectionSettings,
  ToolbarSettings,
  ListBox,
  Mention
};
//# sourceMappingURL=chunk-XDWHYB2D.js.map
